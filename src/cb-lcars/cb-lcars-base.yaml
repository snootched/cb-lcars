cb-lcars-base:
  template:
    - cb-lcars-functions
    - cb-lcars-actions-disable
  label: '[[[ return variables.label ]]]'
  entity: '[[[ return variables.entity ]]]'
  variables:
    label: ' '
    text:
      label:
        font_size: 20px
        font_weight: normal
        font_family: '''Antonio'', Arial, sans-serif'
        align: left
        align_items: center
        justify: center
        transform: none
        padding:
          top: 10px
          left: 0px
          right: 0px
          bottom: 10px
        color:
          default: var(--primary-text-color)
          active: var(--lcars-ui-secondary)
          inactive: var(--lcars-ui-tertiary)
          zero: var(--lcars-green)
          non_zero: var(--lcars-blue)
          hvac_heat: var(--lcars-orange)
          hvac_cool: var(--lcars-blue)
          unavailable: var(--lcars-card-button-unavailable)
      name:
        font_size: 20px
        font_weight: normal
        font_family: '''Antonio'', Arial, sans-serif'
        align: left
        align_items: center
        justify: center
        transform: none
        padding:
          top: 10px
          left: 0px
          right: 0px
          bottom: 10px
        color:
          default: var(--primary-text-color)
          active: var(--lcars-ui-secondary)
          inactive: var(--lcars-ui-tertiary)
          zero: var(--lcars-green)
          non_zero: var(--lcars-blue)
          hvac_heat: var(--lcars-orange)
          hvac_cool: var(--lcars-blue)
          unavailable: var(--lcars-card-button-unavailable)
      state:
        font_size: 20px
        font_weight: normal
        font_family: '''Antonio'', Arial, sans-serif'
        align: left
        align_items: center
        justify: center
        transform: none
        padding:
          top: 10px
          left: 0px
          right: 0px
          bottom: 10px
        color:
          default: var(--primary-text-color)
          active: var(--lcars-ui-secondary)
          inactive: var(--lcars-ui-tertiary)
          zero: var(--lcars-green)
          non_zero: var(--lcars-blue)
          hvac_heat: var(--lcars-orange)
          hvac_cool: var(--lcars-blue)
          unavailable: var(--lcars-card-button-unavailable)
    card:
      height: null
      min_height: 10px
      width: null
      color:
        default: var(--lcars-card-top-color, var(--picard-dark-gray))
        active: var(--lcars-ui-secondary)
        inactive: var(--lcars-ui-tertiary)
        zero: var(--lcars-green)
        non_zero: var(--lcars-blue)
        hvac_heat: var(--lcars-orange)
        hvac_cool: var(--lcars-blue)
        unavailable: var(--lcars-card-button-unavailable)
        background:
          default: var(--lcars-card-top-color, var(--picard-dark-gray))
          active: var(--lcars-ui-secondary)
          inactive: var(--lcars-ui-tertiary)
          zero: var(--lcars-green)
          non_zero: var(--lcars-blue)
          hvac_heat: var(--lcars-orange)
          hvac_cool: var(--lcars-blue)
          unavailable: var(--lcars-card-button-unavailable)
      border:
        top:
          left_radius: 0px
          right_radius: 0px
          size: 0px
        bottom:
          left_radius: 0px
          right_radius: 0px
          size: 0px
        left:
          size: 0px
        right:
          size: 0px
        inner:
          factor: 2
          min_radius: 30px
          width: 35px
    icon:
      box_size: 35px
      size: 24px
      justify: left
      color:
        default: black
        active: null
        inactive: null
        unavailable: null
        background:
          active: null
          inactive: null
    animation:
      justify_content: center
      align_items: center
      transform_origin: center
  show_label: false
  show_state: false
  show_units: true
  show_icon: false
  show_name: false
  state_display: |
    [[[
      if (!entity) {
        return 'n/a';
      }
      // use the custom button card helper to set state to an attribute if provided (arrays/objects are filtered out on the form)
      return helpers.localize(entity, entity.attributes[variables.attribute],'card',this._config.show_units,this._config.units);
    ]]]
  styles:
    img_cell:
      - justify-content: '[[[ return variables.icon.justify ]]]'
    card:
      - height: |
          [[[
            if (variables.card.height) {
              return variables.__get_num_with_unit(variables.card.height);
            } else {
              return "100%";
            }
          ]]]
      - min-height: |
          [[[
            if (variables.card.min_height) {
                return variables.__get_num_with_unit(variables.card.min_height);
            }
          ]]]
      - width: |
          [[[
            if (variables.card.width) {
              return variables.__get_num_with_unit(variables.card.width);
            }
          ]]]
      - border-top: |
          [[[
            return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + (variables.card.border.top.color || variables.card.border.color || variables.card.color.default);
          ]]]
      - border-left: |
          [[[
            return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + (variables.card.border.left.color || variables.card.border.color || variables.card.color.default);
          ]]]
      - border-right: |
          [[[
            return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + (variables.card.border.right.color || variables.card.border.color || variables.card.color.default);
          ]]]
      - border-bottom: |
          [[[
            return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + (variables.card.border.bottom.color || variables.card.border.color || variables.card.color.default);
          ]]]
      - background-color: '[[[ return variables.card.color.background.default ]]]'
      - border-top-left-radius: |
          [[[
            return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
          ]]]
      - border-top-right-radius: |
          [[[
            return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
          ]]]
      - border-bottom-left-radius: |
          [[[
            return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
          ]]]
      - border-bottom-right-radius: |
          [[[
            return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
          ]]]
      - position: relative
    label:
      - z-index: 1
      - display: flex
      - justify-content: '[[[ return variables.text.label.justify ]]]'
      - align-items: '[[[ return variables.text.label.align_items ]]]'
      - text-transform: '[[[ return variables.text.label.transform ]]]'
      - border-left: 0
      - border-top: 0
      - border-top-left-radius: 0px
      - border-top-right-radius: 0px
      - background: none !important
      - position: absolute
      - top: 0px
      - left: 0px
      - width: >-
          [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"; ]]]
      - height: >-
          [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.label.padding.top) + " - " + variables.__get_num_with_unit(variables.text.label.padding.bottom) + ")"; ]]]
      - color: '[[[ return variables.text.label.color.default ]]]'
      - font-size: |
          [[[
            return variables.__get_num_with_unit(variables.text.label.font_size);
          ]]]
      - font-weight: '[[[ return variables.text.label.font_weight ]]]'
      - font-family: '[[[ return variables.text.label.font_family ]]]'
      - justify-self: start
      - text-align: '[[[ return variables.text.label.align ]]]'
      - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.top) ]]]'
      - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.left) ]]]'
      - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.right) ]]]'
      - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.bottom) ]]]'
      - outline: >-
          [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + (variables.card.border.color || variables.card.color.default); ]]]
    state:
      - display: flex
      - justify-content: '[[[ return variables.text.state.justify ]]]'
      - align-items: '[[[ return variables.text.state.align_items ]]]'
      - text-transform: '[[[ return variables.text.state.transform ]]]'
      - border-left: 0
      - border-top: 0
      - border-top-left-radius: 0px
      - border-top-right-radius: 0px
      - background: none !important
      - position: absolute
      - top: 0px
      - left: 0px
      - width: >-
          [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.state.padding.left) + " - " + variables.__get_num_with_unit(variables.text.state.padding.right) + ")"; ]]]
      - height: >-
          [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.state.padding.top) + " - " + variables.__get_num_with_unit(variables.text.state.padding.bottom) + ")"; ]]]
      - color: '[[[ return variables.text.state.color.default ]]]'
      - font-size: |
          [[[
            return variables.__get_num_with_unit(variables.text.state.font_size);
          ]]]
      - font-weight: '[[[ return variables.text.state.font_weight ]]]'
      - font-family: '[[[ return variables.text.state.font_family ]]]'
      - justify-self: start
      - text-align: '[[[ return variables.text.state.align ]]]'
      - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.top) ]]]'
      - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.left) ]]]'
      - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.right) ]]]'
      - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.bottom) ]]]'
      - outline: >-
          [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + (variables.card.border.color || variables.card.color.default); ]]]
    name:
      - display: flex
      - justify-content: '[[[ return variables.text.name.justify ]]]'
      - align-items: '[[[ return variables.text.name.align_items ]]]'
      - text-transform: '[[[ return variables.text.name.transform ]]]'
      - border-left: 0
      - border-top: 0
      - border-top-left-radius: 0px
      - border-top-right-radius: 0px
      - background: none !important
      - position: absolute
      - top: 0px
      - left: 0px
      - width: >-
          [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.name.padding.left) + " - " + variables.__get_num_with_unit(variables.text.name.padding.right) + ")"; ]]]
      - height: >-
          [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.name.padding.top) + " - " + variables.__get_num_with_unit(variables.text.name.padding.bottom) + ")"; ]]]
      - color: '[[[ return variables.text.name.color.default ]]]'
      - font-size: |
          [[[
              return variables.__get_num_with_unit(variables.text.name.font_size);
          ]]]
      - font-weight: '[[[ return variables.text.name.font_weight ]]]'
      - font-family: '[[[ return variables.text.name.font_family ]]]'
      - justify-self: start
      - text-align: '[[[ return variables.text.name.align ]]]'
      - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.top) ]]]'
      - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.left) ]]]'
      - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.right) ]]]'
      - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.bottom) ]]]'
      - outline: >-
          [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + (variables.card.border.color || variables.card.color.default); ]]]
    custom_fields:
      animation:
        - display: flex
        - position: absolute
        - align-items: |
            [[[
              return variables.animation.align_items || 'center';
            ]]]
        - justify-content: |
            [[[
              return variables.animation.justify_content || 'center';
            ]]]
        - transform: |
            [[[
              if (variables.animation?.transform?.advanced) {
                return variables.animation.transform.advanced;
              }
              const transform = variables.animation.transform || {};
              const transforms = [];
              if (transform.scale !== undefined) transforms.push(`scale(${transform.scale})`);
              if (transform.rotate !== undefined) transforms.push(`rotate(${transform.rotate}deg)`);
              if (transform.translate_x !== undefined) transforms.push(`translateX(${transform.translate_x}%)`);
              if (transform.translate_y !== undefined) transforms.push(`translateY(${transform.translate_y}%)`);
              if (transform.skew !== undefined) transforms.push(`skew(${transform.skew}deg)`);
              return transforms.length > 0 ? transforms.join(' ') : 'none';
            ]]]
        - transform-origin: |
            [[[
                return (variables.animation?.transform_origin) ? variables.animation.transform_origin : 'center';
            ]]]
        - filter: |
            [[[
              if (variables.animation?.filter?.advanced) {
                return variables.animation.filter.advanced;
              }

              const filter = variables.animation.filter || {};
              const filters = [];

              if (filter.blur !== undefined) filters.push(`blur(${filter.blur}px)`);
              if (filter.brightness !== undefined) filters.push(`brightness(${filter.brightness}%)`);
              if (filter.saturate !== undefined) filters.push(`saturate(${filter.saturate}%)`);
              if (filter.invert !== undefined) filters.push(`invert(${filter.invert}%)`);
              if (filter.sepia !== undefined) filters.push(`sepia(${filter.sepia}%)`);
              if (filter.grayscale !== undefined) filters.push(`grayscale(${filter.grayscale}%)`);
              if (filter.hue_rotate !== undefined) filters.push(`hue-rotate(${filter.hue_rotate}deg)`);
              if (filter.contrast !== undefined) filters.push(`contrast(${filter.contrast}%)`);
              if (filter.opacity !== undefined) filters.push(`opacity(${filter.opacity}%)`);

              return filters.length > 0 ? filters.join(' ') : 'none';
            ]]]
        - height: |
            [[[
              return "calc( " + variables.__get_num_with_unit(variables.card.height) +
              " - " +
              variables.__get_num_with_unit(variables.card.border.top.size) +
              " - " +
              variables.__get_num_with_unit(variables.card.border.bottom.size)
            ]]]
        - width: |
            [[[
              return "calc( " + variables.__get_num_with_unit(variables.card.width) +
              " - " +
              variables.__get_num_with_unit(variables.card.border.left.size) +
              " - " +
              variables.__get_num_with_unit(variables.card.border.right.size)
            ]]]
  state:
    - id: state_on
      operator: template
      value: |
        [[[
          return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        card:
          - cblcars_matched_state: |
              [[[
                this._config.cblcars_matched_state = 'active'
                return 'state_on'
              ]]]
          - transition: all 0.4s ease-in
          - background-color: '[[[ return variables.card.color.background.active ]]]'
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.active;
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.active;
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.active;
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.active;
              ]]]
        state:
          - color: '[[[ return variables.text.state.color.active ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
        label:
          - color: '[[[ return variables.text.label.color.active ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
        name:
          - color: '[[[ return variables.text.name.color.active ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
        icon:
          - color: >-
              [[[ return variables.icon.color.active || variables.icon.color.default ]]]
          - background: >-
              [[[ return variables.icon.color.background.active || variables.card.color.background.active ]]]
    - id: state_off
      operator: template
      value: |
        [[[
          return entity !== undefined && ['off', 'closed', 'unlocked'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        card:
          - cblcars_matched_state: |
              [[[
                this._config.cblcars_matched_state = 'inactive'
                return 'state_off'
              ]]]
          - transition: all 0.4s ease-out
          - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.inactive;
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.inactive;
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.inactive;
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.inactive;
              ]]]
        state:
          - color: '[[[ return variables.text.state.color.inactive ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
        label:
          - color: '[[[ return variables.text.label.color.inactive ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
        name:
          - color: '[[[ return variables.text.name.color.inactive ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
        icon:
          - color: >-
              [[[ return variables.icon.color.inactive || variables.icon.color.default ]]]
          - background: >-
              [[[ return variables.icon.color.background.inactive || variables.card.color.background.inactive ]]]
    - id: state_heat
      value: heat
      styles:
        card:
          - cblcars_matched_state: |
              [[[
                this._config.cblcars_matched_state = 'heat'
                return 'state_heat'
              ]]]
          - transition: all 0.4s ease-out
          - background-color: '[[[ return variables.card.color.background.hvac_heat ]]]'
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.hvac_heat;
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.hvac_heat;
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.hvac_heat;
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.hvac_heat;
              ]]]
        state:
          - color: '[[[ return variables.text.state.color.hvac_heat ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_heat; ]]]
        label:
          - color: '[[[ return variables.text.label.color.hvac_heat ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_heat; ]]]
        name:
          - color: '[[[ return variables.text.name.color.hvac_heat ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_heat; ]]]
    - id: state_cool
      value: cool
      styles:
        card:
          - cblcars_matched_state: |
              [[[
                this._config.cblcars_matched_state = 'cool'
                return 'state_cool'
              ]]]
          - transition: all 0.4s ease-out
          - background-color: '[[[ return variables.card.color.background.hvac_cool ]]]'
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.hvac_cool;
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.hvac_cool;
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.hvac_cool;
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.hvac_cool;
              ]]]
        state:
          - color: '[[[ return variables.text.state.color.hvac_cool ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_cool; ]]]
        label:
          - color: '[[[ return variables.text.label.color.hvac_cool ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_cool; ]]]
        name:
          - color: '[[[ return variables.text.name.color.hvac_cool ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_cool; ]]]
    - id: state_unavailable
      operator: template
      value: |
        [[[
          return entity !== undefined && ['unknown', 'unavailable'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        card:
          - cblcars_matched_state: |
              [[[
                this._config.cblcars_matched_state = 'unavailable'
                return 'state_unavailable'
              ]]]
          - background-color: '[[[ return variables.card.color.background.unavailable ]]]'
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.unavailable;
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.unavailable;
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.unavailable;
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.unavailable;
              ]]]
        state:
          - color: '[[[ return variables.text.state.color.unavailable ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.unavailable; ]]]
        label:
          - color: '[[[ return variables.text.label.color.unavailable ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.unavailable; ]]]
        name:
          - color: '[[[ return variables.text.name.color.unavailable ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.unavailable; ]]]
        icon:
          - color: >-
              [[[ return variables.icon.color.unavailable || variables.icon.color.inactive || variables.icon.color.default ]]]
          - background: >-
              [[[ return variables.icon.color.background.unavailable || variables.card.color.background.unavailable || variables.icon.color.background.inactive || variables.card.color.background.inactive ]]]
    - id: state_zero
      operator: template
      value: |
        [[[
          if (entity === undefined) return false;
          return entity !== undefined && Number(states[entity.entity_id].state) === 0;
        ]]]
      styles:
        card:
          - cblcars_matched_state: |
              [[[
                this._config.cblcars_matched_state = 'zero'
                return 'state_zero'
              ]]]
          - background-color: '[[[ return variables.card.color.background.zero ]]]'
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.zero;
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.zero;
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.zero;
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.zero;
              ]]]
        state:
          - color: '[[[ return variables.text.state.color.zero ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.zero; ]]]
        label:
          - color: '[[[ return variables.text.label.color.zero ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.zero; ]]]
        name:
          - color: '[[[ return variables.text.name.color.zero ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.zero; ]]]
    - id: state_nonzero
      operator: template
      value: |
        [[[
          if (entity === undefined) return false;
          return entity !== undefined && Number(states[entity.entity_id].state) !== 0;
        ]]]
      styles:
        card:
          - cblcars_matched_state: |
              [[[
                this._config.cblcars_matched_state = 'non_zero'
                return 'state_nonzero'
              ]]]
          - background-color: '[[[ return variables.card.color.background.non_zero ]]]'
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.non_zero;
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.non_zero;
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.non_zero;
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.non_zero;
              ]]]
        state:
          - color: '[[[ return variables.text.state.color.non_zero ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.non_zero; ]]]
        label:
          - color: '[[[ return variables.text.label.color.non_zero ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.non_zero; ]]]
        name:
          - color: '[[[ return variables.text.name.color.non_zero ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.non_zero; ]]]
    - id: state_default
      operator: default
      styles:
        card:
          - cblcars_matched_state: |
              [[[
                this._config.cblcars_matched_state = 'default'
                return 'state_default'
              ]]]
          - background-color: '[[[ return variables.card.color.background.default ]]]'
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.default;
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.default;
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.default;
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.default;
              ]]]
        state:
          - color: '[[[ return variables.text.state.color.default ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.default; ]]]
        label:
          - color: '[[[ return variables.text.label.color.default ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.default; ]]]
        name:
          - color: '[[[ return variables.text.name.color.default ]]]'
          - outline: >-
              [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.default; ]]]
        icon:
          - color: >-
              [[[ return variables.icon.color.inactive || variables.icon.color.default ]]]
          - background: >-
              [[[ return variables.icon.color.background.default || variables.card.color.background.inactive ]]]
