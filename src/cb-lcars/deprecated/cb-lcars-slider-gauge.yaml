cb-lcars-slider-gauge:
  type: custom:cblcars-button-card
  template:
    - cb-lcars-card-base
    - cb-lcars-functions
  entity: "[[[ return variables.entity ]]]"
  triggers_update: "[[[ return variables.entity ]]]"
  variables:
    vertical: true
    locked: false
    card:
      width: |
        [[[
          return variables.__getParentDimension(this,'width','px', { height: 400, width: 80 });
        ]]]
      height: |
        [[[
          return variables.__getParentDimension(this,'height','px', {height: 400, width: 80});
        ]]]
    entity: '[[[ return variables.__get_random_entity("light"); ]]]'
    entity_color: "[[[ return variables.__get_light_css_color(variables.entity) ]]]"
    entity_match_slider: false
    meter:
      template:
        - cb-lcars-button-grid
      variables:
        card:
          height: "[[[ return variables.card.height ]]]"
        grid:
          X: 1
          "Y": 10
          gap: 0px
          buttons:
            - label: "100"
            - label: "90"
            - label: "80"
            - label: "70"
            - label: "60"
            - label: "50"
            - label: "40"
            - label: "30"
            - label: "20"
            - label: "10"
        button:
          show_label: true
          entity: "[[[ return variables.entity ]]]"
          triggers_update: "[[[ return variables.entity ]]]"
          template:
            - cb-lcars-button-picard
            - cb-lcars-button-picard-label-ne
          variables:
            card:
              height: |
                [[[
                    return variables.__calculcate_grid_cell_dimension(variables.card.height, 10, 0, "20px")
                ]]]
              width: "[[[ return variables.card.width ]]]"
              border:
                right:
                  size: 0
                left:
                  size: 0
                top:
                  size: 2px
                bottom:
                  size: 0
              color:
                background:
                  inactive: transparent
                  active: transparent
                  default: transparent
            text:
              label:
                font_size: 14px
                padding:
                  right: 0px
                  top: 2px
                color:
                  "off": var(--lcars-ui-primary)
                  "on": var(--lcars-ui-secondary)
    slider:
      variables:
        color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-lightest-blue)" ]]]
        color_alpha: 0.95
        border_color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-blue)" ]]]
        border_alpha: 0.5
        border_width: 2px
        height: "[[[ return variables.card.height ]]]"
        width: 15px
        left_padding: 5px
        step: 1
        mode: brightness
  show_label: true
  styles:
    card:
      - width: "[[[ return variables.card.width ]]]"
      - height: "[[[ return variables.card.height ]]]"
      - border-radius: 0 !important
      - background: none
    custom_fields:
      meter:
        - position: absolute
        - left: 0px
        - top: 0px
      slider:
        - visibility: "[[[ return (variables.locked) ? 'hidden' : 'visible' ]]]"
        - position: absolute
        - left: 0px
        - top: 0px
        - z-index: 1
        - width: "[[[ return variables.card.width ]]]"
        - height: "[[[ return variables.card.height ]]]"
      locked_bar:
        - position: absolute
        - z-index: 1
        - left: 0px
        - padding-left: 5px
        - width: "[[[ return variables.card.width ]]]"
        - height: "[[[ return variables.card.height ]]]"
        - visibility: "[[[ return (variables.locked) ? 'visible' : 'hidden' ]]]"
  custom_fields:
    meter:
      card:
        type: custom:cblcars-button-card
        template: "[[[ return variables.meter.template ]]]"
        variables: "[[[ return variables.meter.variables ]]]"
    slider:
      card:
        type: custom:cblcars-my-slider-v2
        entity: "[[[ return variables.entity ]]]"
        mode: "[[[ return variables.slider.variables.mode ]]]"
        flipped: false
        inverse: false
        vertical: true
        step: "[[[ return variables.slider.variables.step; ]]]"
        styles:
          card:
            - width: "[[[ return variables.card.width ]]]"
            - height: "[[[ return variables.card.height ]]]"
            - background: none
            - border-radius: 0
          progress:
            - background-color: >-
                [[[ return
                variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                ]]]
            - border: >-
                [[[ return variables.slider.variables.border_width + " solid " +
                variables.__hex_to_rgba(variables.slider.variables.border_color,
                variables.slider.variables.border_alpha)  ]]]
            - width: "[[[ return variables.slider.variables.width ]]]"
            - height: "[[[ return variables.slider.variables.height ]]]"
            - left: "[[[ return variables.slider.variables.left_padding ]]]"
          container:
            - border-radius: 0
          track:
            - background: none
          thumb:
            - background: none
    locked_bar: |
      [[[
        const entityState = entity.state;
        console.log(entity);
        const entityType = entity.entity_id.split('.')[0]; // Extract entity type

        let progressPercentage;
        if (entityType === 'light') {
          // For light entities, scale the brightness to a percentage
          progressPercentage = (parseFloat(entity.attributes.brightness) / 255) * 100;
        } else {
          // For other entities, assume a 0-100 scale
          progressPercentage = parseFloat(entityState);
        }

        const isVertical = variables.vertical;
        const width = isVertical ? variables.slider.variables.width : variables.card.width;
        const height = isVertical ? variables.card.height : variables.slider.variables.width;
        const borderRadius = 0;
        const borderWidth = variables.slider.variables.border_width;
        const borderColor = variables.slider.variables.border_color;
        const backgroundColor = variables.slider.variables.color;

        return `
          <div class="progress-bar-container" style="width: ${width}; height: ${height};">
            <div class="progress-bar-card" style="position: relative; width: 100%; height: 100%;">
              <div class="progress-bar" style="
                position: absolute;
                ${isVertical ? 'bottom: 0;' : 'left: 0;'}
                width: ${isVertical ? '100' : progressPercentage}%;
                height: ${isVertical ? progressPercentage : '100'}%;
                border-radius: ${borderRadius};
                border: ${borderWidth} solid ${borderColor};
                background-color: ${backgroundColor};
              "></div>
            </div>
          </div>
        `;
      ]]]

cb-lcars-slider-gauge-old:
  template:
    - cb-lcars-card-base
    - cb-lcars-functions
  entity: '[[[ return variables.__get_random_entity("light"); ]]]'
  triggers_update: '[[[ return variables.entity ]]]'
  variables:
    card:
      width: |
        [[[
          return variables.__getParentDimension(this,'width','px', { height: 400, width: 80 });
        ]]]
      height: |
        [[[
          return variables.__getParentDimension(this,'height','px', {height: 400, width: 80});
        ]]]
    entity: '[[[ return entity.entity_id ]]]'
    entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
    entity_match_slider: false
    meter:
      template:
        - cb-lcars-button-grid
      variables:
        card:
          height: '[[[ return variables.card.height ]]]'
        grid:
          X: 1
          'Y': 10
          gap: 0px
          buttons:
            - label: '100'
            - label: '90'
            - label: '80'
            - label: '70'
            - label: '60'
            - label: '50'
            - label: '40'
            - label: '30'
            - label: '20'
            - label: '10'
        button:
          show_label: true
          entity: '[[[ return variables.entity ]]]'
          triggers_update: '[[[ return variables.entity ]]]'
          template:
            - cb-lcars-button-picard
            - cb-lcars-button-picard-label-ne
          variables:
            card:
              height: |
                [[[
                    return variables.__calculcate_grid_cell_dimension(variables.card.height, 10, 0, "20px")
                ]]]
              width: '[[[ return variables.card.width ]]]'
              border:
                right:
                  size: 0
                left:
                  size: 0
                top:
                  size: 2px
                bottom:
                  size: 0
              color:
                background:
                  inactive: transparent
                  active: transparent
                  default: transparent
            text:
              label:
                font_size: 14px
                padding:
                  right: 0px
                  top: 2px
                color:
                  'off': var(--lcars-ui-primary)
                  'on': var(--lcars-ui-secondary)
    slider:
      variables:
        color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-lightest-blue)" ]]]
        color_alpha: 0.95
        border_color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-blue)" ]]]
        border_alpha: 0.5
        border_width: 2px
        height: '[[[ return variables.card.height ]]]'
        width: 15px
        left_padding: 5px
        step: 1
        mode: brightness
  styles:
    card:
      - width: '[[[ return variables.card.width ]]]'
      - height: '[[[ return variables.card.height ]]]'
      - border-radius: 0 !important
      - background: none
    custom_fields:
      meter:
        - position: absolute
        - left: 0px
        - top: 0px
      slider:
        - position: absolute
        - left: 0px
        - top: 0px
        - z-index: 1
        - width: '[[[ return variables.card.width ]]]'
        - height: '[[[ return variables.card.height ]]]'
  custom_fields:
    meter:
      card:
        type: custom:cblcars-button-card
        template: '[[[ return variables.meter.template ]]]'
        variables: '[[[ return variables.meter.variables ]]]'
    slider:
      card:
        type: custom:cblcars-my-slider-v2
        entity: '[[[ return variables.entity ]]]'
        mode: '[[[ return variables.slider.variables.mode ]]]'
        flipped: false
        inverse: false
        vertical: true
        step: '[[[ return variables.slider.variables.step; ]]]'
        styles:
          card:
            - width: '[[[ return variables.card.width ]]]'
            - height: '[[[ return variables.card.height ]]]'
            - background: none
            - border-radius: 0
          progress:
            - background-color: >-
                [[[ return
                variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                ]]]
            - border: >-
                [[[ return variables.slider.variables.border_width + " solid "
                +
                variables.__hex_to_rgba(variables.slider.variables.border_color,
                variables.slider.variables.border_alpha)  ]]]
            - width: '[[[ return variables.slider.variables.width ]]]'
            - height: '[[[ return variables.slider.variables.height ]]]'
            - left: '[[[ return variables.slider.variables.left_padding ]]]'
          container:
            - border-radius: 0
          track:
            - background: none
          thumb:
            - background: none
cb-lcars-slider-horizontal-gauge-orig:
  entity: '[[[ return variables.__get_random_entity("light"); ]]]'
  template:
    - cb-lcars-functions
    - cb-lcars-slider-horizontal
  triggers_update: '[[[ return variables.entity ]]]'
  variables:
    card:
      width: |
        [[[
          return variables.__getParentDimension(this,'width','px', { height: 45, width: 500 });
        ]]]
      height: |
        [[[
          return variables.__getParentDimension(this,'height','px', {height: 45, width: 500});
        ]]]
    entity: '[[[ return entity.entity_id ]]]'
    entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
    entity_match_slider: false
    slider:
      variables:
        color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-lightest-blue)" ]]]
        color_alpha: 0.95
        border_color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-blue)" ]]]
        border_alpha: 0.5
        border_width: 2px
        height: 10px
        width: '[[[ return variables.card_width ]]]'
        top_padding: 10px
        step: 5
    gauge:
      show_sub_meter: true
      meter:
        template:
          - cb-lcars-button-grid
        variables:
          card:
            height: '[[[ return variables.card.height ]]]'
          grid:
            X: 10
            'Y': 1
            gap: 0px
            buttons:
              - label: '10'
              - label: '20'
              - label: '30'
              - label: '40'
              - label: '50'
              - label: '60'
              - label: '70'
              - label: '80'
              - label: '90'
              - label: '100'
          button:
            show_label: true
            entity: '[[[ return variables.entity ]]]'
            triggers_update: '[[[ return variables.entity ]]]'
            template:
              - cb-lcars-button-picard
              - cb-lcars-button-picard-label-se
            variables:
              card:
                width: |
                  [[[
                      return variables.__calculcate_grid_cell_dimension(variables.card.width, 10, 0, "5px")
                  ]]]
                height: '[[[ return variables.card.height ]]]'
                border:
                  right:
                    size: 2px
                  left:
                    size: 0
                  top:
                    size: 0
                  bottom:
                    size: 0
                color:
                  background:
                    inactive: transparent
                    active: transparent
                    default: transparent
              text:
                label:
                  font_size: 14px
                  padding:
                    right: 3px
                    top: 2px
                    bottom: 0px
                  color:
                    'off': var(--lcars-ui-primary)
                    'on': var(--lcars-ui-secondary)

      sub_meter:
        variables:
          card:
            height: 10px
          grid:
            X: 50
            'Y': 1
            gap: 0px
          gradient_start_color: none
          gradient_end_color: none
          button:
            entity: '[[[ return variables.entity ]]]'
            triggers_update: '[[[ return variables.entity ]]]'
            template:
              - cb-lcars-button-picard
              - cb-lcars-button-picard-label-se
            variables:
              card:
                height: 10px
                min_height: 10px
                width: |
                  [[[
                      return variables.__calculcate_grid_cell_dimension(variables.card.width, 50, 0, "20px")
                  ]]]
                border:
                  right:
                    size: 2px
                  left:
                    size: 0
                  top:
                    size: 2px
                  bottom:
                    size: 0
                color:
                  background:
                    inactive: transparent
                    active: transparent
                    default: transparent
            show_label: false
    meter: '[[[ return variables.gauge.meter ]]]'
  styles:
    custom_fields:
      slider:
        - position: absolute
        - top: 0
        - left: >-
            [[[ return "calc(" + variables.slider.variables.border_width + " * -1)" ]]]
      sub_meter:
        - position: absolute
        - top: 0px
        - left: 0px
        - visibility: >-
            [[[ return variables.gauge.show_sub_meter ? "visible" : "hidden"
            ]]]
  custom_fields:
    slider:
      card:
        flipped: false
        vertical: false
        inverse: false
        styles:
          card:
            - height: '[[[ return variables.card.height ]]]'
            - width: '[[[ return variables.card.width ]]]'
            - background: none
          progress:
            - background-color: >-
                [[[ return
                variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                ]]]
            - border: >-
                [[[ return variables.slider.variables.border_width + " solid "
                +
                variables.__hex_to_rgba(variables.slider.variables.border_color,
                variables.slider.variables.border_alpha)  ]]]
            - border-radius: 2px
            - height: '[[[ return variables.slider.variables.height ]]]'
            - width: '[[[ return variables.slider.variables.width ]]]'
            - top: '[[[ return variables.slider.variables.top_padding ]]]'
    sub_meter:
      card:
        type: custom:cblcars-button-card
        template: cb-lcars-meter-horizontal
        variables: '[[[ return variables.gauge.sub_meter.variables ]]]'

cb-lcars-slider-horizontal-gauge:
  entity: "[[[ return variables.entity ]]]"
  template:
    - cb-lcars-functions
    - cb-lcars-slider-horizontal
  triggers_update: "[[[ return variables.entity ]]]"
  variables:
    card:
      width: |
        [[[
          return variables.__getParentDimension(this,'width','px', { height: 45, width: 500 });
        ]]]
      height: |
        [[[
          return variables.__getParentDimension(this,'height','px', {height: 45, width: 500});
        ]]]
    entity: '[[[ return variables.__get_random_entity("light"); ]]]'
    entity_color: "[[[ return variables.__get_light_css_color(variables.entity) ]]]"
    entity_match_slider: false
    entity_match_gauge: false
    slider:
      variables:
        color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-lightest-blue)" ]]]
        color_alpha: 0.95
        border_color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-blue)" ]]]
        border_alpha: 0.5
        border_width: 2px
        height: 10px
        width: "[[[ return variables.card_width ]]]"
        top_padding: 10px
        step: 5
    gauge:
      show_sub_meter: true
      meter: {}
      color:
        active: '[[[ return variables.entity_match_gauge ? variables.entity_color : "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]'
        inactive: "var(--lcars-card-button-off, var(--picard-darkest-gray))"
        background:
          active: transparent
          inactive: transparent
      sub_meter:
        active: '[[[ return variables.entity_match_gauge ? variables.entity_color : "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]'
        inactive: "var(--lcars-card-button-off, var(--picard-dark-gray))"
        background:
          active: '[[[ return variables.entity_match_gauge ? variables.entity_color : "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]'
          inactive: "var(--lcars-card-button-off, var(--picard-darkest-gray))"
      label:
        active: '[[[ return variables.entity_match_gauge ? variables.entity_color : "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]'
        inactive: "var(--lcars-card-button-off, var(--picard-darkest-gray))"

    meter: "[[[ return variables.gauge.meter ]]]"
  styles:
    custom_fields:
      slider:
        - position: absolute
        - top: 0
        - left: >-
            [[[ return "calc(" + variables.slider.variables.border_width + " * -1)" ]]]
  custom_fields:
    slider:
      card:
        flipped: false
        vertical: false
        inverse: false
        styles:
          card:
            - height: "[[[ return variables.card.height ]]]"
            - width: "[[[ return variables.card.width ]]]"
            - background: none
          progress:
            - background-color: >-
                [[[ return
                variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                ]]]
            - border: >-
                [[[ return variables.slider.variables.border_width + " solid " +
                variables.__hex_to_rgba(variables.slider.variables.border_color,
                variables.slider.variables.border_alpha)  ]]]
            - border-radius: 2px
            - height: "[[[ return variables.slider.variables.height ]]]"
            - width: "[[[ return variables.slider.variables.width ]]]"
            - top: "[[[ return variables.slider.variables.top_padding ]]]"
    gauge: |
      [[[
        const bg_fill_value = variables.gauge.bg_fill_value || 0;  //bg_fill_value of bg fill
        const bg_fill_color = variables.gauge.bg_fill_color || 'transparent';  //bg fill color
        const showSubticks = variables.gauge.show_sub_meter;

        const entityState = entity.state;
        //console.debug('entityState', entityState);

        const meter_bg_color = entityState === 'on' ? variables.gauge.color.background.active : variables.gauge.color.background.inactive;
        const meter_tick_color = entityState === 'on' ? variables.gauge.color.active : variables.gauge.color.inactive;
        const meter_subtick_color = entityState === 'on' ? variables.gauge.sub_meter.active : variables.gauge.sub_meter.inactive;
        const meter_label_color = entityState === 'on' ? variables.gauge.label.active : variables.gauge.label.inactive;

        const width = (parseInt(variables.card.width) - 2)+"px";
        const height = variables.card.height;

        const meterTicks = [];
        for (let i = 0; i <= 100; i += 10) {
          if (i <= 100) {
            meterTicks.push(`<div class="meter-tick" style="left: ${i === 100 ? 100 : i}%"></div>`);
            meterTicks.push(`<span class="meter-tick-label" style="left: ${i === 100 ? 100 : i}%">${i}</span>`);
          }
          if (showSubticks && i < 100) {
            for (let j = 1; j <= 4; j++) {  // Ensure 4 sub-ticks
              meterTicks.push(`<div class="meter-subtick" style="left: ${i + (j / 5) * 10}%"></div>`);
            }
          }
        }

        return `
          <elt class="meter-card">
            <style>
              .meter-card {
                display: block;
                width: ${width};
                height: ${height};
                position: relative;
                grid-template-columns: repeat(10, 1fr);
                grid-template-rows: 1fr;
                gap: 0;
                margin-right: 5px
              }

              .meter-bar {
                grid-column: 1 / span 10;
                grid-row: 1;
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: ${meter_bg_color};
                border-radius: 0px;
              }

              .meter-inner {
                position: absolute;
                top: 0;
                left: 0;
                height: 100%;
                background-color: ${bg_fill_color};
              }

              .meter-ticks {
                grid-column: 1 / span 10;
                grid-row: 1;
                display: grid;
                grid-template-columns: repeat(10, 1fr);
                grid-template-rows: 1fr;
                gap: 0;
              }

              .meter-tick {
                position: absolute;
                width: 2px;
                height: 100%; /* Adjust height to match card height */
                background-color: ${meter_tick_color};
              }

              .meter-subtick {
                position: absolute;
                width: 1px;
                height: 10px; /* Adjust height as needed */
                background-color: ${meter_subtick_color};
              }

              .meter-tick-label {
                position: absolute;
                bottom: 0; /* Align label at the bottom of the tick */
                font-size: 14px; /* Adjust font size */
                text-align: right;
                transform: translateX(-100%); /* Center the label */
                padding-right: 5px;
                color: ${meter_label_color};
              }
            </style>
            <div class="meter-bar">
              <div class="meter-inner" style="width: ${bg_fill_value}%; background-color: ${bg_fill_color};"></div>
            </div>
            <div class="meter-ticks">
              ${meterTicks.join('')}
            </div>
          </elt>
        `;
      ]]]
