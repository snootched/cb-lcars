cb-lcars-symbiont:
  template:
    - cb-lcars-functions
  variables:
    enable_resize_observer: true
    symbiont:
      enabled: false
      imprint_host: false
      text:
        imprint_from: label
      card:
        padding:
          left: 10
          right: 10
          top: 10
          bottom: 0
        border:
          top:
            right_radius: 34
          bottom:
            left_radius: 34
            right_radius: 34
  styles:
    custom_fields:
      symbiont:
        - z-index: 1
        - visibility: |
            [[[
              return (variables.symbiont.enabled) ? 'visible' : 'hidden';
            ]]]
        - display: block
        - position: absolute
        - margin-top: >-
            [[[ return
            variables.__get_num_with_unit(variables.symbiont.card.padding.top) ]]]
        - margin-bottom: >-
            [[[ return
            variables.__get_num_with_unit(variables.symbiont.card.padding.bottom)
            ]]]
        - margin-left: >-
            [[[ return
            variables.__get_num_with_unit(variables.symbiont.card.padding.left)
            ]]]
        - margin-right: >-
            [[[ return
            variables.__get_num_with_unit(variables.symbiont.card.padding.right)
            ]]]
        - align-items: |
            [[[
              return variables.symbiont.align_items || 'center';
            ]]]
        - justify-content: |
            [[[
              return variables.symbiont.justify_content || 'center';
            ]]]
        - height: |
            [[[
              return (variables.symbiont?.card?.height) ? variables.symbiont.card.height :
              "calc( " + variables.__get_num_with_unit(variables.card.height) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.top.size) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                " - " +
                variables.__get_num_with_unit(variables.symbiont.card.padding.top) +
                " - " +
                variables.__get_num_with_unit(variables.symbiont.card.padding.bottom) +
                " )";
            ]]]
        - width: |
            [[[
              return (variables.symbiont?.card?.width) ? variables.symbiont.card.width :
              "calc( " + variables.__get_num_with_unit(variables.card.width) +
              " - " +
              variables.__get_num_with_unit(variables.card.border.left.size) +
              " - " +
              variables.__get_num_with_unit(variables.card.border.right.size) +
              " - " +
              variables.__get_num_with_unit(variables.symbiont.card.padding.left) +
              " - " +
              variables.__get_num_with_unit(variables.symbiont.card.padding.right) +
              " )";
            ]]]
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.symbiont.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.symbiont.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.symbiont.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.symbiont.card.border.bottom.right_radius) + " !important";
            ]]]
  custom_fields:
    symbiont:
      card:
        type: markdown
        content: |
          <ha-alert alert-type="error" title="Symbiont Missing">Please add your symbiont card configuration in order to join with host.  Please refer to the documentation.</ha-alert>
        entity: "[[[ return variables?.entity; ]]]"
        variables: "[[[ return variables ]]]"
        card_mod:
          style: |
            [[[

              // cblcars_matched_state == current state used for style matching
              // variables.symbiont.
              //   enabled == enable child card function
              //   imprint_host == apply host card style to child card (along with symbiont_user_style)
              //   symbiont_user_style == user-supplied style to apply to symbiont card

              //console.log("Symbiont Card Mod cblcars_matched_state: ", this._config.cblcars_matched_state);

              let cblcars_state = this._config.cblcars_matched_state;
              let cardBackgroundColor = variables.card.color.background[cblcars_state]; //|| variables.card.color.background.default;
              let cardColor = variables.card.color[cblcars_state] || variables.card.color.default;


              //let labelColor = variables.text.label.color[cblcars_state] || variables.text.label.color.default;
              //let stateColor = variables.text.state.color[cblcars_state] || variables.text.state.color.default;
              //let nameColor = variables.text.name.color[cblcars_state] || variables.text.name.color.default;

              let textHostStyle = variables.symbiont.text.imprint_from || 'label';

              let textColor = variables.text[textHostStyle].color[cblcars_state] || variables.text[textHostStyle].color.default;
              let fontSize = variables.text[textHostStyle].font_size;
              let fontFamily = variables.text[textHostStyle].font_family;


              //console.log("cardBackgroundColor: ", cardBackgroundColor);
              //console.log("cardColor: ", cardColor);
              //console.log("labelColor: ", labelColor);
              //console.log("stateColor: ", stateColor);
              //console.log("nameColor: ", nameColor);
              //console.log("textColor: ", textColor);
              //console.log("fontSize: ", fontSize);
              //console.log("fontFamily: ", fontFamily);


              let symbiont_style = "";
              let symbiont_user_style = variables.symbiont?.symbiont_user_style || "";
              let base_style = `
                ha-card, hui-entities-card {
                  border-bottom-left-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.bottom.left_radius) } !important;
                  border-bottom-right-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.bottom.right_radius) } !important;
                  border-top-right-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.top.right_radius) } !important;
                  border-top-left-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.top.left_radius) } !important;
                }
              `;

              let host_style = `
                ha-card, hui-entities-card {
                  background: ${variables.symbiont?.card?.color?.background?.default || 'none'} !important;

                  border-bottom-left-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.bottom.left_radius) } !important;
                  border-bottom-right-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.bottom.right_radius) } !important;
                  border-top-right-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.top.right_radius) } !important;
                  border-top-left-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.top.left_radius) } !important;

                  color: ${textColor} !important;
                  font-size: ${fontSize} !important;
                  font-family: ${fontFamily} !important;
                }

                .header, .footer, .name, .state, .label {
                  color: ${textColor} !important;
                  font-size: ${fontSize} !important;
                  font-family: ${fontFamily} !important;
                }
                ha-card > ha-gauge {
                  --primary-text-color: ${textColor} !important;
                }

              `;
              symbiont_style = base_style + (variables.symbiont?.imprint_host ? host_style : '') + symbiont_user_style;
              return symbiont_style;
            ]]]
