cb-lcars-multimeter:
  enable_resize_observer: true
  entity: '[[[ return variables.entity ]]]'
  template:
    - cb-lcars-functions
    - cb-lcars-base
    - cb-lcars-actions-disable
    - cb-lcars-animation-geo-array
  triggers_update: '[[[ return variables.entity ]]]'
  show_icon: false
  show_label: false
  label: '[[[ return variables.label ]]]'
  show_name: false
  show_state: false
  variables:
    _mode: gauge
    _gauge_style: basic
    _vertical: false
    _slider_thickness: 12
    _slider_step: 1
    _slider_mode: brightness
    _min: 0
    _max: 100
    _increment: 10
    _show_unit_of_measurement: false
    _unit_of_measurement: null
    entity: |
      [[[
        return variables.__get_random_entity('light');
      ]]]
    entity_min: |
      [[[
        const entityDomain = entity.entity_id.split('.')[0];
        let minValue = variables._min || 0;
        switch (entityDomain) {
          case 'light':
            switch (variables._slider_mode) {
              case 'brightness':
                minValue = variables._min || 0; //0-100
                break;
              case 'temperature':
                minValue = entity.attributes.min_mireds;  // min_mireds/max_mireds
                break;
              case 'saturation':
                minValue = variables._min || 0; //0-100
                break;
              case 'hue':
                minValue = variables._min || 0;  //0-360
                break;
              default:
                minValue = variables._min || 0;
            }
            break;
          case 'fan':
          case 'switch':
          case 'media_player':
            minValue = variables._min || 0;
            break;
          default:
            minValue = variables._min || 0;
        }
        return parseInt(minValue);
      ]]]
    entity_max: |
      [[[
        const entityDomain = entity.entity_id.split('.')[0];
        let maxValue = variables._max || 100;
        switch (entityDomain) {
          case 'light':
            switch (variables._slider_mode) {
              case 'brightness':
                maxValue = variables._max || 100; //0-100
                break;
              case 'temperature':
                maxValue = entity.attributes.max_mireds;  // min_mireds/max_mireds
                break;
              case 'saturation':
                maxValue = variables._max || 100; //0-100
                break;
              case 'hue':
                maxValue = variables._max || 360;  //0-360
                break;
              default:
                maxValue = variables._max || 100;
            }
            break;
          case 'fan':
          case 'switch':
          case 'media_player':
            maxValue = variables._max || 100;
            break;
          default:
            maxValue = variables._max || 100;
        }
        return parseInt(maxValue);
      ]]]
    entity_unit_of_measurement: |
      [[[
        return variables._unit_of_measurement || entity.attributes.unit_of_measurement || '%';
      ]]]
    entity_color: |
      [[[
        return variables.__get_light_css_color(variables.entity)
      ]]]
    entity_match_slider: false
    entity_match_gauge: false
    entity_match_header: false
    entity_match_slider_start: false
    entity_match_slider_end: false
    animation:
      justify_content: left
      align_items: center
      geo_array:
        animation_axis: cols
        grid:
          num_rows: 1
          num_cols: 3
        shape:
          size: 14
        color:
          base: var(--picard-orange)
          animation_start: var(--picard-blue)
          animation_end: var(--picard-dark-blue)
    card:
      gap: 5
      color:
        background:
          default: transparent
          active: transparent
          inactive: transparent
          zero: transparent
          non_zero: transparent
          hvac_heat: transparent
          hvac_cool: transparent
          unavailable: transparent
      height: '[[[ return this.offsetHeight; ]]]'
      min_height: '[[[ return Math.max(parseInt(this.offsetHeight), 50); ]]]'
      width: '[[[ return this.offsetWidth; ]]]'
      border:
        top:
          size: |
            [[[
              return (variables._vertical && variables._mode == 'gauge' && variables._gauge_style == 'picard') ? 40 : 10
            ]]]
        bottom:
          size: |
            [[[
              return (variables._vertical && variables._mode == 'gauge' && variables._gauge_style == 'picard') ? 50 : 0
            ]]]
        left:
          size: |
            [[[
              if (variables._vertical && variables._mode == 'gauge' && variables._gauge_style == 'picard') {
                return 0;
              }

              if (variables._vertical ) {
                return 30;
              }
              return 120;
            ]]]
        right:
          size: 0
        inner:
          width: 0
    text:
      label:
        font_size: 22px
        align_items: center
        justify: right
        transform: uppercase
        padding:
          top: 0
          left: 0
          right: 5
          bottom: 0
        color:
          default: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--primary-text-color)' : 'black'  ]]]
          active: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-ui-secondary)' : 'black'  ]]]
          inactive: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-ui-tertiary)' : 'black'  ]]]
          zero: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-green)' : 'black'  ]]]
          non_zero: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-blue)' : 'black'  ]]]
          hvac_heat: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-orange)' : 'black'  ]]]
          hvac_cool: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-blue)' : 'black'  ]]]
          unavailable: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-card-button-unavailable)' : 'black'  ]]]
      name:
        font_size: 22px
        align_items: center
        justify: right
        transform: uppercase
        padding:
          top: 0
          left: 0
          right: 5
          bottom: 0
        color:
          default: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--primary-text-color)' : 'black'  ]]]
          active: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-ui-secondary)' : 'black'  ]]]
          inactive: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-ui-tertiary)' : 'black'  ]]]
          zero: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-green)' : 'black'  ]]]
          non_zero: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-blue)' : 'black'  ]]]
          hvac_heat: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-orange)' : 'black'  ]]]
          hvac_cool: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-blue)' : 'black'  ]]]
          unavailable: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-card-button-unavailable)' : 'black'  ]]]
      state:
        font_size: 22px
        align_items: center
        justify: right
        transform: uppercase
        padding:
          top: 0
          left: 0
          right: 5
          bottom: 0
        color:
          default: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--primary-text-color)' : 'black'  ]]]
          active: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-ui-secondary)' : 'black'  ]]]
          inactive: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-ui-tertiary)' : 'black'  ]]]
          zero: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-green)' : 'black'  ]]]
          non_zero: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-blue)' : 'black'  ]]]
          hvac_heat: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-orange)' : 'black'  ]]]
          hvac_cool: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-blue)' : 'black'  ]]]
          unavailable: >-
            [[[ return (variables._mode == 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'var(--lcars-card-button-unavailable)' : 'black'  ]]]
    slider:
      locked: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let locked = true;
          switch (entityDomain) {
            case 'light':
            case 'input_number':
            case 'number':
            case 'media_player':
            case 'cover':
            case 'fan':
            case 'switch':
            case 'input_boolean':
            case 'lock':
              locked = false;
              break;
            default:
              locked = true;
              break;
          }
          return locked;
        ]]]
      height: >-
        [[[ return (variables._vertical) ?
        variables.__get_num_with_unit(variables.card.height) :
        variables.__get_num_with_unit(variables._slider_thickness) ]]]
      width: >-
        [[[ return (variables._vertical) ?
        variables.__get_num_with_unit(variables._slider_thickness) :
        variables.__get_num_with_unit(variables.card.width) ]]]
      color: |
        [[[ return  variables.entity_match_slider ? variables.entity_color :
        "var(--picard-lightest-blue)" ]]]
      color_alpha: 0.95
      border_color: |
        [[[ return  variables.entity_match_slider ? variables.entity_color :
        "var(--picard-blue)" ]]]
      border_alpha: 0.5
      border_width: 0px
      border_radius: 2px
      thumb:
        border:
          size: 3
          color: black
          radius: 50%
        height: 15
        color: white
        enabled: |
          [[[
            return (variables._mode == 'gauge' && variables._gauge_style == 'picard' && variables._vertical == true) ? true : false;
          ]]]
      flipped: '[[[ return (variables._vertical) ? true : false ]]]'
      padding:
        left: 0
        right: 0
        bottom: 0
        top: '[[[ return parseInt(variables.gauge.sub_meter.tick_size) ]]]'
      step: |
        [[[
          return entity.attributes.percentage_step || variables._slider_step;
        ]]]
      mode: '[[[ return variables._slider_mode ]]]'
      min: '[[[ return variables.entity_min ]]]'
      max: '[[[ return variables.entity_max ]]]'
    gauge:
      picard_ratio: 40
      range:
        enabled: true
        inset:
          border:
            color: black
            size: 4
          gap: 5
        border:
          color:
            active: var(--lcars-card-button)
            inactive: var(--lcars-card-button-off)
      connect_ticks: |
        [[[
          return (variables._vertical && variables._mode == 'gauge' && variables._gauge_style == 'picard' ) ? true : false;
        ]]]
      tick_line_thickness: 10
      min: '[[[ return variables.entity_min ]]]'
      max: '[[[ return variables.entity_max ]]]'
      increment: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let increment = variables._increment || 10;
          switch (entityDomain) {
            case 'light':
              switch (variables._slider_mode) {
                case 'temperature':
                  increment = 50;
                  break;
                default:
                  increment = variables._increment || 10;
              }
              break;
          }
          return parseInt(increment);
        ]]]
      color:
        active: >-
          [[[ return variables.entity_match_gauge ? variables.entity_color :
          variables.card.color.active ]]]
        inactive: '[[[ return variables.card.color.inactive ]]]'
        background:
          active: transparent
          inactive: transparent
      sub_meter:
        show_sub_meter: true
        tick_size: 10px
        tick_count: 4
        active: >-
          [[[ return variables.entity_match_gauge ? variables.entity_color :
          variables.card.color.active ]]]
        inactive: '[[[ return variables.card.color.inactive ]]]'
        background:
          active: >-
            [[[ return variables.entity_match_gauge ? variables.entity_color :
            "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
          inactive: var(--lcars-card-button-off, var(--picard-darkest-gray))
      label:
        decimal_places: 0
        font_size: 14
        active: >-
          [[[ return variables.entity_match_gauge ? variables.entity_color :
          variables.card.color.active ]]]
        inactive: '[[[ return variables.card.color.inactive ]]]'
    slider_track:
      padding:
        left: 5
        right: 0
        top: 5
        bottom: 0
      mask_color: rgba(0,0,0,0.8)
      gradient_start_color: >
        [[[ return  variables.entity_match_slider_start ?
        variables.entity_color : "var(--error-color)" ]]]
      gradient_end_color: >
        [[[ return  variables.entity_match_slider_end ? variables.entity_color
        : "var(--success-color)" ]]]
      gap: 5
      bar_border_radius: 0
      bar_thickness: 10
    z_slider: |
      [[[
        function parseColor(color) {
          if (color.startsWith('var(')) {
            return cssVarToRgb(color);
          } else if (color.startsWith('#')) {
            return hexToRgb(color);
          } else if (color.startsWith('rgb')) {
            return rgbStringToRgb(color);
          } else {
            return cssStringToRgb(color);
          }
        }
        function cssVarToRgb(cssVar) {
          const varName = cssVar.slice(4, -1).trim();
          const color = getComputedStyle(document.documentElement).getPropertyValue(varName).trim();
          return parseColor(color);
        }
        function hexToRgb(hex) {
          const bigint = parseInt(hex.slice(1), 16);
          return [bigint >> 16 & 255, bigint >> 8 & 255, bigint & 255];
        }
        function rgbStringToRgb(rgbString) {
          const rgba = rgbString.match(/\d+/g).map(Number);
          return rgba.length === 4 ? rgba : rgba.slice(0, 3); // Get only the first three values (R, G, B) or return RGBA
        }
        function cssStringToRgb(color) {
          if (color === 'transparent') {
            return [0, 0, 0, 0]; // Return RGBA value for transparent
          }
          const ctx = document.createElement('canvas').getContext('2d');
          ctx.fillStyle = color;
          document.body.appendChild(ctx.canvas); // Append to body to apply style
          const computedColor = getComputedStyle(ctx.canvas).fillStyle;
          document.body.removeChild(ctx.canvas); // Remove canvas after use
          return rgbStringToRgb(computedColor);
        }
        try {
          const width = parseInt(variables.slider_track.width) || parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size) - parseInt(variables.slider_track.padding.left) - parseInt(variables.slider_track.padding.right);
          const height = parseInt(variables.slider_track.height) || parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size) - parseInt(variables.slider_track.padding.top) - parseInt(variables.slider_track.padding.bottom);
          let barWidth, barHeight;
          // Check for invalid dimensions (affects calcuations during instantiation generating invalid dimensions in the svg)
          if (width <= 0 || height <= 0) {
            //console.error(`Invalid dimensions: width=${width}, height=${height}`);
            // Return a placeholder or empty SVG
            return `<svg width="100" height="100"><text x="10" y="50" fill="red">Invalid SVG</text></svg>`;
          }
          // Defaults and overrides
          let barSpacing = variables.slider_track.gap ? parseInt(variables.slider_track.gap) : 5;
          let barOrientation = variables._vertical ? "vertical" : "horizontal";
          let cornerRadius = variables.slider_track.bar_border_radius ? parseInt(variables.slider_track.bar_border_radius) : 0;
          // Set defaults based on orientation
          if (barOrientation === 'horizontal') {
            barHeight = height; // Default to height
            barWidth = variables.slider_track.bar_thickness ? parseInt(variables.slider_track.bar_thickness) : 10; // Default to 10px, but user may change
          } else {
            barWidth = width; // Default to width
            barHeight = variables.slider_track.bar_thickness ? parseInt(variables.slider_track.bar_thickness) : 10; // Default to 10px, but user may change
          }
          // Dynamic variable assignment
          let startColor, endColor;
          if (variables._vertical) {
            startColor = variables.slider_track.gradient_end_color.trim();
            endColor = variables.slider_track.gradient_start_color.trim();
          } else {
            startColor = variables.slider_track.gradient_start_color.trim();
            endColor = variables.slider_track.gradient_end_color.trim();
          }
          const startRgb = parseColor(startColor);
          const endRgb = parseColor(endColor);
          function interpolateColor(color1, color2, factor) {
            const result = color1.map((c, i) => Math.round(c + factor * (color2[i] - c)));
            return `rgb(${result.join(',')})`;
          }
          // Autocalculate numBars
          let numBars = barOrientation === 'horizontal' ? Math.floor((width + barSpacing) / (barWidth + barSpacing)) : Math.floor((height + barSpacing) / (barHeight + barSpacing));
          //numBars = numBars+1;
          const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
          svg.setAttribute('width', '100%');
          svg.setAttribute('height', '100%');
          svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
          const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
          svg.appendChild(g);
          let x = 0;
          let y = 0;
          for (let i = 0; i < numBars; i++) {
            const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
            rect.setAttribute('x', barOrientation === 'horizontal' ? x : 0);
            rect.setAttribute('y', barOrientation === 'horizontal' ? 0 : y);
            rect.setAttribute('width', barOrientation === 'horizontal' ? barWidth : barWidth);
            rect.setAttribute('height', barOrientation === 'horizontal' ? barHeight : barHeight);
            rect.setAttribute('rx', cornerRadius);
            rect.setAttribute('ry', cornerRadius);
            const factor = i / (numBars - 1);
            const color = interpolateColor(startRgb, endRgb, factor);
            rect.setAttribute('fill', color);
            g.appendChild(rect);
            x += barOrientation === 'horizontal' ? barWidth + barSpacing : 0;
            y += barOrientation === 'horizontal' ? 0 : barHeight + barSpacing;
          }
          const svgString = new XMLSerializer().serializeToString(svg);
          return svgString;
        } catch (error) {
          return '';
        }
      ]]]
    z_gauge: |
      [[[
        let minVal = variables.gauge.min;
        let maxVal = variables.gauge.max;
        let increment = variables.gauge.increment;


        let width = parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size);
        let height = parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size);

        if (variables._vertical && variables._gauge_style == 'picard') {
            let percent = (variables.gauge.picard_ratio !== undefined && !isNaN(variables.gauge.picard_ratio)) ? variables.guage.picard_ratio / 100 : 40 / 100;
          width = width * percent;
          height = parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size) - (2 * parseInt(variables.card.gap));
        }

        const orientation = variables._vertical ? 'vertical' : 'horizontal';
        const showSubticks = variables.gauge.sub_meter.show_sub_meter;
        const entityState = entity.state;
        const meter_bg_color = (entityState === 'on' || (entityState !== 'off' && Number(entityState) > 0)) ? variables.gauge.color.background.active : variables.gauge.color.background.inactive;
        const meter_tick_color = (entityState === 'on' || (entityState !== 'off' && Number(entityState) > 0)) ? variables.gauge.color.active : variables.gauge.color.inactive;
        const meter_subtick_color = (entityState === 'on' || (entityState !== 'off' && Number(entityState) > 0)) ? variables.gauge.sub_meter.active : variables.gauge.sub_meter.inactive;
        const meter_label_color = (entityState === 'on' || (entityState !== 'off' && Number(entityState) > 0)) ? variables.gauge.label.active : variables.gauge.label.inactive;
        const meter_label_font_size = variables.__get_num_with_unit(variables.gauge.label.font_size);
        const meter_subtick_size = parseInt(variables.gauge.sub_meter.tick_size) || 10;
        const numSubticks = variables.gauge.sub_meter.tick_count;
        const numSegments = (maxVal - minVal) / increment; // Calculate the number of segments
        const subTickIncrement = 100 / numSegments / (numSubticks + 1);
        const decimal_places = variables.gauge.label.decimal_places || 0;
        const connect_ticks = variables.gauge.connect_ticks || false;
        const tick_line_thickness = variables.gauge.tick_line_thickness || 1;

        const meterTicks = [];
        for (let i = minVal; i <= maxVal; i += increment) {
          const percent = orientation === 'vertical' ? 100 - ((i - minVal) / (maxVal - minVal) * 100) : (i - minVal) / (maxVal - minVal) * 100;
          const position = percent + '%';
          const labelOffset = orientation === 'vertical' ? 'translate(-5, 0)' : 'translate(0, -5)';
          meterTicks.push(`<line x1="${orientation === 'vertical' ? (connect_ticks ? tick_line_thickness : '0') : position}" y1="${orientation === 'vertical' ? position : (connect_ticks ? tick_line_thickness : '0')}" x2="${orientation === 'vertical' ? '100%' : position}" y2="${orientation === 'vertical' ? position : '100%'}" stroke="${meter_tick_color}" stroke-width="2"/>`);
          meterTicks.push(`<text x="${orientation === 'vertical' ? '100%' : position}" y="${orientation === 'vertical' ? position : '100%'}" font-size="${meter_label_font_size}" fill="${meter_label_color}" text-anchor="end" transform="${labelOffset}" dx="${orientation === 'vertical' ? '3' : '-3'}" dy="${orientation === 'vertical' ? '18' : '3'}">${i.toFixed(decimal_places)}${variables._show_unit_of_measurement ? variables.entity_unit_of_measurement : ''}</text>`);
          if (showSubticks && i < maxVal) {
            for (let j = 1; j <= numSubticks; j++) {
              const subTickPercent = orientation === 'vertical' ? percent - (j * subTickIncrement) : percent + (j * subTickIncrement);
              const subTickPosition = subTickPercent + '%';
              meterTicks.push(`<line x1="${orientation === 'vertical' ? (connect_ticks ? tick_line_thickness : '0') : subTickPosition}" y1="${orientation === 'vertical' ? subTickPosition : (connect_ticks ? tick_line_thickness : '0')}" x2="${orientation === 'vertical' ? meter_subtick_size + (connect_ticks ? tick_line_thickness : 0) : subTickPosition}" y2="${orientation === 'vertical' ? subTickPosition : meter_subtick_size + (connect_ticks ? tick_line_thickness : 0)}" stroke="${meter_subtick_color}" stroke-width="1"/>`);
            }
          }
        }

        const ranges = variables.gauge.ranges || [];
        let rangeBackgrounds = '';


        //if (variables.gauge.range.enabled && variables._gauge_style == 'basic') {
        if (variables.gauge.range.enabled && (!variables._vertical || (variables._vertical && variables._gauge_style == 'basic'))) {            ranges.forEach(range => {
            const fromPercent = ((range.from - minVal) / (maxVal - minVal)) * 100;
            const toPercent = ((range.to - minVal) / (maxVal - minVal)) * 100;
            const rangeWidth = toPercent - fromPercent;
            rangeBackgrounds += `
              <rect x="${orientation === 'vertical' ? '0' : fromPercent + '%'}" y="${orientation === 'vertical' ? 100 - toPercent + '%' : '0'}"
                    width="${orientation === 'vertical' ? '100%' : rangeWidth + '%'}" height="${orientation === 'vertical' ? rangeWidth + '%' : '100%'}"
                    fill="${range.color}" />
            `;
          });
        }
        const tickLine = connect_ticks ? (orientation === 'vertical' ?
          `<line x1="${tick_line_thickness / 2}" y1="0" x2="${tick_line_thickness / 2}" y2="100%" stroke="${meter_tick_color}" stroke-width="${tick_line_thickness}" />` :
          `<line x1="0" y1="${tick_line_thickness / 2}" x2="100%" y2="${tick_line_thickness / 2}" stroke="${meter_tick_color}" stroke-width="${tick_line_thickness}" />`) : '';

        return `
          <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
            <rect x="0" y="0" width="100%" height="100%" fill="${meter_bg_color}"/>
            ${rangeBackgrounds}
            ${tickLine}
            ${meterTicks.join('')}
          </svg>
        `;
      ]]]
  state:
    - id: state_on
      operator: template
      value: |
        [[[
          return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  let border = variables.__get_num_with_unit(parseInt(variables.card.border.bottom.size))
                  return border + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
    - id: state_off
      operator: template
      value: |
        [[[
          return entity !== undefined && ['off', 'closed', 'unlocked'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
    - id: state_unavailable
      operator: template
      value: |
        [[[
          return entity !== undefined && ['unknown', 'unavailable'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
    - id: state_heat
      value: heat
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
    - id: state_cool
      value: cool
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
    - id: state_zero
      operator: template
      value: |
        [[[
          if (entity === undefined) return false;
          return entity !== undefined && Number(states[entity.entity_id].state) === 0;
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
    - id: state_nonzero
      operator: template
      value: |
        [[[
          if (entity === undefined) return false;
          return entity !== undefined && Number(states[entity.entity_id].state) !== 0;
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
    - id: state_default
      operator: default
      value: |
        [[[
          return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
  styles:
    card:
      - background: none
      - border-radius: 0 !important
      - border: none
      - height: 100%
      - max-width: none
    label:
      - z-index: 2
      - visibility: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard'){
              return 'visible';
            }
          ]]]
      - background: |
          [[[
            return (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') ? 'black' : 'none';
          ]]]
      - background-clip: padding-box
      - height: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard'){
              return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " + 1px )"
            } else {
              return '100%'
            }
          ]]]
      - width: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"
            } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
            }
          ]]]
      - border-left: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
            }
          ]]]
      - border-top: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
            }
          ]]]
      - right: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return 0;
            }
          ]]]
      - left: null
    name:
      - z-index: 2
      - background: |
          [[[
            return (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') ? 'black' : 'none';
          ]]]
      - background-clip: padding-box
      - height: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard'){
              return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2) + " + variables.__get_num_with_unit(variables.card.gap) +")"
            } else {
              return '100%'
            }
          ]]]
      - width: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"
            } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
            }
          ]]]
      - border-left: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
            }
          ]]]
      - border-bottom: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2.25) solid transparent";
            }
          ]]]
      - right: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return 0;
            }
          ]]]
      - bottom: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return 0;
            }
          ]]]
      - left: null
      - top: null
    state:
      - z-index: 2
      - background: |
          [[[
            return (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') ? 'black' : 'none';
          ]]]
      - background-clip: padding-box
      - height: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard'){
              return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2) + " + variables.__get_num_with_unit(variables.card.gap) +")"
            } else {
              return '100%'
            }
          ]]]
      - width: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return "calc(50% - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + "* 2.5) - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"
            } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
            }
          ]]]
      - border-right: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2) solid transparent";
            }
          ]]]
      - border-bottom: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2) solid transparent";
            }
          ]]]
      - left: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return 0;
            }
          ]]]
      - bottom: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return 0;
            }
          ]]]
      - right: null
      - top: null
      - justify-content: |
          [[[
            if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
              return 'left';
            }
          ]]]
    custom_fields:
      ne_mask:
        - z-index: 1
        - top: 0
        - right: 0
        - visibility: |
            [[[
              return (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') ? "visible" : "hidden";
            ]]]
        - position: absolute
        - display: flex
        - justify: left
        - background: |
            [[[
              return (variables._vertical && variables._gauge_style == 'picard') ? 'black' : 'none';
            ]]]
        - background-clip: padding-box
        - height: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard'){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " + 1px )"
              } else {
                return '100%'
              }
            ]]]
        - width: |-
            [[[

              if (variables._vertical && variables._gauge_style == 'picard') {
                return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + ")"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-left: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - border-top: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - right: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return 0;
              }
            ]]]
        - left: null
      sw_mask:
        - z-index: 1
        - visibility: |
            [[[
              return (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') ? "visible" : "hidden";
            ]]]
        - position: absolute
        - display: flex
        - justify: left
        - background: black
        - background-clip: padding-box
        - height: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard'){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2) + " + variables.__get_num_with_unit(variables.card.gap) +")"
              } else {
                return '100%'
              }
            ]]]
        - width: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                  return "calc(50% - " + variables.__get_num_with_unit(variables.card.gap) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + "* 2) )"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-right: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2) solid transparent";
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2) solid transparent";
              }
            ]]]
        - left: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return 0;
              }
            ]]]
        - bottom: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return 0;
              }
            ]]]
        - right: null
        - top: null
        - justify-content: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return 'left';
              }
            ]]]
      se_mask:
        - z-index: 1
        - visibility: |
            [[[
              return (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') ? "visible" : "hidden";
            ]]]
        - position: absolute
        - display: flex
        - justify: left
        - background: |
            [[[
              return (variables._vertical && variables._gauge_style == 'picard') ? 'black' : 'none';
            ]]]
        - background-clip: padding-box
        - height: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard'){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2) + " + variables.__get_num_with_unit(variables.card.gap) +")"
              } else {
                return '100%'
              }
            ]]]
        - width: |-
            [[[

              if (variables._vertical && variables._gauge_style == 'picard') {
                return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + ")"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-left: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2.25) solid transparent";
              }
            ]]]
        - right: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return 0;
              }
            ]]]
        - bottom: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return 0;
              }
            ]]]
        - left: null
      animation:
        - visibility: |
            [[[
              return (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') ? "visible" : "hidden";
            ]]]
        - z-index: 1
        - background: |
            [[[
              return (variables._vertical && variables._gauge_style == 'picard') ? 'black' : 'none';
            ]]]
        - background-clip: content-box
        - height: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard'){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " + 1px )"
              } else {
                return '100%'
              }
            ]]]
        - width: |-
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return "calc(50% - " + variables.__get_num_with_unit(variables.card.gap) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + "* 2) )"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-right: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * 2) solid transparent";
              }
            ]]]
        - border-top: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - left: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return 0;
              }
            ]]]
        - right: null
        - position: absolute
        - top: 0
        - background: black
        - display: flex
        - align-items: |
            [[[
              return variables.animation.align_items || 'center';
            ]]]
        - justify-content: |
            [[[
              return variables.animation.justify_content || 'center';
            ]]]
        - filter: |
            [[[
              if (variables.animation?.filter?.advanced) {
                return variables.animation.filter.advanced;
              }

              const filter = variables.animation.filter || {};
              const filters = [];

              if (filter.blur !== undefined) filters.push(`blur(${filter.blur}px)`);
              if (filter.brightness !== undefined) filters.push(`brightness(${filter.brightness}%)`);
              if (filter.saturate !== undefined) filters.push(`saturate(${filter.saturate}%)`);
              if (filter.invert !== undefined) filters.push(`invert(${filter.invert}%)`);
              if (filter.sepia !== undefined) filters.push(`sepia(${filter.sepia}%)`);
              if (filter.grayscale !== undefined) filters.push(`grayscale(${filter.grayscale}%)`);
              if (filter.hue_rotate !== undefined) filters.push(`hue-rotate(${filter.hue_rotate}deg)`);
              if (filter.contrast !== undefined) filters.push(`contrast(${filter.contrast}%)`);
              if (filter.opacity !== undefined) filters.push(`opacity(${filter.opacity}%)`);

              return filters.length > 0 ? filters.join(' ') : 'none';
            ]]]
      gauge:
        - background: none
        - text-align: |
            [[[
              return (variables._vertical && variables._gauge_style == 'picard') ? 'left' : '';
            ]]]
        - visibility: >-
            [[[ return (variables._mode === 'gauge') ? 'visible' : 'hidden'
            ]]]
        - position: absolute
        - top: 0px
        - left: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return '';
              } else {
              return 0;
              }
            ]]]
        - right: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return 0;
              }
            ]]]
        - width: >-
            [[[

              if (variables._vertical && variables._gauge_style == 'picard') {
                return '50%'
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
            variables.__get_num_with_unit(variables.card.border.left.size)  +
            " - " +
            variables.__get_num_with_unit(variables.card.border.right.size) +
            " )"
              }
            ]]]
        - height: |
            [[[
              if(variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                " - (2 * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                ")"
              }
            ]]]
        - padding-bottom: |
            [[[
              return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - padding-top: |
            [[[
              return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-bottom: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
      slider_track_control:
        - visibility: >-
            [[[ return ((variables._mode === 'slider') &&
            !(variables.slider.locked)) ? 'visible' : 'hidden' ]]]
        - position: absolute
        - top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size);
            ]]]
        - left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size);
            ]]]
        - width: >-
            [[[ return "calc(" +
            variables.__get_num_with_unit(variables.card.width) + " - " +
            variables.__get_num_with_unit(variables.card.border.left.size) + "
            - " +
            variables.__get_num_with_unit(variables.card.border.right.size)  +
            ")" ]]]
        - height: >-
            [[[ return "calc(" +
            variables.__get_num_with_unit(variables.card.height) + " - " +
            variables.__get_num_with_unit(variables.card.border.top.size) + "
            - " +
            variables.__get_num_with_unit(variables.card.border.bottom.size) +
            ")" ]]]
      slider_bg:
        - visibility: >-
            [[[ return (variables._mode === 'slider') ? 'visible' : 'hidden'
            ]]]
        - position: absolute
        - top: 0px
        - width: >-
            [[[ return "calc(" +
            variables.__get_num_with_unit(variables.card.width) +  " - " +
            variables.__get_num_with_unit(variables.card.border.left.size) + "
            - " +
            variables.__get_num_with_unit(variables.card.border.right.size) +
            " - " +
            variables.__get_num_with_unit(variables.slider_track.padding.left)
            + " - " +
            variables.__get_num_with_unit(variables.slider_track.padding.right)
            + ")" ]]]
        - height: >-
            [[[ return "calc(" +
            variables.__get_num_with_unit(variables.card.height) +  " - " +
            variables.__get_num_with_unit(variables.card.border.top.size) +  "
            - " +
            variables.__get_num_with_unit(variables.card.border.bottom.size) +
            " - " +
            variables.__get_num_with_unit(variables.slider_track.padding.top)
            + " - " +
            variables.__get_num_with_unit(variables.slider_track.padding.bottom)
            + ")" ]]]
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-bottom: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
        - background: '[[[ return variables.z_slider ]]]'
        - padding-left: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.left) + ")";
            ]]]
        - padding-top: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.top) + ")";
            ]]]
        - padding-right: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.right) + ")";
            ]]]
        - padding-bottom: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.bottom) + ")";
            ]]]
      gauge_control:
        - background: none
        - visibility: >-
            [[[ return ((variables._mode === 'gauge') &&
            !(variables.slider.locked)) ? 'visible' : 'hidden' ]]]
        - position: absolute
        - top: |
            [[[
                if (variables._vertical && variables._gauge_style == 'picard') {
                  return 0;
                }
                if (variables._vertical) {
                  return variables.__get_num_with_unit(variables.card.border.top.size);
                } else {
                  return "calc(" + variables.__get_num_with_unit(variables.slider.padding.top) + " + " + variables.__get_num_with_unit(variables.card.border.top.size) + ")"
                }
            ]]]
        - left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size);
            ]]]
        - width: |-
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                  return "calc( 50% - " + variables.__get_num_with_unit(variables.card.gap) + ")";
                }
              return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " + variables.__get_num_with_unit(variables.card.border.left.size)  + " - " + variables.__get_num_with_unit(variables.card.border.right.size) + ")";
            ]]]
        - height: |
            [[[
              let gap_count = (variables._gauge_style == 'picard') ? 2 : 0;
              if(variables._mode == 'gauge' && variables._vertical) {
                return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                " - (" + gap_count + " * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                ")"
              }
            ]]]
        - padding-bottom: |
            [[[
              return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - padding-top: |
            [[[
              return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - border-top: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-left: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-right: |
            [[[
              if (variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
      locked_bar:
        - visibility: '[[[ return (variables.slider.locked) ? ''visible'' : ''hidden'' ]]]'
        - overflow: visible
        - position: absolute
        - left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size);
            ]]]
        - top: |
            [[[
              if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                return 0;
              }
              return variables.__get_num_with_unit(variables.card.border.top.size);
            ]]]
        - width: |-
            [[[
              if (variables._mode === 'slider') {
                return "calc(" +
                  variables.__get_num_with_unit(variables.card.width) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.left.size) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.right.size) +
                  " + " +
                  variables.__get_num_with_unit(variables.slider_track.padding.left) +
                  " + " +
                  variables.__get_num_with_unit(variables.slider_track.padding.right) +
                  ")";
              }

              if (variables._vertical && variables._gauge_style == 'picard') {
                  return "calc( 50% - " + variables.__get_num_with_unit(variables.card.gap) + ")";
                }
              return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " + variables.__get_num_with_unit(variables.card.border.left.size)  + " - " + variables.__get_num_with_unit(variables.card.border.right.size) + ")";
            ]]]
        - height: |-
            [[[
              if (variables._mode === 'slider') {
                return "calc(" +
                  variables.__get_num_with_unit(variables.card.height) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size) +
                  " + " +
                  variables.__get_num_with_unit(variables.slider_track.padding.top) +
                  " + " +
                  variables.__get_num_with_unit(variables.slider_track.padding.bottom) +
                  ")";
              }

              let gap_count = (variables._gauge_style == 'picard') ? 2 : 0;
              if(variables._mode == 'gauge' && variables._vertical) {
                return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                " - (" + gap_count + " * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                ")"
              }

              return "calc(" +
                variables.__get_num_with_unit(variables.card.height) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.top.size) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                ")";
            ]]]
        - padding-bottom: |
            [[[
              return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - padding-top: |
            [[[
              return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - border-top: |
            [[[
              if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-left: |
            [[[
              if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-right: |
            [[[
              if (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard') {
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
      ranges_alt:
        - background: none
        - text-align: |
            [[[
              return (variables._vertical && variables._gauge_style == 'picard') ? 'left' : '';
            ]]]
        - visibility: >-
            [[[ return (variables._mode === 'gauge' && variables._vertical &&
            variables._gauge_style == 'picard') ? 'visible' : 'hidden' ]]]
        - position: absolute
        - top: 0
        - left: 0
        - display: flex
        - justify-content: flex-end
        - width: >-
            [[[

              if (variables._vertical && variables._gauge_style == 'picard') {
                return "calc( 50% - " + variables.__get_num_with_unit(variables.card.gap) + ")"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
            variables.__get_num_with_unit(variables.card.border.left.size)  +
            " - " +
            variables.__get_num_with_unit(variables.card.border.right.size) +
            " )"
              }
            ]]]
        - height: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
              variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
              variables.__get_num_with_unit(variables.card.border.bottom.size) +
              " - (2 * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
              ")"
            ]]]
        - padding-bottom: |
            [[[
              return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - padding-top: |
            [[[
              return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid transparent" ;
            ]]]
        - border-bottom: |
            [[[
              let border = parseInt(variables.card.border.bottom.size); //+ parseInt(variables.card.gap);
              return  variables.__get_num_with_unit(border) + " solid transparent";
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid transparent";
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid transparent";
            ]]]
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
  custom_fields:
    ranges_alt: |
      [[[
        let width = parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size);
        let height = parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size) - (2 * parseInt(variables.card.gap));

        if (variables._vertical && variables._gauge_style == 'picard') {
          width = variables.gauge.tick_line_thickness*2
        }

        const entityState = entity.state;
        const outerRectColor = (entityState === 'on' || (entityState !== 'off' && Number(entityState) > 0)) ? variables.gauge.range.border.color.active : variables.gauge.range.border.color.inactive;

        // inset color and thickness - this is the stroke on range rects
        const borderColor = variables.gauge.range.inset.border.color || 'black';
        const borderThickness = parseInt(variables.gauge.range.inset.border.size);
        let borderGap = parseInt(variables.card.border.gap) || 5;
        let insetGap = parseInt(variables.gauge.range.inset.gap) || parseInt(variables.card.border.gap);

        // gap between ranges (set to 0 when using svg stroke)
        const rangeGap = 0;

        // svg offsets to start drawing
        const startX = 0;
        const startY = 0;

        // Setup ranges - if enabled
        const ranges = (variables.gauge.range.enabled) ? (variables.gauge.ranges || []) : [];
        let rects = '';

        // Calculate Available Range Area Height (remove rangeGap if used, and borderGap used as top/bottom padding)
        const availableRangeHeight = height - ((ranges.length - 1) * rangeGap) - (2 * borderGap);

        // svg rect for background
        rects += `
            <rect x="${startX}" y="${startY}" width="${width}" height="${height}" fill="${outerRectColor}" /> &lt;-- GRAY BACKGROUND -->
        `;

        // Iterate through ranges - generate rects at proper positions in available range height
        for (let i = 0; i < ranges.length; i++) {
          const range = ranges[i];
          const fromPercent = ((range.from - variables.gauge.min) / (variables.gauge.max - variables.gauge.min)) * 100;
          const toPercent = ((range.to - variables.gauge.min) / (variables.gauge.max - variables.gauge.min)) * 100;
          const rangePercentHeight = toPercent - fromPercent;

          const barHeight = (rangePercentHeight / 100) * availableRangeHeight; // SIMPLE HEIGHT CALC

          // set range X position and width
          const rangeX = startX; // SIMPLE X
          const rangeWidth = width - insetGap; // SIMPLE WIDTH - Reduced by borderGap

          const rangeY_bottom = startY + height - borderGap - ((fromPercent / 100) * availableRangeHeight); // Bottom edge - ABSOLUTE Y CALC - FROM PERCENT
          const rangeY = rangeY_bottom - barHeight; // Top edge - ABSOLUTE Y CALC

          rects += `
            <rect x="${rangeX}" y="${rangeY}" width="${rangeWidth}" height="${barHeight}" fill="${range.color}" stroke="${borderColor}" stroke-width="${borderThickness}" />
          `;
        }

        return `
          <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
            ${rects}
          </svg>
        `;
      ]]]
    se_mask: |
      [[[
        return "";
      ]]]
    ne_mask: |
      [[[
        return "";
      ]]]
    sw_mask: |
      [[[
        return "";
      ]]]
    gauge: |
      [[[
        return variables.z_gauge;
      ]]]
    slider_bg: |
      [[[
        return variables.z_slider;
      ]]]
    locked_bar: |
      [[[
        const entityState = entity.state;
        const entityType = entity.entity_id.split('.')[0]; // Extract entity type
        let progress = 0;
        switch(entityType) {
          case 'light':
            progress = ((parseFloat(entity.attributes.brightness) / 256) * 100);
            break;
          case 'fan':
            progress = (parseFloat(entity.attributes.percentage));
            break;
          default:
            progress = (parseFloat(entityState));
            break;
        }
        const progressPercentage = ((progress / variables.slider.max) * 100);
        const remainingPercentage = 100 - progressPercentage;
        const isVertical = variables._vertical;
        const borderRadius = variables.slider.border_radius;
        const borderWidth = variables.slider.border_width;
        const borderColor = variables.slider.border_color;
        const maskColor = variables.slider_track.mask_color;
        const calcWidth = `calc(${variables.__get_num_with_unit(variables.card.width)} - ${variables.__get_num_with_unit(variables.card.border.left.size)} - ${variables.__get_num_with_unit(variables.card.border.right.size)} )`;
        const calcHeight = `calc(${variables.__get_num_with_unit(variables.card.height)} - ${variables.__get_num_with_unit(variables.card.border.top.size)} - ${variables.__get_num_with_unit(variables.card.border.bottom.size)} )`;
        const sliderPaddingTop = variables.__get_num_with_unit(variables.slider.padding.top);
        const sliderPaddingLeft = variables.__get_num_with_unit(variables.slider.padding.left);
        const sliderHeight = variables.__get_num_with_unit(variables._slider_thickness);

        // match slider in picard mode
        //return (variables._vertical && variables._gauge_style == 'picard') ? "35px" : "";

        // thumb
        const thumbEnabled = (variables.slider.locked && variables._vertical && variables.slider.thumb.enabled) || false;
        const thumbHeight = variables.slider.thumb.height || '12px';
        const thumbColor = variables.slider.thumb.color || 'white';
        const thumbBorderColor = variables.slider.thumb.border.color || 'black';
        const thumbBorderSize = parseInt(variables.slider.thumb.border.size) || '3px';
        const thumbBorderRadius = parseInt(variables.slider.thumb.border.radius) || '50%';

        if (variables._mode === 'gauge') {
          const leftStyle = (variables._gauge_style == 'picard' && isVertical) ? 'unset' : (isVertical ? sliderPaddingTop : sliderPaddingLeft);
          const rightStyle = (variables._gauge_style == 'picard' && isVertical) ? '35px' : 'unset';

          let thumbBorderStyle = variables.__get_num_with_unit(thumbBorderSize) + " solid " + thumbBorderColor;

          let thumbLeftStyle =  'calc(-150% - ' + variables.__get_num_with_unit(thumbBorderSize) + ')';

          return `
            <div class="progress-bar" style="
              position: absolute;
              ${isVertical ? 'bottom: 0;' : 'left: 0;'}
              top: ${isVertical ? 'unset' : sliderPaddingTop};
              left: ${leftStyle};
              right: ${rightStyle};
              width: ${isVertical ? sliderHeight : progressPercentage + '%'};
              height: ${isVertical ? progressPercentage + '%' : sliderHeight};
              border-radius: ${borderRadius};
              border: ${borderWidth} solid ${borderColor};
              background-color: ${variables.slider.color};
            ">

              <div class="progress-bar-custom-thumb" style="
                height: ${thumbHeight}px;
                background: ${thumbColor};
                position: absolute;
                width: 400%;
                visibility: ${thumbEnabled ? 'visible' : 'hidden'};
                border: ${thumbBorderStyle};
                left: ${isVertical ? thumbLeftStyle : 'auto'};
                border-radius: ${thumbBorderRadius}%;
                z-index: 2;
                top: -${thumbHeight / 2}px;
              "></div>
            </div>
          `;
        } else if (variables._mode === 'slider') {
          return `
            <div class="slider-background" style="
              position: absolute;
              width: ${calcWidth};
              height: ${calcHeight};
              border-radius: unset !important;
            ">
              <div class="slider-mask" style="
                position: absolute;
                ${isVertical ? 'top: 0;' : 'right: 0;'}
                width: ${isVertical ? '100%' : remainingPercentage + '%'};
                height: ${isVertical ? remainingPercentage + '%' : '100%'};
                border-radius: unset !important;
                background-color: ${maskColor};
              "></div>
            </div>
          `;
        }
      ]]]
    gauge_control:
      card:
        type: custom:my-slider-v2
        entity: '[[[ return variables.entity ]]]'
        mode: '[[[ return variables.slider.mode ]]]'
        vertical: '[[[ return variables._vertical ]]]'
        flipped: false
        inverse: false
        step: '[[[ return variables.slider.step; ]]]'
        min: |
          [[[
          //  if (variables.slider.mode === 'temperature') {
          //    return entity.attributes.min_mired
          //  } else {
              return variables.slider.min;
          //  }
          ]]]
        max: |
          [[[
          //  if (variables.slider.mode === 'temperature') {
          //    return entity.attributes.max_mired
          //  } else {
              return variables.slider.max;
          //  }
          ]]]
        styles:
          card:
            - width: |
                [[[
                    if (variables._vertical && variables._gauge_style == 'picard') {
                        return "100%";
                      }
                    return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " + variables.__get_num_with_unit(variables.card.border.left.size)  + " - " + variables.__get_num_with_unit(variables.card.border.right.size) + ")";
                ]]]
            - background: none
            - border-radius: 0
          progress:
            - background-color: >-
                [[[ return
                variables.__hex_to_rgba(variables.slider.color,variables.slider.color_alpha)
                ]]]
            - border: >-
                [[[ return variables.slider.border_width + " solid " +
                variables.__hex_to_rgba(variables.slider.border_color,
                variables.slider.border_alpha)  ]]]
            - border-radius: '[[[ return variables.slider.border_radius ]]]'
            - height: '[[[ return variables.slider.height ]]]'
            - width: '[[[ return variables.slider.width ]]]'
            - left: |-
                [[[
                  return (variables._vertical && variables._gauge_style == 'picard') ? "" : variables.__get_num_with_unit(variables.slider.padding.left);
                ]]]
          container:
            - border-radius: 0
            - overflow: visible
          track:
            - background: none
            - width: >-
                [[[ return variables._vertical ? variables.slider.width :
                '']]]
            - left: |
                [[[
                  if (variables._vertical && variables._gauge_style != 'picard') {
                    return "calc(" + variables.__get_num_with_unit(variables.gauge.sub_meter.tick_size) + ")"
                  }
                ]]]
            - position: |
                [[[
                  return (variables._vertical && variables._gauge_style == 'picard') ? 'absolute' : 'relative';
                ]]]
            - right: |-
                [[[
                  return (variables._vertical && variables._gauge_style == 'picard') ? "35px" : "";
                ]]]
          thumb:
            - visibility: |
                [[[
                  return (variables.slider.thumb.enabled && variables._vertical && !(variables.slider.locked)) ? 'visible' : 'hidden'
                ]]]
            - width: |
                [[[
                  return variables._vertical ? '400%' : '';
                ]]]
            - background-color: |
                [[[
                  return variables.slider.thumb.color || 'white';
                ]]]
            - border: |
                [[[
                  let thickness = variables.__get_num_with_unit(variables.slider.thumb.border.size) || '3px'
                  let color = variables.slider.thumb.border.color || 'black';
                  return thickness + " solid " + color;
                ]]]
            - top: |
                [[[
                  return "-" + variables.__get_num_with_unit((variables.slider.thumb.height / 2))
                ]]]
            - left: |
                [[[
                  let thickness = variables.__get_num_with_unit(variables.slider.thumb.border.size) || '3px'

                  return variables._vertical ? 'calc(-150% - ' + thickness + ')' : '';
                ]]]
            - border-radius: |
                [[[
                  return variables.__get_num_with_unit(variables.slider.thumb.border.radius,'%') || '50%';
                ]]]
            - height: |
                [[[
                  return variables.__get_num_with_unit(variables.slider.thumb.height) || '12px';
                ]]]
            - z-index: 2
    slider_track_control:
      card:
        type: custom:my-slider-v2
        entity: '[[[ return variables.entity ]]]'
        mode: '[[[ return variables.slider.mode ]]]'
        vertical: '[[[ return variables._vertical ]]]'
        flipped: true
        inverse: true
        step: '[[[ return variables.slider.step; ]]]'
        min: |
          [[[
              return variables.slider.min;
          ]]]
        max: |
          [[[
              return variables.slider.max;
          ]]]
        styles:
          progress:
            - background-color: '[[[ return variables.slider_track.mask_color; ]]]'
          container:
            - border-radius: 0
          track:
            - background: none
          thumb:
            - background: none
          card:
            - width: >-
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.width) + " - " +
                variables.__get_num_with_unit(variables.card.border.left.size)
                + " - " +
                variables.__get_num_with_unit(variables.card.border.right.size)
                + ")" ]]]
            - height: >-
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)
                + " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size)
                + ")" ]]]
            - border-radius: unset !important
            - background: none
