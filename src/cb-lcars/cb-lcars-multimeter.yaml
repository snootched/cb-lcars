cb-lcars-multimeter:
  type: custom:cblcars-button-card
  entity: "[[[ return variables.entity ]]]"
  template:
    - cb-lcars-functions
    - cb-lcars-header-base
    - cb-lcars-actions-disable
  triggers_update: "[[[ return variables.entity ]]]"
  show_icon: false
  show_label: true
  label: "[[[ return variables.label ]]]"
  show_name: false
  show_state: false
  variables:
    _mode: slider
    _vertical: false
    _slider_thickness: 12
    _slider_step: 1
    _slider_mode: brightness
    _min: 0
    _max: 100
    _increment: 10
    _show_unit_of_measurement: false
    _unit_of_measurement: "%"
    entity: |
      [[[
        return variables.__get_random_entity('light');
      ]]]
    entity_min: |
      [[[
        const entityDomain = entity.entity_id.split('.')[0];
        let minValue = variables._min || 0;

        switch (entityDomain) {
          case 'light':
            switch (variables._slider_mode) {
              case 'brightness':
                minValue = variables._min || 0; //0-100
                break;
              case 'temperature':
                minValue = entity.attributes.min_mireds;  // min_mireds/max_mireds
                break;
              case 'saturation':
                minValue = variables._min || 0; //0-100
                break;
              case 'hue':
                minValue = variables._min || 0;  //0-360
                break;
              default:
                minValue = variables._min || 0;
            }
            break;
          case 'fan':
          case 'switch':
          case 'media_player':
            minValue = variables._min || 0;
            break;
          default:
            minValue = variables._min || 0;
        }
        return parseInt(minValue);
      ]]]
    entity_max: |
      [[[
        const entityDomain = entity.entity_id.split('.')[0];
        let maxValue = variables._max || 100;

        switch (entityDomain) {
          case 'light':
            switch (variables._slider_mode) {
              case 'brightness':
                maxValue = variables._max || 100; //0-100
                break;
              case 'temperature':
                maxValue = entity.attributes.max_mireds;  // min_mireds/max_mireds
                break;
              case 'saturation':
                maxValue = variables._max || 100; //0-100
                break;
              case 'hue':
                maxValue = variables._max || 360;  //0-360
                break;
              default:
                maxValue = variables._max || 100;
            }
            break;
          case 'fan':
          case 'switch':
          case 'media_player':
            maxValue = variables._max || 100;
            break;
          default:
            maxValue = variables._max || 100;
        }
        return parseInt(maxValue);
      ]]]
    entity_unit_of_measurement: |
      [[[
        return entity.attributes.unit_of_measurement || variables._unit_of_measurement
      ]]]
    entity_color: "[[[ return variables.__get_light_css_color(variables.entity) ]]]"
    entity_match_slider: false
    entity_match_gauge: false
    entity_match_header: false
    entity_match_slider_start: false
    entity_match_slider_end: false
    text:
      label:
        font_size: 22px
        align_items: center
        justify: right
        padding:
          top: 0
          left: 0
          right: 5
          bottom: 0
        color:
          default: black
          "on": black
          "off": black
      name:
        font_size: 22px
        align_items: center
        justify: right
        padding:
          top: 0
          left: 0
          right: 5
          bottom: 0
        color:
          default: black
          "on": black
          "off": black
      state:
        font_size: 22px
        align_items: center
        justify: right
        padding:
          top: 0
          left: 0
          right: 5
          bottom: 0
        color:
          default: black
          "on": black
          "off": black
    card:
      height: '[[[ return this.offsetHeight; ]]]'
      width: '[[[ return this.offsetWidth; ]]]'
      border:
        top:
          size: 10
        bottom:
          size: 0
        left:
          size: 120
        right:
          size: 0
        inner:
          width: 0
    slider:
      locked: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let locked = true;
          switch (entityDomain) {
            case 'light':
            case 'input_number':
            case 'number':
            case 'media_player':
            case 'cover':
            case 'fan':
            case 'switch':
            case 'input_boolean':
            case 'lock':
              locked = false;
              break;
            default:
              locked = true;
              break;
          }
          return locked;
        ]]]
      color: |
        [[[ return  variables.entity_match_slider ? variables.entity_color :
        "var(--picard-lightest-blue)" ]]]
      color_alpha: 0.95
      border_color: |
        [[[ return  variables.entity_match_slider ? variables.entity_color :
        "var(--picard-blue)" ]]]
      border_alpha: 0.5
      border_width: 0px
      border_radius: 2px
      flipped: "[[[ return (variables._vertical) ? true : false ]]]"
      height: >-
        [[[ return (variables._vertical) ? variables.__get_num_with_unit(variables.card.height) :
        variables.__get_num_with_unit(variables._slider_thickness) ]]]
      width: >-
        [[[ return (variables._vertical) ?
        variables.__get_num_with_unit(variables._slider_thickness) :
        variables.__get_num_with_unit(variables.card.width) ]]]
      left_padding: 1px
      top_padding: "[[[ return variables.gauge.sub_meter.tick_size ]]]"
      step: |
        [[[
          return entity.attributes.percentage_step || variables._slider_step;
        ]]]
      mode: "[[[ return variables._slider_mode ]]]"
      min: "[[[ return variables.entity_min ]]]"
      max: "[[[ return variables.entity_max ]]]"
    gauge:
      bg_fill_value: 0
      min: "[[[ return variables.entity_min ]]]"
      max: "[[[ return variables.entity_max ]]]"
      increment: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let increment = variables._increment || 10;

          switch (entityDomain) {
            case 'light':
              switch (variables._slider_mode) {
                case 'temperature':
                  increment = 50;
                  break;
                default:
                  increment = variables._increment || 10;
              }
              break;
            default:
              increment = 10;
          }
          return parseInt(increment);
        ]]]
      color:
        active: >-
          [[[ return variables.entity_match_gauge ? variables.entity_color :
          "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
        inactive: var(--lcars-card-button-off, var(--picard-darkest-gray))
        background:
          active: transparent
          inactive: transparent
      sub_meter:
        show_sub_meter: true
        tick_size: 10px
        tick_count: 4
        active: >-
          [[[ return variables.entity_match_gauge ? variables.entity_color :
          "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
        inactive: var(--lcars-card-button-off, var(--picard-dark-gray))
        background:
          active: >-
            [[[ return variables.entity_match_gauge ? variables.entity_color :
            "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
          inactive: var(--lcars-card-button-off, var(--picard-darkest-gray))
      label:
        decimal_places: 0
        font_size: 14
        active: >-
          [[[ return variables.entity_match_gauge ? variables.entity_color :
          "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
        inactive: var(--lcars-card-button-off, var(--picard-darkest-gray))
    slider_track:
      padding:
        left: 5px
        right: 0px
        top: 5px
        bottom: 0px
      meter:
        _gradient:
          gap: 5px
  state:
    - value: "on"
      id: state_on
      styles:
        custom_fields:
          gauge:
            - transition: all 0.7s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active|| variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
          slider_track:
            - transition: all 0.7s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active|| variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
    - value: "off"
      id: state_off
      styles:
        custom_fields:
          gauge:
            - transition: all 0.7s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
          slider_track:
            - transition: all 0.7s ease-out
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
    - operator: template
      id: state_unavailable
      value: |
        [[[
          return entity !== undefined && ['unknown', 'unavailable'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        custom_fields:
          gauge:
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
          slider_track:
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
  styles:
    card:
      - border-radius: 0 !important
      - background: none
      - border: none
    label:
      - z-index: 1
      - height: 100%
      - width: |
          [[[
            return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
          ]]]

    custom_fields:
      gauge:
        - position: absolute
        - top: 0
        - left: 0
        - visibility: "[[[ return (variables._mode === 'gauge') ? 'visible' : 'hidden' ]]]"
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-bottom: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
        - width: >-
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
            variables.__get_num_with_unit(variables.card.border.left.size)  + " -
            " + variables.__get_num_with_unit(variables.card.border.right.size) +
            " )"
            ]]]
        - height: >-
            [[[ return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
            variables.__get_num_with_unit(variables.card.border.top.size)  + " - "
            + variables.__get_num_with_unit(variables.card.border.bottom.size) +
            ")" ]]]
      slider_track:
        - position: absolute
        - top: 0
        - left: 0
        - visibility: "[[[ return (variables._mode === 'slider') ? 'visible' : 'hidden' ]]]"
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-bottom: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
        - padding-left: >-
            [[[ return
            variables.__get_num_with_unit(variables.slider_track.padding.left) ]]]
        - padding-right: >-
            [[[ return
            variables.__get_num_with_unit(variables.slider_track.padding.right)
            ]]]
        - padding-top: >-
            [[[ return
            variables.__get_num_with_unit(variables.slider_track.padding.top) ]]]
        - padding-bottom: >-
            [[[ return
            variables.__get_num_with_unit(variables.slider_track.padding.bottom)
            ]]]
      slider:
        - visibility: >-
            [[[ return ((variables._mode === 'gauge') &&
            !(variables.slider.locked)) ? 'visible' : 'hidden' ]]]
        - position: absolute
        - top: |
            [[[
                if (variables._vertical) {
                  return variables.__get_num_with_unit(variables.card.border.top.size);
                } else {
                  return "calc(" + variables.__get_num_with_unit(variables.slider.top_padding) + " + " + variables.__get_num_with_unit(variables.card.border.top.size) + ")"
                }
            ]]]
        - left: |
            [[[
              if (variables._vertical) {
                return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) + " + " + variables.__get_num_with_unit(variables.gauge.sub_meter.tick_size) + ")"
              } else {
                return variables.__get_num_with_unit(variables.card.border.left.size);
              }
            ]]]
        - width: >-
            [[[ return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
            variables.__get_num_with_unit(variables.card.border.left.size)  + " -
            " + variables.__get_num_with_unit(variables.card.border.right.size) +
            ")" ]]]
        - height: >-
            [[[ return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
            variables.__get_num_with_unit(variables.card.border.top.size)  + " - "
            + variables.__get_num_with_unit(variables.card.border.bottom.size) +
            ")" ]]]
      locked_bar:
        - visibility: "[[[ return (variables.slider.locked) ? 'visible' : 'hidden' ]]]"
        - position: absolute
        - z-index: 1
        - left: |
            [[[
              if (variables._vertical) {
                return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) + " + " + variables.__get_num_with_unit(variables.gauge.sub_meter.tick_size) + ")"
              } else {
                return variables.__get_num_with_unit(variables.card.border.left.size);
              }
            ]]]
        - padding-left: 1px
        - top: |
            [[[
                if (variables._vertical) {
                  return variables.__get_num_with_unit(variables.card.border.top.size);
                } else {
                  return "calc(" + variables.__get_num_with_unit(variables.slider.top_padding) + " + " + variables.__get_num_with_unit(variables.card.border.top.size) + ")"
                }
            ]]]
        - width: >-
            [[[ return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
            variables.__get_num_with_unit(variables.card.border.left.size)  + " -
            " + variables.__get_num_with_unit(variables.card.border.right.size) +
            ")" ]]]
        - height: >-
            [[[ return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
            variables.__get_num_with_unit(variables.card.border.top.size)  + " - "
            + variables.__get_num_with_unit(variables.card.border.bottom.size) +
            ")" ]]]
  custom_fields:
    slider:
      card:
        type: custom:my-slider-v2
        entity: "[[[ return variables.entity ]]]"
        mode: "[[[ return variables.slider.mode ]]]"
        vertical: "[[[ return variables._vertical ]]]"
        flipped: false
        inverse: false
        step: "[[[ return variables.slider.step; ]]]"
        min: |
          [[[
          //  if (variables.slider.mode === 'temperature') {
          //    return entity.attributes.min_mired
          //  } else {
              return variables.slider.min;
          //  }
          ]]]
        max: |
          [[[
          //  if (variables.slider.mode === 'temperature') {
          //    return entity.attributes.max_mired
          //  } else {
              return variables.slider.max;
          //  }
          ]]]
        styles:
          card:
            - width: >-
                [[[ return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
                variables.__get_num_with_unit(variables.card.border.left.size)  +
                " - " +
                variables.__get_num_with_unit(variables.card.border.right.size) +
                ")" ]]]
            - height: >-
                [[[ return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)  + "
                - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                ")" ]]]
            - background: none
            - border-radius: 0
          progress:
            - background-color: >-
                [[[ return
                variables.__hex_to_rgba(variables.slider.color,variables.slider.color_alpha)
                ]]]
            - border: >-
                [[[ return variables.slider.border_width + " solid " +
                variables.__hex_to_rgba(variables.slider.border_color,
                variables.slider.border_alpha)  ]]]
            - border-radius: "[[[ return variables.slider.border_radius ]]]"
            - height: "[[[ return variables.slider.height ]]]"
            - width: "[[[ return variables.slider.width ]]]"
            - left: "[[[ return variables.slider.left_padding ]]]"
          container:
            - border-radius: 0
          track:
            - background: none
          thumb:
            - background: none
    locked_bar: |
      [[[
        const entityState = entity.state;
        const entityType = entity.entity_id.split('.')[0]; // Extract entity type

        let progress = 0;
        switch(entityType) {
          case 'light':
            progress = ((parseFloat(entity.attributes.brightness) / 256) * 100);
            break;
          case 'fan':
            progress = (parseFloat(entity.attributes.percentage));
            break;
          default:
            progress = (parseFloat(entityState));
            break;
        }

        const progressPercentage = ((progress / variables.slider.max) * 100) + '%';

        const isVertical = variables._vertical;
        const width = isVertical ? variables.slider.height : progressPercentage;
        const height = isVertical ? progressPercentage : variables.slider.height;

        //match myslider-v2 styling options
        const borderRadius = variables.slider.border_radius;
        const borderWidth = variables.slider.border_width;
        const borderColor = variables.slider.border_color;
        const backgroundColor = variables.slider.color;

        return `
          <div class="progress-bar" style="
            position: absolute;
            ${isVertical ? 'bottom: 0;' : 'left: 0;'}
            width: ${width};
            height: ${height};
            border-radius: ${borderRadius};
            border: ${borderWidth} solid ${borderColor};
            background-color: ${backgroundColor};
          "></div>
        `;
      ]]]

    gauge: |
      [[[

        let minVal = variables.gauge.min;
        let maxVal = variables.gauge.max;
        let increment = variables.gauge.increment;

        const orientation = variables._vertical ? 'vertical' : 'horizontal';

        const bg_fill_value = variables.gauge.bg_fill_value || 0;
        const bg_fill_color = variables.gauge.sub_meter.background.inactive || 'transparent';
        const showSubticks = variables.gauge.sub_meter.show_sub_meter;

        const entityState = entity.state;

        const meter_bg_color = entityState === 'on' ? variables.gauge.color.background.active : variables.gauge.color.background.inactive;
        const meter_tick_color = entityState === 'on' ? variables.gauge.color.active : variables.gauge.color.inactive;
        const meter_subtick_color = entityState === 'on' ? variables.gauge.sub_meter.active : variables.gauge.sub_meter.inactive;
        const meter_label_color = entityState === 'on' ? variables.gauge.label.active : variables.gauge.label.inactive;
        const meter_label_font_size = variables.__get_num_with_unit(variables.gauge.label.font_size);

        const width = parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size);
        const height = parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size);
        const meter_subtick_size = parseInt(variables.gauge.sub_meter.tick_size) || 10;

        const numSubticks = variables.gauge.sub_meter.tick_count;
        const numSegments = (maxVal - minVal) / increment; // Calculate the number of segments
        const subTickIncrement = 100 / numSegments / (numSubticks + 1);
        const decimal_places = variables.gauge.label.decimal_places || 0;

        const meterTicks = [];
        for (let i = minVal; i <= maxVal; i += increment) {
          const percent = orientation === 'vertical' ? 100 - ((i - minVal) / (maxVal - minVal) * 100) : (i - minVal) / (maxVal - minVal) * 100;
          const position = percent + '%';
          const labelOffset = orientation === 'vertical' ? 'translate(-5, 0)' : 'translate(0, -5)';

          meterTicks.push(`<line x1="${orientation === 'vertical' ? '0' : position}" y1="${orientation === 'vertical' ? position : '0'}" x2="${orientation === 'vertical' ? '100%' : position}" y2="${orientation === 'vertical' ? position : '100%'}" stroke="${meter_tick_color}" stroke-width="2"/>`);
          meterTicks.push(`<text x="${orientation === 'vertical' ? '100%' : position}" y="${orientation === 'vertical' ? position : '100%'}" font-size="${meter_label_font_size}" fill="${meter_label_color}" text-anchor="end" transform="${labelOffset}" dx="${orientation === 'vertical' ? '3' : '-3'}" dy="${orientation === 'vertical' ? '18' : '3'}">${i.toFixed(decimal_places)}${variables._show_unit_of_measurement ? variables.entity_unit_of_measurement : ''}</text>`);

          if (showSubticks && i < maxVal) {
            for (let j = 1; j <= numSubticks; j++) {
              const subTickPercent = orientation === 'vertical' ? percent - (j * subTickIncrement) : percent + (j * subTickIncrement);
              const subTickPosition = subTickPercent + '%';
              meterTicks.push(`<line x1="${orientation === 'vertical' ? '0' : subTickPosition}" y1="${orientation === 'vertical' ? subTickPosition : '0'}" x2="${orientation === 'vertical' ? meter_subtick_size : subTickPosition}" y2="${orientation === 'vertical' ? subTickPosition : meter_subtick_size}" stroke="${meter_subtick_color}" stroke-width="1"/>`);
            }
          }
        }

        return `
          <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
            <rect x="0" y="0" width="100%" height="100%" fill="${meter_bg_color}"/>
            <rect x="0" y="0" width="${orientation === 'vertical' ? '100%' : bg_fill_value + '%'}" height="${orientation === 'vertical' ? bg_fill_value + '%' : '100%'}" fill="${bg_fill_color}"/>
            ${meterTicks.join('')}
          </svg>
        `;
      ]]]

    slider_track:
      card:
        type: custom:cblcars-button-card
        template: |
          [[[
            if(variables._vertical) {
              return ['cb-lcars-functions', 'cb-lcars-slider'];
            } else {
              return ['cb-lcars-functions', 'cb-lcars-slider-horizontal'];
            }
          ]]]
        variables:
          card:
            width: |
              [[[
                  return (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size) - parseInt(variables.slider_track.padding.left) - parseInt(variables.slider_track.padding.right))+"px";
              ]]]
            height: |
              [[[
                return (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size) - parseInt(variables.slider_track.padding.top) - parseInt(variables.slider_track.padding.bottom))+"px";
              ]]]
          entity: "[[[ return variables.entity ]]]"
          entity_match_slider_start: "[[[ return variables.entity_match_slider_start ]]]"
          entity_match_slider_end: "[[[ return variables.entity_match_slider_end ]]]"
          meter:
            variables: "[[[ return variables.slider_track.meter ]]]"
          slider:
            variables: "[[[ return variables.slider ]]]"
