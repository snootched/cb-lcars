cb-lcars-multimeter:
  template:
    - cb-lcars-functions
    - cb-lcars-card-base
  entity: '[[[ return variables.__get_random_entity("light"); ]]]'
  triggers_update: '[[[ return variables.entity ]]]'
  variables:
    card:
      width: |
        [[[
          return variables.__getParentDimension(this,'width','px');
        ]]]
      height: |
        [[[
          return variables.__getParentDimension(this,'height','px');
        ]]]
    text:
      label:
        font_size: 24px
      state:
        font_size: 24px
      name:
        font_size: 24px
    panel:
      width: |
        [[[
          //console.log("card_width: ",variables.card.width);
          let card_width = parseFloat(variables.card.width);
          let panel_width = (card_width * 0.76);
          //console.log("panel_width: ",panel_width);
          return panel_width+"px"
        ]]]
      height: |
        [[[
          //console.log("card_height: ",variables.card.height);
          let card_height = parseFloat(variables.card.height);
          let panel_height = (card_height * 0.83);
          //console.log("panel_height: ",panel_height)
          return panel_height+"px"
        ]]]
      mode: gauge
      padding:
        top: 5px
        left: 5px
        right: 0px
        bottom: 0px
      meter: null
      slider: null
      icon_grid: null
    entity: '[[[ return entity.entity_id ]]]'
    entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
    entity_match_gauge: false
    entity_match_slider: false
    entity_match_header: false
    entity_match_slider_start: false
    entity_match_slider_end: false
    label: null
    header_button:
      variables:
        text:
          label:
            font_size: 24px
          state:
            font_size: 24px
          name:
            font_size: 24px
        card:
          color:
            active: |
              [[[ return  variables.entity_match_header ? variables.entity_color :
              "var(--lcars-ui-secondary)" ]]]
            inactive: var(--lcars-ui-primary)
            background:
              active: >
                [[[ return  variables.entity_match_header ? variables.entity_color
                : "var(--lcars-ui-secondary)" ]]]
              inactive: var(--lcars-ui-primary)
            border: null
        icon:
          color:
            active: null
            inactive: null
            background:
              active: null
              inactive: null
    y_panel_width_padded: >-
      [[[ return  (parseInt(variables.panel.width) -
      parseInt(variables.panel.padding.left) -
      parseInt(variables.panel.padding.right))+"px" ]]]
    y_panel_height_padded: >-
      [[[ return  (parseInt(variables.panel.height) -
      parseInt(variables.panel.padding.top) -
      parseInt(variables.panel.padding.bottom))+"px" ]]]
    y_trim_height: >-
      [[[ return "calc(" + variables.card.height + " - " + variables.panel.height
      + ")" ]]]
    y_trim_width: '[[[ return variables.panel.width ]]]'
    y_header_height: '[[[ return variables.card.height ]]]'
    y_header_width: >-
      [[[ return "calc(" + variables.card.width + " - " + variables.panel.width +
      ")" ]]]
    z_button_card:
      type: custom:button-card
      template:
        - cb-lcars-button-grid
      variables:
        card:
          width: '[[[ return variables.card.width ]]]'
          height: '[[[ return variables.card.height ]]]'
        button: '[[[ return variables.header_button ]]]'
        grid:
          auto_calc_X: false
          auto_calc_Y: false
          X: 2
          'Y': 1
          buttons:
            - variables:
                card:
                  width: '[[[ return variables.y_header_width ]]]'
                  height: '[[[ return variables.y_header_height ]]]'
                text: '[[[ return variables.text ]]]'
              show_label: true
              label: '[[[ return variables.label ]]]'
              template:
                - cb-lcars-button-picard-filled
              entity: '[[[ return variables.entity ]]]'
            - variables:
                card:
                  width: '[[[ return variables.y_trim_width ]]]'
                  height: '[[[ return variables.y_trim_height ]]]'
                  min_height: '[[[ return variables.y_trim_height ]]]'
              show_label: false
              entity: '[[[ return variables.entity ]]]'
          template_columns: >-
            [[[ return  variables.y_header_width + " " + variables.y_trim_width
            ]]]
          gap: 0px
    z_gauge_card:
      type: custom:button-card
      template:
        - cb-lcars-slider-horizontal-gauge
      variables:
        card:
          height: '[[[ return variables.panel.height ]]]'
          width: '[[[ return variables.panel.width ]]]'
        entity: '[[[ return variables.entity ]]]'
        entity_match_slider: '[[[ return variables.entity_match_slider ]]]'
        slider: |
          [[[
          let sliderObject = (variables.panel && variables.panel.slider) ?
          variables.panel.slider : {};
          let defaultVariables = {
            variables: {
              step: 1
            }
          };
          //meterObject = {...defaultVariables, ...meterObject};
          sliderObject = variables.__deepMerge(defaultVariables,sliderObject);

          return sliderObject;
          ]]]
        gauge: |
          [[[
          let gaugeObject = (variables.panel && variables.panel.gauge) ?
          variables.panel.gauge : {};
          let defaultVariables = {

            "show_sub_meter": true,
            "meter": {
                "variables": {
                  "button": {
                      "variables": {
                        "text": {
                            "label": {
                              "color": {
                                  "off": variables.header_button.variables.card.color.background.inactive,
                                  "on": variables.entity_match_gauge ? variables.entity_color : "var(--lcars-ui-secondary)"
                              }
                            }
                        },
                        "card": {
                            "color": {
                              "inactive": variables.header_button.variables.card.color.background.inactive,
                              "active": variables.entity_match_gauge ? variables.entity_color : "var(--lcars-ui-secondary)"
                            }
                        }
                      }
                  }
                }
            },
            "sub_meter": {
                "variables": {
                  "button": {
                      "variables": {
                        "text": {
                            "label": {
                              "color": {
                                  "off": variables.header_button.variables.card.color.background.inactive,
                                  "on": variables.entity_match_gauge ? variables.entity_color : "var(--lcars-ui-secondary)"
                              }
                            }
                        },
                        "card": {
                            "color": {
                              "inactive": variables.header_button.variables.card.color.background.inactive,
                              "active": variables.entity_match_gauge ? variables.entity_color : "var(--lcars-ui-secondary)"
                            }
                        }
                      }
                  }
                }
            }

          };
          //meterObject = {...defaultVariables, ...meterObject};
          gaugeObject = variables.__deepMerge(defaultVariables,gaugeObject);

          return gaugeObject;
          ]]]
    z_slider_card:
      type: custom:button-card
      template:
        - cb-lcars-functions
        - cb-lcars-slider-horizontal
      variables:
        card:
          height: '[[[ return variables.y_panel_height_padded ]]]'
          width: '[[[ return variables.y_panel_width_padded ]]]'
        entity: '[[[ return variables.entity ]]]'
        entity_match_slider_start: '[[[ return variables.entity_match_slider_start ]]]'
        entity_match_slider_end: '[[[ return variables.entity_match_slider_end ]]]'
        meter: |
          [[[
          let meterObject = (variables.panel && variables.panel.meter) ?
          variables.panel.meter : {};
          let defaultVariables = {
            variables: {
              button: {
                template: "cb-lcars-button-picard-filled",
                variables: {
                  card: {
                    height: variables.y_panel_height_padded,
                    },
                  },
              }
            }
          };
          //meterObject = {...defaultVariables, ...meterObject};
          meterObject = variables.__deepMerge(defaultVariables,meterObject);

          return meterObject;
          ]]]
        slider: |
          [[[
          let sliderObject = (variables.panel && variables.panel.slider) ?
          variables.panel.slider : {};
          let defaultVariables = {
            variables: {
              step: 1
            }
          };
          //meterObject = {...defaultVariables, ...meterObject};
          sliderObject = variables.__deepMerge(defaultVariables,sliderObject);

          return sliderObject;
          ]]]
    z_icon_grid:
      type: custom:button-card
      template:
        - cb-lcars-button-grid-icons
      variables: >
        [[[

        let iconObject = (variables.panel.icon_grid &&
        variables.panel.icon_grid.variables) ? variables.panel.icon_grid.variables
        : {};

        let defaultVariables = {
          card: {
            height: variables.y_panel_height_padded,
            width: variables.y_panel_width_padded,
            },
          grid: {
            gap: "9px",
          },
            button: {
            variables: {
              card: {
                width: "45px",
                height: "45px"
              }
            }
          }
        };

        iconObject = variables.__deepMerge(defaultVariables,iconObject);

        return iconObject;

        ]]]
  styles:
    card:
      - background: none
      - width: '[[[ return variables.card.width; ]]]'
      - height: '[[[  return variables.card.height; ]]]'
      - border-radius: 0 !important
    custom_fields:
      panel:
        - position: absolute
        - right: 0px
        - bottom: 0px
      button:
        - position: absolute
        - left: 0px
        - top: 0px
  custom_fields:
    button:
      card: '[[[ return variables.z_button_card ]]]'
    panel:
      card: |
        [[[
        let panel_card;
        switch (variables.panel.mode) {
          case 'icons':
          case 'icon_grid':
            panel_card = variables.z_icon_grid;
            break;
          case 'slider':
            panel_card = variables.z_slider_card;
            break;
          case 'gauge':
            panel_card = variables.z_gauge_card;
            break;
          default:
            panel_card = null;
        }
        return panel_card;
        ]]]
