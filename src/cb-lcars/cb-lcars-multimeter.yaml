cb-lcars-multimeter:
  enable_resize_observer: true
  entity: '[[[ return variables.entity ]]]'
  template:
    - cb-lcars-functions
    - cb-lcars-functions-svg
    - cb-lcars-base
    - cb-lcars-actions-disable
    - cb-lcars-animation-geo-array
  triggers_update: '[[[ return variables.entity ]]]'
  show_icon: false
  show_label: false
  label: '[[[ return variables.label ]]]'
  show_name: false
  show_state: false
  variables:
    _mode: gauge
    _gauge_style: basic
    _vertical: false
    _slider_thickness: 12
    _slider_step: 1
    _slider_mode: brightness
    _min: 0
    _max: 100
    _increment: 10
    _show_unit_of_measurement: false
    _unit_of_measurement: null
    _z_isPicardMode: |
      [[[
        return (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard');
      ]]]
    entity: |
      [[[
        return variables.__get_random_entity('light');
      ]]]
    entity_min: |
      [[[
        const entityDomain = entity.entity_id.split('.')[0];
        let minValue = variables._min || 0;
        switch (entityDomain) {
          case 'light':
            switch (variables._slider_mode) {
              case 'brightness':
                minValue = variables._min || 0; //0-100
                break;
              case 'temperature':
                minValue = entity.attributes.min_mireds;  // min_mireds/max_mireds
                break;
              case 'saturation':
                minValue = variables._min || 0; //0-100
                break;
              case 'hue':
                minValue = variables._min || 0;  //0-360
                break;
              default:
                minValue = variables._min || 0;
            }
            break;
          case 'fan':
          case 'switch':
          case 'media_player':
            minValue = variables._min || 0;
            break;
          default:
            minValue = variables._min || 0;
        }
        return parseInt(minValue);
      ]]]
    entity_max: |
      [[[
        const entityDomain = entity.entity_id.split('.')[0];
        let maxValue = variables._max || 100;
        switch (entityDomain) {
          case 'light':
            switch (variables._slider_mode) {
              case 'brightness':
                maxValue = variables._max || 100; //0-100
                break;
              case 'temperature':
                maxValue = entity.attributes.max_mireds;  // min_mireds/max_mireds
                break;
              case 'saturation':
                maxValue = variables._max || 100; //0-100
                break;
              case 'hue':
                maxValue = variables._max || 360;  //0-360
                break;
              default:
                maxValue = variables._max || 100;
            }
            break;
          case 'fan':
          case 'switch':
          case 'media_player':
            maxValue = variables._max || 100;
            break;
          default:
            maxValue = variables._max || 100;
        }
        return parseInt(maxValue);
      ]]]
    entity_unit_of_measurement: |
      [[[
        return variables._unit_of_measurement || entity.attributes.unit_of_measurement || '%';
      ]]]
    entity_color: var(--button-card-light-color)
    entity_match_slider: false
    entity_match_gauge: false
    entity_match_header: false
    entity_match_slider_start: false
    entity_match_slider_end: false
    animation:
      justify_content: left
      align_items: center
      geo_array:
        animation_axis: cols
        grid:
          num_rows: 1
          num_cols: 3
        shape:
          size: 14
        color:
          base: var(--picard-orange)
          animation_start: var(--picard-blue)
          animation_end: var(--picard-dark-blue)
    card:
      gap: 5
      color:
        active: var(--lcars-card-button)
        inactive: var(--lcars-card-button-off)
        non_zero: var(--lcars-card-button)
        zero: var(--lcars-card-button-off)
        background:
          default: transparent
          active: transparent
          inactive: transparent
          zero: transparent
          non_zero: transparent
          hvac_heat: transparent
          hvac_cool: transparent
          unavailable: transparent
      height: '[[[ return this.offsetHeight; ]]]'
      min_height: '[[[ return Math.max(parseInt(this.offsetHeight), 50); ]]]'
      width: '[[[ return this.offsetWidth; ]]]'
      border:
        top:
          size: |
            [[[
              return (variables._z_isPicardMode) ? 40 : 10
            ]]]
        bottom:
          size: |
            [[[
              return (variables._z_isPicardMode) ? 50 : 0
            ]]]
        left:
          size: |
            [[[
              if (variables._z_isPicardMode) { return 0; }
              if (variables._vertical) { return 30; }
              return 120;
            ]]]
        right:
          size: 0
        inner:
          width: 0
    text:
      label:
        font_size: 22px
        align_items: center
        justify: right
        transform: uppercase
        padding:
          top: 0
          left: 0
          right: 5
          bottom: 0
        color:
          default: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--primary-text-color)' : 'black'
            ]]]
          active: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-ui-secondary)' : 'black'
            ]]]
          inactive: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-ui-tertiary)' : 'black'
            ]]]
          zero: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-green)' : 'black'
            ]]]
          non_zero: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-blue)' : 'black'
            ]]]
          hvac_heat: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-orange)' : 'black'
            ]]]
          hvac_cool: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-blue)' : 'black'
            ]]]
          unavailable: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-card-button-unavailable)' : 'black'
            ]]]
      name:
        font_size: 22px
        align_items: center
        justify: right
        transform: uppercase
        padding:
          top: 0
          left: 0
          right: 5
          bottom: 0
        color:
          default: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--primary-text-color)' : 'black'
            ]]]
          active: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-ui-secondary)' : 'black'
            ]]]
          inactive: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-ui-tertiary)' : 'black'
            ]]]
          zero: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-green)' : 'black'
            ]]]
          non_zero: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-blue)' : 'black'
            ]]]
          hvac_heat: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-orange)' : 'black'
            ]]]
          hvac_cool: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-blue)' : 'black'
            ]]]
          unavailable: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-card-button-unavailable)' : 'black'
            ]]]
      state:
        font_size: 22px
        align_items: center
        justify: right
        transform: uppercase
        padding:
          top: 0
          left: 0
          right: 5
          bottom: 0
        color:
          default: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--primary-text-color)' : 'black'
            ]]]
          active: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-ui-secondary)' : 'black'
            ]]]
          inactive: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-ui-tertiary)' : 'black'
            ]]]
          zero: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-green)' : 'black'
            ]]]
          non_zero: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-blue)' : 'black'
            ]]]
          hvac_heat: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-orange)' : 'black'
            ]]]
          hvac_cool: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-blue)' : 'black'
            ]]]
          unavailable: |
            [[[
              return (variables._z_isPicardMode) ? 'var(--lcars-card-button-unavailable)' : 'black'
            ]]]
    slider:
      locked: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let locked = true;
          switch (entityDomain) {
            case 'light':
            case 'input_number':
            case 'number':
            case 'media_player':
            case 'cover':
            case 'fan':
            case 'switch':
            case 'input_boolean':
            case 'lock':
              locked = false;
              break;
            default:
              locked = true;
              break;
          }
          return locked;
        ]]]
      height: >-
        [[[ return (variables._vertical) ?
        variables.__get_num_with_unit(variables.card.height) :
        variables.__get_num_with_unit(variables._slider_thickness) ]]]
      width: >-
        [[[ return (variables._vertical) ?
        variables.__get_num_with_unit(variables._slider_thickness) :
        variables.__get_num_with_unit(variables.card.width) ]]]
      picard_right: 35
      color: |
        [[[ return  variables.entity_match_slider ? variables.entity_color :
        "var(--picard-lightest-blue)" ]]]
      color_alpha: 0.95
      border_color: |
        [[[ return  variables.entity_match_slider ? variables.entity_color :
        "var(--picard-blue)" ]]]
      border_alpha: 0.5
      border_width: 0px
      border_radius: 2px
      thumb:
        border:
          size: 3
          color: black
          radius: 50%
        height: 15
        color: white
        enabled: |
          [[[
            return (variables._z_isPicardMode) ? true : false;
          ]]]
      flipped: '[[[ return (variables._vertical) ? true : false ]]]'
      padding:
        left: 0
        right: 0
        bottom: 0
        top: '[[[ return parseInt(variables.gauge.sub_meter.tick_size) ]]]'
      step: |
        [[[
          return entity.attributes.percentage_step || variables._slider_step;
        ]]]
      mode: '[[[ return variables._slider_mode ]]]'
      min: '[[[ return variables.entity_min ]]]'
      max: '[[[ return variables.entity_max ]]]'
    gauge:
      picard_ratio: 40
      range:
        enabled: true
        width_ratio: 1.9
        height_ratio: 2
        inset:
          border:
            color: black
            size: 4
          gap: 5
        border:
          color:
            active: var(--lcars-card-button)
            inactive: var(--lcars-card-button-off)
      connect_ticks: |
        [[[
          return (variables._z_isPicardMode ) ? true : false;
        ]]]
      tick_line_thickness: 10
      min: '[[[ return variables.entity_min ]]]'
      max: '[[[ return variables.entity_max ]]]'
      increment: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let increment = variables._increment || 10;
          switch (entityDomain) {
            case 'light':
              switch (variables._slider_mode) {
                case 'temperature':
                  increment = 50;
                  break;
                default:
                  increment = variables._increment || 10;
              }
              break;
          }
          return parseInt(increment);
        ]]]
      color:
        active: >-
          [[[ return variables.entity_match_gauge ? variables.entity_color :
          variables.card.color.active ]]]
        inactive: '[[[ return variables.card.color.inactive ]]]'
        background:
          active: transparent
          inactive: transparent
      sub_meter:
        show_sub_meter: true
        tick_size: 10px
        tick_count: 4
        active: >-
          [[[ return variables.entity_match_gauge ? variables.entity_color :
          variables.card.color.active ]]]
        inactive: '[[[ return variables.card.color.inactive ]]]'
        background:
          active: >-
            [[[ return variables.entity_match_gauge ? variables.entity_color :
            "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
          inactive: var(--lcars-card-button-off, var(--picard-darkest-gray))
      label:
        decimal_places: 0
        font_size: 14
        font_weight: 400
        font_family: Antonio
        active: >-
          [[[ return variables.entity_match_gauge ? variables.entity_color :
          variables.card.color.active ]]]
        inactive: '[[[ return variables.card.color.inactive ]]]'
    slider_track:
      padding:
        left: 5
        right: 0
        top: 5
        bottom: 0
      mask_color: rgba(0,0,0,0.8)
      gradient_start_color: >-
        [[[ return  variables.entity_match_slider_start ?
        variables.entity_color : "var(--error-color)" ]]]
      gradient_end_color: >-
        [[[ return  variables.entity_match_slider_end ? variables.entity_color
        : "var(--success-color)" ]]]
      gap: 5
      bar_border_radius: 0
      bar_thickness: 10
  state:
    - id: state_on
      operator: template
      value: |
        [[[
          return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  let border = variables.__get_num_with_unit(parseInt(variables.card.border.bottom.size))
                  return border + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.active;
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.active;
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                ]]]
    - id: state_off
      operator: template
      value: |
        [[[
          return entity !== undefined && ['off', 'closed', 'unlocked'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + (variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + (variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + (variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + (variables.card.color.inactive || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.inactive;
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.inactive;
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
    - id: state_unavailable
      operator: template
      value: |
        [[[
          return entity !== undefined && ['unknown', 'unavailable'].includes(states[entity.entity_id].state)
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
    - id: state_heat
      value: heat
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                ]]]
    - id: state_cool
      value: cool
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
    - id: state_zero
      operator: template
      value: |
        [[[
          if (entity === undefined) return false;
          const attr = variables.attribute;
          if (attr && !isNaN(Number(entity.attributes?.[attr]))) {
            return Number(entity.attributes[attr]) === 0;
          }
          return entity !== undefined && Number(states[entity.entity_id].state) === 0;
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.inactive || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.inactive || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.inactive || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.inactive || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                ]]]
    - id: state_nonzero
      operator: template
      value: |
        [[[
          if (entity === undefined) return false;
          const attr = variables.attribute;
          if (attr && !isNaN(Number(entity.attributes?.[attr]))) {
            return Number(entity.attributes[attr]) !== 0;
          }
          return entity !== undefined && Number(states[entity.entity_id].state) !== 0;
        ]]]
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                ]]]
    - id: state_default
      operator: default
      styles:
        custom_fields:
          gauge:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
          gauge_control:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          locked_bar:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-bottom: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-left: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
            - border-right: |
                [[[
                  if (variables._z_isPicardMode) {
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                  }
                ]]]
          slider_bg:
            - transition: all 0.2s ease-in
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                ]]]
  styles:
    card:
      - background: none
      - border-radius: 0 !important
      - border: none
      - height: 100%
      - max-width: none
    label:
      - z-index: 2
      - visibility: |
          [[[
            if (variables._z_isPicardMode){
              return 'visible';
            }
          ]]]
      - background: |
          [[[
            return (variables._z_isPicardMode) ? 'black' : 'none';
          ]]]
      - background-clip: padding-box
      - height: |
          [[[
            if (variables._z_isPicardMode){
              return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " + 1px )"
            } else {
              return '100%'
            }
          ]]]
      - width: |
          [[[
            if (variables._z_isPicardMode) {
              return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"
            } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
            }
          ]]]
      - border-left: |
          [[[
            if (variables._z_isPicardMode) {
              return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
            }
          ]]]
      - border-top: |
          [[[
            if (variables._z_isPicardMode) {
              return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
            }
          ]]]
      - right: |
          [[[
            if (variables._z_isPicardMode) {
              return 0;
            }
          ]]]
      - left: null
    name:
      - z-index: 2
      - background: |
          [[[
            return (variables._z_isPicardMode) ? 'black' : 'none';
          ]]]
      - background-clip: padding-box
      - height: |
          [[[
            if (variables._z_isPicardMode){
              return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") + " + variables.__get_num_with_unit(variables.card.gap) +")"
            } else {
              return '100%'
            }
          ]]]
      - width: |
          [[[
            if (variables._z_isPicardMode) {
              return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"
            } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
            }
          ]]]
      - border-left: |
          [[[
            if (variables._z_isPicardMode) {
              return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
            }
          ]]]
      - border-bottom: |
          [[[
            if (variables._z_isPicardMode) {
              return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") solid transparent";
            }
          ]]]
      - right: |
          [[[
            if (variables._z_isPicardMode) {
              return 0;
            }
          ]]]
      - bottom: |
          [[[
            if (variables._z_isPicardMode) {
              return 0;
            }
          ]]]
      - left: null
      - top: null
    state:
      - z-index: 2
      - background: |
          [[[
            return (variables._z_isPicardMode) ? 'black' : 'none';
          ]]]
      - background-clip: content-box
      - height: |
          [[[
            if (variables._z_isPicardMode){
              return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") + " + variables.__get_num_with_unit(variables.card.gap) +")"
            } else {
              return '100%'
            }
          ]]]
      - width: |
          [[[
            if (variables._z_isPicardMode) {
              return "calc(50% - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio + ") - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"
            } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
            }
          ]]]
      - border-right: |
          [[[
            if (variables._z_isPicardMode) {
              return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio + ") solid transparent";
            }
          ]]]
      - border-bottom: |
          [[[
            if (variables._z_isPicardMode) {
              return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") solid transparent";
            }
          ]]]
      - left: |
          [[[
            if (variables._z_isPicardMode) {
              return 0;
            }
          ]]]
      - bottom: |
          [[[
            if (variables._z_isPicardMode) {
              return 0;
            }
          ]]]
      - right: null
      - top: null
      - justify-content: |
          [[[
            if (variables._z_isPicardMode) {
              return 'left';
            } else {
              return 'right';
            }
          ]]]
    custom_fields:
      ne_mask:
        - z-index: 1
        - top: 0
        - right: 0
        - visibility: |
            [[[
              return (variables._z_isPicardMode) ? 'visible' : 'hidden';
            ]]]
        - display: flex
        - position: absolute
        - justify: left
        - background: |
            [[[
              return (variables._z_isPicardMode) ? 'black' : 'none';
            ]]]
        - background-clip: padding-box
        - height: |
            [[[
              if (variables._z_isPicardMode){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " + 1px )"
              } else {
                return '100%'
              }
            ]]]
        - width: |-
            [[[
              if (variables._z_isPicardMode) {
                return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + ")"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-left: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - border-top: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - right: |
            [[[
              if (variables._z_isPicardMode) {
                return 0;
              }
            ]]]
        - left: null
      sw_mask:
        - z-index: 1
        - visibility: |
            [[[
              return (variables._z_isPicardMode) ? 'visible' : 'hidden';
            ]]]
        - display: flex
        - position: absolute
        - justify: left
        - background: black
        - background-clip: padding-box
        - height: |
            [[[
              if (variables._z_isPicardMode){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") + " + variables.__get_num_with_unit(variables.card.gap) +")"
              } else {
                return '100%'
              }
            ]]]
        - width: |
            [[[
              if (variables._z_isPicardMode) {
                  return "calc(50% - " + variables.__get_num_with_unit(variables.card.gap) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio +") )"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-right: |
            [[[
              if (variables._z_isPicardMode) {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio + ") solid transparent";
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables._z_isPicardMode) {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio +") solid transparent";
              }
            ]]]
        - left: |
            [[[
              if (variables._z_isPicardMode) {
                return 0;
              }
            ]]]
        - bottom: |
            [[[
              if (variables._z_isPicardMode) {
                return 0;
              }
            ]]]
        - right: null
        - top: null
        - justify-content: |
            [[[
              if (variables._z_isPicardMode) {
                return 'left';
              }
            ]]]
      se_mask:
        - z-index: 1
        - visibility: |
            [[[
              return (variables._z_isPicardMode) ? 'visible' : 'hidden';
            ]]]
        - display: flex
        - position: absolute
        - justify: left
        - background: |
            [[[
              return (variables._z_isPicardMode) ? 'black' : 'none';
            ]]]
        - background-clip: padding-box
        - height: |
            [[[
              if (variables._z_isPicardMode){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") + " + variables.__get_num_with_unit(variables.card.gap) +")"
              } else {
                return '100%'
              }
            ]]]
        - width: |-
            [[[

              if (variables._z_isPicardMode) {
                return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + ")"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-left: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables._z_isPicardMode) {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") solid transparent";
              }
            ]]]
        - right: |
            [[[
              if (variables._z_isPicardMode) {
                return 0;
              }
            ]]]
        - bottom: |
            [[[
              if (variables._z_isPicardMode) {
                return 0;
              }
            ]]]
        - left: null
      animation:
        - visibility: |
            [[[
              return (variables._z_isPicardMode) ? "visible" : "hidden";
            ]]]
        - display: flex
        - z-index: 1
        - background: |
            [[[
              return (variables._z_isPicardMode) ? 'black' : 'none';
            ]]]
        - background-clip: content-box
        - height: |
            [[[
              if (variables._z_isPicardMode){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " + 1px )"
              } else {
                return '100%'
              }
            ]]]
        - width: |-
            [[[
              if (variables._z_isPicardMode) {
                return "calc(50% - " + variables.__get_num_with_unit(variables.card.gap) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio +") )"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-right: |
            [[[
              if (variables._z_isPicardMode) {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio + ") solid transparent";
              }
            ]]]
        - border-top: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - left: |
            [[[
              if (variables._z_isPicardMode) {
                return 0;
              }
            ]]]
        - right: null
        - position: absolute
        - top: 0
        - background: black
        - align-items: |
            [[[
              return variables.animation.align_items || 'center';
            ]]]
        - justify-content: |
            [[[
              return variables.animation.justify_content || 'center';
            ]]]
      gauge:
        - background: none
        - text-align: |
            [[[
              return (variables._z_isPicardMode) ? 'left' : '';
            ]]]
        - visibility: >-
            [[[ return (variables._mode === 'gauge') ? 'visible' : 'hidden'
            ]]]
        - position: absolute
        - top: 0px
        - left: |
            [[[
              if (variables._z_isPicardMode) {
                return '';
              } else {
              return 0;
              }
            ]]]
        - right: |
            [[[
              if (variables._z_isPicardMode) {
                return 0;
              }
            ]]]
        - width: >-
            [[[

              if (variables._z_isPicardMode) {
                return '50%'
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
            variables.__get_num_with_unit(variables.card.border.left.size)  +
            " - " +
            variables.__get_num_with_unit(variables.card.border.right.size) +
            " )"
              }
            ]]]
        - height: |
            [[[
              if(variables._z_isPicardMode) {
                return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                " - (2 * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                ")"
              }
            ]]]
        - padding-bottom: |
            [[[
              return (variables._z_isPicardMode) ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - padding-top: |
            [[[
              return (variables._z_isPicardMode) ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-bottom: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
      slider_track_control:
        - visibility: >-
            [[[ return ((variables._mode === 'slider') &&
            !(variables.slider.locked)) ? 'visible' : 'hidden' ]]]
        - position: absolute
        - top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size);
            ]]]
        - left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size);
            ]]]
        - width: >-
            [[[ return "calc(" +
            variables.__get_num_with_unit(variables.card.width) + " - " +
            variables.__get_num_with_unit(variables.card.border.left.size) + "
            - " +
            variables.__get_num_with_unit(variables.card.border.right.size)  +
            ")" ]]]
        - height: >-
            [[[ return "calc(" +
            variables.__get_num_with_unit(variables.card.height) + " - " +
            variables.__get_num_with_unit(variables.card.border.top.size) + "
            - " +
            variables.__get_num_with_unit(variables.card.border.bottom.size) +
            ")" ]]]
      slider_bg:
        - visibility: >-
            [[[ return (variables._mode === 'slider') ? 'visible' : 'hidden'
            ]]]
        - position: absolute
        - top: 0px
        - width: >-
            [[[ return "calc(" +
            variables.__get_num_with_unit(variables.card.width) +  " - " +
            variables.__get_num_with_unit(variables.card.border.left.size) + "
            - " +
            variables.__get_num_with_unit(variables.card.border.right.size) +
            " - " +
            variables.__get_num_with_unit(variables.slider_track.padding.left)
            + " - " +
            variables.__get_num_with_unit(variables.slider_track.padding.right)
            + ")" ]]]
        - height: >-
            [[[ return "calc(" +
            variables.__get_num_with_unit(variables.card.height) +  " - " +
            variables.__get_num_with_unit(variables.card.border.top.size) +  "
            - " +
            variables.__get_num_with_unit(variables.card.border.bottom.size) +
            " - " +
            variables.__get_num_with_unit(variables.slider_track.padding.top)
            + " - " +
            variables.__get_num_with_unit(variables.slider_track.padding.bottom)
            + ")" ]]]
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-bottom: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
        - padding-left: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.left) + ")";
            ]]]
        - padding-top: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.top) + ")";
            ]]]
        - padding-right: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.right) + ")";
            ]]]
        - padding-bottom: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.bottom) + ")";
            ]]]
      gauge_control:
        - background: none
        - visibility: >-
            [[[ return ((variables._mode === 'gauge') &&
            !(variables.slider.locked)) ? 'visible' : 'hidden' ]]]
        - position: absolute
        - top: |
            [[[
                if (variables._z_isPicardMode) {
                  return 0;
                }
                if (variables._vertical) {
                  return variables.__get_num_with_unit(variables.card.border.top.size);
                } else {
                  return "calc(" + variables.__get_num_with_unit(variables.slider.padding.top) + " + " + variables.__get_num_with_unit(variables.card.border.top.size) + ")"
                }
            ]]]
        - left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size);
            ]]]
        - width: |-
            [[[
              if (variables._z_isPicardMode) {
                  return "calc( 50% - " + variables.__get_num_with_unit(variables.card.gap) + ")";
                }
              return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " + variables.__get_num_with_unit(variables.card.border.left.size)  + " - " + variables.__get_num_with_unit(variables.card.border.right.size) + ")";
            ]]]
        - height: |
            [[[
              let gap_count = (variables._gauge_style == 'picard') ? 2 : 0;
              if(variables._mode == 'gauge' && variables._vertical) {
                return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                " - (" + gap_count + " * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                ")"
              }
            ]]]
        - padding-bottom: |
            [[[
              return (variables._z_isPicardMode) ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - padding-top: |
            [[[
              return (variables._z_isPicardMode) ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - border-top: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-left: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-right: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
      locked_bar:
        - visibility: '[[[ return (variables.slider.locked) ? ''visible'' : ''hidden'' ]]]'
        - overflow: visible
        - position: absolute
        - left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size);
            ]]]
        - top: |
            [[[
              if (variables._z_isPicardMode) {
                return 0;
              }
              return variables.__get_num_with_unit(variables.card.border.top.size);
            ]]]
        - width: |-
            [[[
              if (variables._mode === 'slider') {
                return "calc(" +
                  variables.__get_num_with_unit(variables.card.width) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.left.size) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.right.size) +
                  " + " +
                  variables.__get_num_with_unit(variables.slider_track.padding.left) +
                  " + " +
                  variables.__get_num_with_unit(variables.slider_track.padding.right) +
                  ")";
              }

              if (variables._z_isPicardMode) {
                  return "calc( 50% - " + variables.__get_num_with_unit(variables.card.gap) + ")";
                }
              return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " + variables.__get_num_with_unit(variables.card.border.left.size)  + " - " + variables.__get_num_with_unit(variables.card.border.right.size) + ")";
            ]]]
        - height: |-
            [[[
              if (variables._mode === 'slider') {
                return "calc(" +
                  variables.__get_num_with_unit(variables.card.height) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size) +
                  " + " +
                  variables.__get_num_with_unit(variables.slider_track.padding.top) +
                  " + " +
                  variables.__get_num_with_unit(variables.slider_track.padding.bottom) +
                  ")";
              }

              let gap_count = (variables._gauge_style == 'picard') ? 2 : 0;
              if(variables._mode == 'gauge' && variables._vertical) {
                return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                " - (" + gap_count + " * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                ")"
              }

              return "calc(" +
                variables.__get_num_with_unit(variables.card.height) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.top.size) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                ")";
            ]]]
        - padding-bottom: |
            [[[
              return (variables._z_isPicardMode) ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - padding-top: |
            [[[
              return (variables._z_isPicardMode) ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - border-top: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-left: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
        - border-right: |
            [[[
              if (variables._z_isPicardMode) {
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              }
            ]]]
      ranges_alt:
        - background: none
        - text-align: |
            [[[
              return (variables._z_isPicardMode) ? 'left' : '';
            ]]]
        - display: '[[[ return (variables._z_isPicardMode) ? ''flex'' : ''none'' ]]]'
        - position: absolute
        - top: 0
        - left: 0
        - justify-content: flex-end
        - width: >-
            [[[
              if (variables._z_isPicardMode) {
                return "calc( 50% - " + variables.__get_num_with_unit(variables.card.gap) + ")"
              } else {
              return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
            variables.__get_num_with_unit(variables.card.border.left.size)  +
            " - " +
            variables.__get_num_with_unit(variables.card.border.right.size) +
            " )"
              }
            ]]]
        - height: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
              variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
              variables.__get_num_with_unit(variables.card.border.bottom.size) +
              " - (2 * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
              ")"
            ]]]
        - padding-bottom: |
            [[[
              return (variables._z_isPicardMode) ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - padding-top: |
            [[[
              return (variables._z_isPicardMode) ? variables.__get_num_with_unit(variables.card.gap) : 0;
            ]]]
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid transparent" ;
            ]]]
        - border-bottom: |
            [[[
              let border = parseInt(variables.card.border.bottom.size); //+ parseInt(variables.card.gap);
              return  variables.__get_num_with_unit(border) + " solid transparent";
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid transparent";
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid transparent";
            ]]]
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
  custom_fields:
    ranges_alt: |
      [[[
        if(!variables._z_isPicardMode) return null;

        const params = {
          gauge: variables.gauge,
          card: variables.card,
          entity: entity,
          attribute: variables.attribute,
          _z_isPicardMode: variables._z_isPicardMode,
        };
        return variables.get_memoized_svg.call(this,'z_ranges_alt_svg')(params);
      ]]]
    se_mask: |
      [[[
        return "";
      ]]]
    ne_mask: |
      [[[
        return "";
      ]]]
    sw_mask: |
      [[[
        return "";
      ]]]
    gauge: |
      [[[
        if(!(variables._mode === 'gauge')) return null;

        const params = {
          gauge: variables.gauge,
          card: variables.card,
          entity: entity,
          attribute: variables.attribute,
          _show_unit_of_measurement: variables._show_unit_of_measurement,
          entity_unit_of_measurement: variables.entity_unit_of_measurement,

          _z_isPicardMode: variables._z_isPicardMode,
          _vertical: variables._vertical,
          _gauge_style: variables._gauge_style,
        };
        //return variables.z_memoized_gauge_svg(params);
        return variables.get_memoized_svg.call(this,'z_gauge_svg')(params);
      ]]]
    slider_bg: |
      [[[
        if(!(variables._mode === 'slider')) return null;

        const params = {
          slider_track: variables.slider_track,
          card: variables.card,

          _vertical: variables._vertical,
          entity_color: variables.__parse_color(variables.entity_color,'hex',this),
          entity_match_slider_start: variables.entity_match_slider_start,
          entity_match_slider_end: variables.entity_match_slider_end,
        };
        return variables.get_memoized_svg.call(this,'z_slider_bg_svg')(params);
      ]]]
    locked_bar: |
      [[[
        if(!(variables.slider.locked)) return null;

        const entityState = entity.state;
        const entityType = entity.entity_id.split('.')[0]; // Extract entity type
        const attr = variables.attribute;
        let progress = 0;

        // try to get the attribute value provided by the user
        if(attr) {
          progress = parseFloat(states[entity.entity_id].attributes[attr]) || 0;
        } else {
          switch(entityType) {
            case 'light':
              progress = ((parseFloat(entity.attributes.brightness) / 256) * 100);
              break;
            case 'fan':
              progress = (parseFloat(entity.attributes.percentage));
              break;
            default:
              progress = (parseFloat(entityState));
              break;
          }
        }
        const progressPercentage = ((progress / variables.slider.max) * 100);
        const remainingPercentage = 100 - progressPercentage;
        const isVertical = variables._vertical;
        const borderRadius = variables.slider.border_radius;
        const borderWidth = variables.slider.border_width;
        const borderColor = variables.slider.border_color;
        const maskColor = variables.slider_track.mask_color;
        const calcWidth = `calc(${variables.__get_num_with_unit(variables.card.width)} - ${variables.__get_num_with_unit(variables.card.border.left.size)} - ${variables.__get_num_with_unit(variables.card.border.right.size)} )`;
        const calcHeight = `calc(${variables.__get_num_with_unit(variables.card.height)} - ${variables.__get_num_with_unit(variables.card.border.top.size)} - ${variables.__get_num_with_unit(variables.card.border.bottom.size)} )`;
        const sliderPaddingTop = variables.__get_num_with_unit(variables.slider.padding.top);
        const sliderPaddingLeft = variables.__get_num_with_unit(variables.slider.padding.left);
        const sliderHeight = variables.__get_num_with_unit(variables._slider_thickness);

        // thumb
        const thumbEnabled = (variables.slider.locked && variables._vertical && variables.slider.thumb.enabled) || false;
        const thumbHeight = variables.slider.thumb.height || '12px';
        const thumbColor = variables.slider.thumb.color || 'white';
        const thumbBorderColor = variables.slider.thumb.border.color || 'black';
        const thumbBorderSize = parseInt(variables.slider.thumb.border.size) || '3px';
        const thumbBorderRadius = parseInt(variables.slider.thumb.border.radius) || '50%';

        if (variables._mode === 'gauge') {
          const leftStyle = (variables._gauge_style == 'picard' && isVertical) ? 'unset' : (isVertical ? sliderPaddingTop : sliderPaddingLeft);
          const rightStyle = (variables._gauge_style == 'picard' && isVertical) ? variables.__get_num_with_unit(variables.slider.picard_right) : 'unset';

          let thumbBorderStyle = variables.__get_num_with_unit(thumbBorderSize) + " solid " + thumbBorderColor;

          let thumbLeftStyle =  'calc(-150% - ' + variables.__get_num_with_unit(thumbBorderSize) + ')';

          return `
            <div class="progress-bar" style="
              position: absolute;
              ${isVertical ? 'bottom: 0;' : 'left: 0;'}
              top: ${isVertical ? 'unset' : sliderPaddingTop};
              left: ${leftStyle};
              right: ${rightStyle};
              width: ${isVertical ? sliderHeight : progressPercentage + '%'};
              height: ${isVertical ? progressPercentage + '%' : sliderHeight};
              border-radius: ${borderRadius};
              border: ${borderWidth} solid ${borderColor};
              background-color: ${variables.slider.color};
            ">

              <div class="progress-bar-custom-thumb" style="
                height: ${thumbHeight}px;
                background: ${thumbColor};
                position: absolute;
                width: 400%;
                visibility: ${thumbEnabled ? 'visible' : 'hidden'};
                border: ${thumbBorderStyle};
                left: ${isVertical ? thumbLeftStyle : 'auto'};
                border-radius: ${thumbBorderRadius}%;
                z-index: 2;
                top: -${thumbHeight / 2}px;
              "></div>
            </div>
          `;
        } else if (variables._mode === 'slider') {
          return `
            <div class="slider-background" style="
              position: absolute;
              width: ${calcWidth};
              height: ${calcHeight};
              border-radius: unset !important;
            ">
              <div class="slider-mask" style="
                position: absolute;
                ${isVertical ? 'top: 0;' : 'right: 0;'}
                width: ${isVertical ? '100%' : remainingPercentage + '%'};
                height: ${isVertical ? remainingPercentage + '%' : '100%'};
                border-radius: unset !important;
                background-color: ${maskColor};
              "></div>
            </div>
          `;
        }
      ]]]
    gauge_control:
      card:
        type: custom:my-slider-v2
        entity: '[[[ return variables.entity ]]]'
        mode: '[[[ return variables.slider.mode ]]]'
        vertical: '[[[ return variables._vertical ]]]'
        flipped: false
        inverse: false
        step: '[[[ return variables.slider.step; ]]]'
        min: |
          [[[
          //  if (variables.slider.mode === 'temperature') {
          //    return entity.attributes.min_mired
          //  } else {
              return variables.slider.min;
          //  }
          ]]]
        max: |
          [[[
          //  if (variables.slider.mode === 'temperature') {
          //    return entity.attributes.max_mired
          //  } else {
              return variables.slider.max;
          //  }
          ]]]
        styles:
          card:
            - width: |
                [[[
                    if (variables._z_isPicardMode) {
                        return "100%";
                      }
                    return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " + variables.__get_num_with_unit(variables.card.border.left.size)  + " - " + variables.__get_num_with_unit(variables.card.border.right.size) + ")";
                ]]]
            - background: none
            - border-radius: 0
          progress:
            - background-color: |-
                [[[
                  return variables.slider.color;
                ]]]
            - border: |-
                [[[
                  return variables.slider.border_width + " solid " + variables.slider.border_color;
                ]]]
            - border-radius: '[[[ return variables.slider.border_radius ]]]'
            - height: '[[[ return variables.slider.height ]]]'
            - width: '[[[ return variables.slider.width ]]]'
            - left: |-
                [[[
                  return (variables._z_isPicardMode) ? "" : variables.__get_num_with_unit(variables.slider.padding.left);
                ]]]
          container:
            - border-radius: 0
            - overflow: visible
          track:
            - background: none
            - width: >-
                [[[ return variables._vertical ? variables.slider.width :
                '']]]
            - left: |
                [[[
                  if (variables._vertical && variables._gauge_style != 'picard') {
                    return "calc(" + variables.__get_num_with_unit(variables.gauge.sub_meter.tick_size) + ")"
                  }
                ]]]
            - position: |
                [[[
                  return (variables._z_isPicardMode) ? 'absolute' : 'relative';
                ]]]
            - right: |-
                [[[
                  return (variables._z_isPicardMode) ? variables.__get_num_with_unit(variables.slider.picard_right) : "";
                ]]]
          thumb:
            - visibility: |
                [[[
                  return (variables.slider.thumb.enabled && variables._z_isPicardMode && !(variables.slider.locked)) ? 'visible' : 'hidden'
                ]]]
            - width: |
                [[[
                  return variables._vertical ? '400%' : '';
                ]]]
            - background-color: |
                [[[
                  return variables.slider.thumb.color || 'white';
                ]]]
            - border: |
                [[[
                  let thickness = variables.__get_num_with_unit(variables.slider.thumb.border.size) || '3px'
                  let color = variables.slider.thumb.border.color || 'black';
                  return thickness + " solid " + color;
                ]]]
            - top: |
                [[[
                  return "-" + variables.__get_num_with_unit((variables.slider.thumb.height / 2))
                ]]]
            - left: |
                [[[
                  let thickness = variables.__get_num_with_unit(variables.slider.thumb.border.size) || '3px'
                  return variables._vertical ? 'calc(-150% - ' + thickness + ')' : '';
                ]]]
            - border-radius: |
                [[[
                  return variables.__get_num_with_unit(variables.slider.thumb.border.radius,'%') || '50%';
                ]]]
            - height: |
                [[[
                  return variables.__get_num_with_unit(variables.slider.thumb.height) || '12px';
                ]]]
            - z-index: 2
    slider_track_control:
      card:
        type: custom:my-slider-v2
        entity: '[[[ return variables.entity ]]]'
        mode: '[[[ return variables.slider.mode ]]]'
        vertical: '[[[ return variables._vertical ]]]'
        flipped: true
        inverse: true
        step: '[[[ return variables.slider.step; ]]]'
        min: |
          [[[
              return variables.slider.min;
          ]]]
        max: |
          [[[
              return variables.slider.max;
          ]]]
        styles:
          progress:
            - background-color: '[[[ return variables.slider_track.mask_color; ]]]'
          container:
            - border-radius: 0
          track:
            - background: none
          thumb:
            - background: none
          card:
            - width: >-
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.width) + " - " +
                variables.__get_num_with_unit(variables.card.border.left.size)
                + " - " +
                variables.__get_num_with_unit(variables.card.border.right.size)
                + ")"; ]]]
            - height: >-
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)
                + " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size)
                + ")" ]]]
            - border-radius: unset !important
            - background: none
