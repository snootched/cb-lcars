# MSD v1 Comprehensive Testing Configuration
# Tests all implemented features with comprehensive data and debug visualization

cb-lcars-msd:
  variables:
    card:
      height: 70vw
      color:
        background:
          default: black

  # NEW MSD v1 STRUCTURE - msd at root level
  msd:
    version: 1

    # Add explicit debug configuration to test config-based debug control
    debug:
      enabled: true
      overlays:
        anchors: true
        bounding_boxes: true
        routing: true
        performance: true
      console:
        verbose: true
        timing: true
      hud:
        auto_show: true

    base_svg:
      source: builtin:ncc-1701-a-blue

    view_box: auto

    # FIXED: Test anchor system - use actual coordinates for percentage anchors
    anchors:
      debug_anchor_1: [300, 200]
      debug_anchor_2: [600, 300]
      debug_anchor_3: [480, 600]    # FIXED: 25% of 1920 = 480, 50% of 1200 = 600
      debug_anchor_4: [1440, 300]   # FIXED: 75% of 1920 = 1440, 25% of 1200 = 300
      performance_test: [100, 100]

    # Test data source system
    data_sources:
      test_cpu_temp:
        entity: sensor.bathroom_dial_battery
        window_seconds: 3600
        minEmitMs: 200
        coalesceMs: 100
        maxDelayMs: 500
        emitOnSameValue: false
        history:
          preload: true  # FIXED: Re-enable preload now that entities are pre-loaded
          hours: 2
      test_memory:
        entity: sensor.bedroom_dial_battery
        window_seconds: 1800
        minEmitMs: 500
        history:
          preload: true  # FIXED: Re-enable preload now that entities are pre-loaded

    # Test palette system
    palettes:
      test_palette:
        primary: "var(--lcars-orange)"
        secondary: "var(--lcars-yellow)"
        accent: "var(--lcars-cyan)"

    # Test overlays - use valid anchor references only
    overlays:
      # Text overlays
      - id: title_overlay
        type: text
        position: [50, 50]
        style:
          value: "MSD v1 COMPREHENSIVE TEST"
          color: var(--picard-orange)
          font_size: 28
          font_weight: bold

      - id: status_text
        type: text
        position: debug_anchor_1
        style:
          value: "Phase Testing"
          color: var(--lcars-cyan)
          font_size: 16

      # Sparkline overlays with data sources
      - id: cpu_sparkline
        type: sparkline
        position: [100, 150]
        size: [400, 80]
        source: test_cpu_temp
        style:
          color: var(--lcars-yellow)
          width: 2
          markers:
            r: 3
            fill: var(--lcars-yellow)
          label_last:
            decimals: 1
            format: "{v}%"
            offset: [10, -5]
            fill: var(--lcars-orange)

      - id: memory_sparkline
        type: sparkline
        position: [100, 280]
        size: [400, 80]
        source: test_memory
        style:
          color: var(--lcars-cyan)
          width: 2

      # FIXED: Line overlays using only defined anchors (not overlay IDs)
      - id: test_line_1
        type: line
        anchor: debug_anchor_1
        attach_to: debug_anchor_2  # CHANGED: Use defined anchor instead of overlay
        route: auto
        style:
          color: var(--lcars-orange)
          width: 4
          corner_style: round
          corner_radius: 16

      - id: test_line_2
        type: line
        anchor: debug_anchor_2
        attach_to: debug_anchor_3  # CHANGED: Use defined anchor instead of overlay
        route: auto
        style:
          color: var(--lcars-blue)
          width: 3
          corner_style: round
          corner_radius: 12

      - id: test_line_3
        type: line
        anchor: debug_anchor_3
        attach_to: debug_anchor_4
        route: auto
        style:
          color: var(--lcars-purple)
          width: 2

      # FIXED: Test percentage anchors with actual coordinates
      - id: percentage_test
        type: text
        position: debug_anchor_3
        style:
          value: "25% Anchor (480,600)"
          color: var(--lcars-purple)
          font_size: 14

      - id: percentage_test_2
        type: text
        position: debug_anchor_4
        style:
          value: "75% Anchor (1440,300)"
          color: var(--lcars-purple)
          font_size: 14

      # ADDED: Test control overlay - FIXED type name
      - id: control1
        type: control
        card:
          type: custom:cb-lcars-button-card
          config:
            # This is exactly what you would put in a standalone cb-lcars-button-card
            cblcars_card_type: cb-lcars-button-lozenge
            show_label: true
            variables:
              label: LCARS Button
              entity: light.floor_lamp
            tap_action:
              action: toggle
            double_tap_action:
              action: none
            hold_action:
              action: more-info
        position: [1200, 120]
        size: [200, 180]
        z_index: 1000

      # Test standard HA card type
      - id: control2
        type: control
        card:
          type: light  # Test short form mapping to hui-light-card
          config:
            # This is exactly what you would put in a light card
            entity: light.floor_lamp
            name: Light Control
        position: [1200, 320]
        size: [200, 100]

      # Test another custom card type
      - id: control3
        type: control
        card:
          type: custom:mini-graph-card  # Test deferred loading
          config:
            entity: sensor.bathroom_dial_battery
            name: Mini Graph
            show:
              name: true
              icon: true
        position: [1420, 120]
        size: [180, 120]

    # Test rules system
    rules:
      - id: cpu_hot_test
        priority: 10
        when:
          all:
            - entity: sensor.bathroom_dial_battery  # FIXED: Use actual entity
              above: 70
        apply:
          overlays:
            - id: cpu_sparkline
              style:
                color: var(--lcars-red)
            - id: test_line_1
              style:
                color: var(--lcars-red)
                width: 6

  styles:
    custom_fields:
      msd_svg_base:
        - width: 100%
        - height: 100%
        - position: absolute
        - top: 0
        - left: 0
        - z-index: 0
      msd_svg_overlays:
        - width: 100%
        - height: 100%
        - position: absolute
        - top: 0
        - left: 0
        - z-index: 1
      msd_controls:
        - width: 100%
        - height: 100%
        - position: absolute
        - top: 0
        - left: 0
        - z-index: 2
      msd_debug:
        - width: 100%
        - height: 100%
        - position: absolute
        - top: 0
        - left: 0
        - z-index: 100


  custom_fields:
    msd_svg_base: |
      [[[
        // Access MSD config from root level
        const msdConfig = this._config?.msd || this.config?.msd;

        console.group('[MSD v1 Comprehensive Test Debug]');
        console.log('Raw config anchors:', msdConfig.anchors);
        console.log('Debug config:', msdConfig.debug);

        let svgContent = window.cblcars.getSvgContent(msdConfig.base_svg.source);
        if (!svgContent) return `<div style="color:orange;">Loading MSD v1 SVG...</div>`;

        const viewBox = window.cblcars.getSvgViewBox(svgContent);
        const aspect = window.cblcars.getSvgAspectRatio(viewBox);

        // Process anchors with better SVG extraction and logging
        const svgAnchors = window.cblcars.findSvgAnchors(svgContent) || {};
        const userAnchors = msdConfig.anchors || {};

        console.log('Raw SVG anchors found:', Object.keys(svgAnchors).length);
        console.log('User config anchors:', Object.keys(userAnchors));

        const resolvedAnchors = {};
        const [minX, minY, vw, vh] = viewBox;

        // First, add all SVG anchors
        for (const [name, pos] of Object.entries(svgAnchors)) {
          resolvedAnchors[name] = pos;
        }

        // Then process and add user anchors (with percentage resolution)
        for (const [name, pos] of Object.entries(userAnchors)) {
          if (Array.isArray(pos) && pos.length === 2) {
            let [x, y] = pos;
            if (typeof x === 'string' && x.endsWith('%')) {
              x = minX + (parseFloat(x) / 100) * vw;
            }
            if (typeof y === 'string' && y.endsWith('%')) {
              y = minY + (parseFloat(y) / 100) * vh;
            }
            resolvedAnchors[name] = [Number(x), Number(y)];
          } else {
            resolvedAnchors[name] = pos;
          }
        }

        // Store resolved anchors globally so pipeline can access them
        this._msdViewBox = viewBox;
        this._msdAnchors = resolvedAnchors;
        window._msdTestAnchors = resolvedAnchors;

        console.log('Final resolved anchors:', Object.keys(resolvedAnchors).length);
        console.groupEnd();

        return `<div id="msd-v1-comprehensive-wrapper" style="width:100%;height:100%;border:2px solid cyan;position:relative;aspect-ratio:${aspect};">${svgContent}</div>`;
      ]]]

    msd_svg_overlays: |
      [[[
        console.log('[MSD v1 Comprehensive] Overlay field evaluated - letting pipeline handle rendering');
        return '<!-- MSD v1 Pipeline Will Handle Overlay Rendering -->';
      ]]]

    msd_controls: |
      [[[
        try {
          if (!this._msdV1ComprehensiveBoot) {
            // Check if MSD v1 system is loaded
            if (typeof window.__msdDebug === 'undefined') {
              console.error('[MSD v1 Comprehensive] window.__msdDebug not found');
              return `<div style="color:red;padding:10px;">MSD v1 system not loaded</div>`;
            }

            if (!window.__msdDebug.initMsdPipeline) {
              console.error('[MSD v1 Comprehensive] initMsdPipeline not found');
              return `<div style="color:red;padding:10px;">initMsdPipeline not available</div>`;
            }

            this._msdV1ComprehensiveBoot = true;
            const msdConfig = this._config?.msd || this.config?.msd;

            // ADDED: Log raw overlays before pipeline processing
            console.log('[MSD v1 Comprehensive] Raw overlays before pipeline:', msdConfig.overlays?.map(o => ({ id: o.id, type: o.type })));

            // ADDED: deep-clone raw overlays for control recovery
            if (msdConfig?.overlays) {
              try {
                window._msdRawOverlays = msdConfig.overlays.map(o => JSON.parse(JSON.stringify(o)));
                console.log('[MSD v1 Comprehensive] Cached raw overlays for controls recovery:', window._msdRawOverlays.filter(o => o.type === 'control').map(o => o.id));
              } catch(e) {
                console.warn('[MSD v1 Comprehensive] Failed to cache raw overlays', e);
              }
            }

            // RESOLVED: define mount properly (wrapper or shadowRoot)
            const resolveMount = (attempt = 0) => {
              const baseWrapper = this.shadowRoot?.getElementById('msd-v1-comprehensive-wrapper');
              const mount = baseWrapper || this.shadowRoot || this;
              if (!mount && attempt < 5) {
                console.warn('[MSD v1 Comprehensive] mount not ready, retrying...', attempt);
                setTimeout(() => resolveMount(attempt + 1), 30 * (attempt + 1));
                return;
              }
              if (!mount) {
                console.error('[MSD v1 Comprehensive] mount could not be resolved');
                return;
              }

              // Use pre-processed anchors
              const enhancedConfig = { ...msdConfig };
              if (window._msdTestAnchors && Object.keys(window._msdTestAnchors).length > 5) {
                enhancedConfig.anchors = window._msdTestAnchors;
              }

              console.log('[MSD v1 Comprehensive] Initializing pipeline with debug config:', enhancedConfig.debug);
              const realHass = this.___hass || hass;

              window.__msdDebug.initMsdPipeline(enhancedConfig, mount, realHass).then(pipeline => {
                const resolvedModel = pipeline.getResolvedModel?.();
                const pipelineAnchors = resolvedModel?.anchors || {};

                // ADDED: Debug resolved model overlays
                console.log('[MSD v1 Comprehensive] Resolved model overlays:', resolvedModel?.overlays?.map(o => ({ id: o.id, type: o.type })));
                const controlOverlays = (resolvedModel?.overlays || []).filter(o => o.type === 'control');
                console.log('[MSD v1 Comprehensive] Control overlays found in resolved model:', controlOverlays.map(o => o.id));

                const stats = {
                  enabled: pipeline.enabled,
                  overlayCount: resolvedModel?.overlays?.length || 0,
                  anchorCount: Object.keys(pipelineAnchors).length,
                  dataSourceCount: Object.keys(msdConfig.data_sources || {}).length,
                  ruleCount: (msdConfig.rules || []).length,
                  errors: pipeline.errors?.length || 0,
                  controlOverlayCount: controlOverlays.length
                };

                console.group('[MSD v1 Comprehensive] Pipeline Started Successfully');
                console.table(stats);

                if (pipeline.errors?.length) {
                  console.error('Pipeline Errors:', pipeline.errors);
                } else {
                  console.log('✅ All systems operational');
                }
                console.groupEnd();

                // ENHANCED: trigger control overlay rendering with better debugging
                try {
                  if (controlOverlays.length) {
                    console.group('[MSD v1 Comprehensive] Control Overlay Rendering');
                    console.log('Control overlays to render:', controlOverlays.map(c => ({ id: c.id, hasCard: !!c.card })));

                    // Check for controls renderer
                    const renderer = pipeline.controlsRenderer || window._msdControlsRenderer;
                    console.log('Controls renderer available:', !!renderer, renderer?.constructor?.name);

                    if (renderer?.renderControls) {
                      console.log('Calling renderControls with:', { controlCount: controlOverlays.length, hasResolvedModel: !!resolvedModel });
                      renderer.renderControls(controlOverlays, resolvedModel);
                    } else {
                      console.error('No controls renderer available or missing renderControls method');
                    }
                    console.groupEnd();
                  } else {
                    console.warn('[MSD v1 Comprehensive] No control overlays found to render - check if they were filtered out');
                  }
                } catch(e) {
                  console.error('[MSD v1 Comprehensive] Control overlay render attempt failed', e);
                }
              }).catch(err => {
                console.error('[MSD v1 Comprehensive] Pipeline init failed:', err);
              });
            };

            resolveMount();
          }

        } catch(e) {
          console.error('[MSD v1 Comprehensive] Bootstrap failed:', e);
          return `<div style="color:red;padding:10px;">Bootstrap failed: ${e.message}</div>`;
        }

        const vb = this._msdViewBox || [0,0,1920,1200];
        const aspect = window.cblcars.getSvgAspectRatio(vb);
        return `<div id="msd-controls-host" style="width:100%;height:100%;aspect-ratio:${aspect};pointer-events:auto;"></div>`;
      ]]]
