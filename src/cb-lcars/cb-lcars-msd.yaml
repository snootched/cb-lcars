# MSD v1 Comprehensive Testing Configuration
# Tests all implemented features with comprehensive data and debug visualization

cb-lcars-msd:
  variables:
    card:
      height: 70vw
      color:
        background:
          default: black

  # NEW MSD v1 STRUCTURE - msd at root level
  msd:
    version: 1

    # Add explicit debug configuration to test config-based debug control
    debug:
      enabled: true
      overlays:
        anchors: true
        bounding_boxes: true
        routing: true
        performance: true
      console:
        verbose: true
        timing: true
      hud:
        auto_show: true

    base_svg:
      source: builtin:ncc-1701-a-blue

    view_box: auto

    # FIXED: Test anchor system - use actual coordinates for percentage anchors
    anchors:
      debug_anchor_1: [300, 200]
      debug_anchor_2: [600, 300]
      debug_anchor_3: [480, 600]    # FIXED: 25% of 1920 = 480, 50% of 1200 = 600
      debug_anchor_4: [1440, 300]   # FIXED: 75% of 1920 = 1440, 25% of 1200 = 300
      performance_test: [100, 100]

    # Test data source system
    data_sources:
      test_cpu_temp:
        entity: sensor.bathroom_dial_battery
        window_seconds: 3600
        minEmitMs: 200
        coalesceMs: 100
        maxDelayMs: 500
        emitOnSameValue: false
        history:
          preload: true  # FIXED: Re-enable preload now that entities are pre-loaded
          hours: 2
      test_memory:
        entity: sensor.bedroom_dial_battery
        window_seconds: 1800
        minEmitMs: 500
        history:
          preload: true  # FIXED: Re-enable preload now that entities are pre-loaded

    # Test palette system
    palettes:
      test_palette:
        primary: "var(--lcars-orange)"
        secondary: "var(--lcars-yellow)"
        accent: "var(--lcars-cyan)"

    # Test overlays - use valid anchor references only
    overlays:
      # Text overlays
      - id: title_overlay
        type: text
        position: [50, 50]
        style:
          value: "MSD v1 COMPREHENSIVE TEST"
          color: var(--picard-orange)
          font_size: 28
          font_weight: bold

      - id: status_text
        type: text
        position: debug_anchor_1
        style:
          value: "Phase Testing"
          color: var(--lcars-cyan)
          font_size: 16

      # Sparkline overlays with data sources
      - id: cpu_sparkline
        type: sparkline
        position: [100, 150]
        size: [400, 80]
        source: test_cpu_temp
        style:
          color: var(--lcars-yellow)
          width: 2
          markers:
            r: 3
            fill: var(--lcars-yellow)
          label_last:
            decimals: 1
            format: "{v}%"
            offset: [10, -5]
            fill: var(--lcars-orange)

      - id: memory_sparkline
        type: sparkline
        position: [100, 280]
        size: [400, 80]
        source: test_memory
        style:
          color: var(--lcars-cyan)
          width: 2

      # FIXED: Line overlays using only defined anchors (not overlay IDs)
      - id: test_line_1
        type: line
        anchor: debug_anchor_1
        attach_to: debug_anchor_2  # CHANGED: Use defined anchor instead of overlay
        route: auto
        style:
          color: var(--lcars-orange)
          width: 4
          corner_style: round
          corner_radius: 16

      - id: test_line_2
        type: line
        anchor: debug_anchor_2
        attach_to: debug_anchor_3  # CHANGED: Use defined anchor instead of overlay
        route: auto
        style:
          color: var(--lcars-blue)
          width: 3
          corner_style: round
          corner_radius: 12

      - id: test_line_3
        type: line
        anchor: debug_anchor_3
        attach_to: debug_anchor_4
        route: auto
        style:
          color: var(--lcars-purple)
          width: 2

      # FIXED: Test percentage anchors with actual coordinates
      - id: percentage_test
        type: text
        position: debug_anchor_3
        style:
          value: "25% Anchor (480,600)"
          color: var(--lcars-purple)
          font_size: 14

      - id: percentage_test_2
        type: text
        position: debug_anchor_4
        style:
          value: "75% Anchor (1440,300)"
          color: var(--lcars-purple)
          font_size: 14

      # ADDED: Test control overlay - FIXED type name
      - id: control1
        type: control
        card:
          type: custom:cb-lcars-button-card
          config:
            # This is exactly what you would put in a standalone cb-lcars-button-card
            cblcars_card_type: cb-lcars-button-lozenge
            show_label: true
            variables:
              label: LCARS Button
              entity: light.floor_lamp
            tap_action:
              action: toggle
            double_tap_action:
              action: none
            hold_action:
              action: more-info
        position: [1200, 120]
        size: [200, 180]
        z_index: 1000

      # Test standard HA card type - FIXED configuration
      - id: control2
        type: control
        card:
          type: button  # This will be mapped to hui-button-card internally
          config:
            entity: light.desk
            name: "Desk Light"
            show_name: true
            show_icon: true
            show_state: true
            tap_action:
              action: toggle
            hold_action:
              action: more-info
        position: [1400, 120]
        size: [200, 180]
        z_index: 1000

      # Test another custom card type
      - id: control3
        type: control
        card:
          type: custom:mini-graph-card  # Test deferred loading
          config:
            entity: sensor.bathroom_dial_battery
            name: Mini Graph
            show:
              name: true
              icon: true
        position: [1420, 120]
        size: [180, 120]

    # Test rules system
    rules:
      - id: cpu_hot_test
        priority: 10
        when:
          all:
            - entity: sensor.bathroom_dial_battery  # FIXED: Use actual entity
              above: 70
        apply:
          overlays:
            - id: cpu_sparkline
              style:
                color: var(--lcars-red)
            - id: test_line_1
              style:
                color: var(--lcars-red)
                width: 6

  styles:
    custom_fields:
      msd_comprehensive:
        - width: 100%
        - height: 100%
        - position: absolute
        - top: 0
        - left: 0
        - z-index: 0

  custom_fields:
    msd_comprehensive: |
      [[[
        try {
          if (!this._msdV1ComprehensiveBoot) {
            // Check if MSD v1 system is loaded
            if (typeof window.__msdDebug === 'undefined') {
              console.error('[MSD v1 Comprehensive] window.__msdDebug not found');
              return `<div style="color:red;padding:10px;">MSD v1 system not loaded</div>`;
            }

            if (!window.__msdDebug.initMsdPipeline) {
              console.error('[MSD v1 Comprehensive] initMsdPipeline not found');
              return `<div style="color:red;padding:10px;">initMsdPipeline not available</div>`;
            }

            this._msdV1ComprehensiveBoot = true;
            const msdConfig = this._config?.msd || this.config?.msd;

            // Process SVG and anchors (use let instead of const to avoid conflicts)
            let svgContent = window.cblcars.getSvgContent(msdConfig.base_svg.source);
            if (!svgContent) return `<div style="color:orange;">Loading MSD v1 SVG...</div>`;

            const viewBox = window.cblcars.getSvgViewBox(svgContent);
            const aspect = window.cblcars.getSvgAspectRatio(viewBox);

            // Process anchors
            const svgAnchors = window.cblcars.findSvgAnchors(svgContent) || {};
            const userAnchors = msdConfig.anchors || {};
            const resolvedAnchors = {};
            const [minX, minY, vw, vh] = viewBox;

            // Add SVG anchors
            for (const [name, pos] of Object.entries(svgAnchors)) {
              resolvedAnchors[name] = pos;
            }

            // Add user anchors with percentage resolution
            for (const [name, pos] of Object.entries(userAnchors)) {
              if (Array.isArray(pos) && pos.length === 2) {
                let [x, y] = pos;
                if (typeof x === 'string' && x.endsWith('%')) {
                  x = minX + (parseFloat(x) / 100) * vw;
                }
                if (typeof y === 'string' && y.endsWith('%')) {
                  y = minY + (parseFloat(y) / 100) * vh;
                }
                resolvedAnchors[name] = [Number(x), Number(y)];
              } else {
                resolvedAnchors[name] = pos;
              }
            }

            // Store anchors globally
            this._msdViewBox = viewBox;
            this._msdAnchors = resolvedAnchors;
            window._msdTestAnchors = resolvedAnchors;

            // Cache raw overlays for control recovery
            if (msdConfig?.overlays) {
              try {
                window._msdRawOverlays = msdConfig.overlays.map(o => JSON.parse(JSON.stringify(o)));
                console.log('[MSD v1 Comprehensive] Cached raw overlays for controls recovery:', window._msdRawOverlays.filter(o => o.type === 'control').map(o => o.id));
              } catch(e) {
                console.warn('[MSD v1 Comprehensive] Failed to cache raw overlays', e);
              }
            }

            // Initialize pipeline
            const resolveMount = (attempt = 0) => {
              const baseWrapper = this.shadowRoot?.getElementById('msd-v1-comprehensive-wrapper');
              const mount = baseWrapper || this.shadowRoot || this;
              if (!mount && attempt < 5) {
                console.warn('[MSD v1 Comprehensive] mount not ready, retrying...', attempt);
                setTimeout(() => resolveMount(attempt + 1), 30 * (attempt + 1));
                return;
              }
              if (!mount) {
                console.error('[MSD v1 Comprehensive] mount could not be resolved');
                return;
              }

              const enhancedConfig = { ...msdConfig };
              if (window._msdTestAnchors && Object.keys(window._msdTestAnchors).length > 5) {
                enhancedConfig.anchors = window._msdTestAnchors;
              }

              const realHass = this.___hass || hass;

              window.__msdDebug.initMsdPipeline(enhancedConfig, mount, realHass).then(pipeline => {
                // Store pipeline reference for HASS updates
                this._msdPipeline = pipeline;

                const resolvedModel = pipeline.getResolvedModel?.();
                const controlOverlays = (resolvedModel?.overlays || []).filter(o => o.type === 'control');

                console.log('[MSD v1 Comprehensive] Pipeline initialized successfully');
                console.log('[MSD v1 Comprehensive] Control overlays found:', controlOverlays.map(o => o.id));

                // Trigger control overlay rendering
                if (controlOverlays.length) {
                  const renderer = pipeline.controlsRenderer || window._msdControlsRenderer;
                  if (renderer?.renderControls) {
                    renderer.renderControls(controlOverlays, resolvedModel);
                  }
                }
              }).catch(err => {
                console.error('[MSD v1 Comprehensive] Pipeline init failed:', err);
              });
            };

            // Start pipeline initialization
            setTimeout(() => resolveMount(), 100);

            // SIMPLIFIED: Return single wrapper with layered structure
            return `
              <div id="msd-v1-comprehensive-wrapper" style="
                width: 100%;
                height: 100%;
                position: relative;
                aspect-ratio: ${aspect};
                pointer-events: none;
              ">
                <!-- SVG Base Layer (z-index: 0) -->
                <div style="
                  position: absolute;
                  top: 0; left: 0;
                  width: 100%; height: 100%;
                  z-index: 0;
                  pointer-events: auto;
                ">
                  ${svgContent}
                </div>

                <!-- Controls Layer (z-index: 1000) - managed by MsdControlsRenderer -->
                <div id="msd-controls-host" style="
                  position: absolute;
                  top: 0; left: 0;
                  width: 100%; height: 100%;
                  z-index: 1000;
                  pointer-events: none;
                "></div>
              </div>
            `;
          }

          // Return placeholder if not booted yet
          const vb = this._msdViewBox || [0,0,1920,1200];
          const aspect = window.cblcars.getSvgAspectRatio(vb);
          return `<div style="width:100%;height:100%;aspect-ratio:${aspect};"></div>`;

        } catch(e) {
          console.error('[MSD v1 Comprehensive] Bootstrap failed:', e);
          return `<div style="color:red;padding:10px;">Bootstrap failed: ${e.message}</div>`;
        }
      ]]]
