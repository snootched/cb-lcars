cb-lcars-msd:
  variables:
    card:
      height: 70vw
      color:
        background:
          default: black
    msd:
      base_svg: builtin:ncc-1701-a-blue
      base_svg2: builtin:enterprise-d-shuttlecraft15-anomaly
      data_sources:
        toronto_temp:
          entity: sensor.toronto_temperature
          windowSeconds: 72h
          sampleMs: 150
          history:
            hours: 72
            preload: true
        desk_brightness:
          entity: light.tv
          attribute: brightness
          windowSeconds: 120
          sampleMs: 150
          history:
            hours: 72
            preload: true
      overlays:
        - type: text
          id: br_label
          position: br_label
          value: bridge
          preset: default
          tap_action:
            action: more-info
            entity: light.tv
          hold_action:
            action: call-service
            service: light.toggle
            service_data:
              entity_id: light.tv
          double_tap_action:
            action: url
            url_path: https://example.com
        - type: control
          id: br_button_control
          position:
            - 78%
            - 22%
          size:
            - 15%
            - 10%
          z_index: 32
          card:
            type: button
            entity: light.tv
            name: Bridge
            icon: mdi:lightbulb
            tap_action:
              action: toggle
        - type: text
          id: wc_label_rt
          position: wc_label
          value: warp core
          preset: default
          state_resolver:
            entity: light.desk
            attribute: brightness
            states:
              - map_range:
                  input_range:
                    - 0
                    - 255
                  output_range:
                    - 0
                    - 100
                from: 0
                to: 29
                settings:
                  text:
                    fill: blue
              - map_range:
                  input_range:
                    - 0
                    - 255
                  output_range:
                    - 0
                    - 100
                from: 30
                to: 79
                settings:
                  text:
                    fill: var(--lcars-yellow)
              - map_range:
                  input_range:
                    - 0
                    - 255
                  output_range:
                    - 0
                    - 100
                from: 80
                to: 100
                settings:
                  text:
                    color: red
          realtime:
            source: desk_brightness
            bind:
              - prop: opacity
                map_range:
                  input_range:
                    - 0
                    - 255
                  output_range:
                    - 0.1
                    - 1
        - type: sparkline
          id: tor_temp_trend
          position:
            - 10%
            - 10%
          size:
            - 80%
            - 25%
          source: toronto_temp
          windowSeconds: 48h
          color: var(--lcars-yellow)
          width: 8
          area_fill: rgba(255,255,0,0.2)
          x_mode: index
          extend_to_edges: true
          markers:
            r: 4
            fill: var(--lcars-blue)
            max: 300
          ignore_zero_for_scale: true
          stair_step: false
          smooth: true
          smooth_tension: 0.9
          fade_tail:
            start_opacity: 0
            end_opacity: 1
          animation:
            type: motionpath
            duration: 4000
            easing: easeInOutSine
            loop: true
            tracer:
              r: 6
              fill: var(--lcars-orange)
            trail:
              stroke: var(--lcars-yellow)
              stroke-width: 6
              duration: 4000
              easing: linear
              loop: true
          grid:
            x: 8
            "y": 4
            color: rgba(255,255,255,0.18)
            opacity: 0.9
            width: 2
          label_last:
            decimals: 1
            fill: var(--lcars-yellow)
            font_size: 68
            offset:
              - 8
              - -8
            format: "{v}Â°"
          tracer:
            r: 80
            fill: var(--lcars-red)
        - type: ribbon
          id: door_state_ribbon
          position:
            - 10%
            - 70%
          size:
            - 80%
            - 6%
          source: binary_sensor.desk_sensor_motion
          windowSeconds: 24h
          threshold: 0.5
          on_color: var(--lcars-yellow)
          off_color: rgba(255,255,255,0.08)
          rx: 6
        - type: ribbon
          id: env_ribbons
          position:
            - 10%
            - 78%
          size:
            - 80%
            - 12%
          sources:
            - binary_sensor.garage_open
            - binary_sensor.front_door
            - binary_sensor.kitchen_motion
          windowSeconds: 12h
          threshold: 0.5
          on_color: var(--lcars-yellow)
          off_color: rgba(255,255,255,0.06)
          rx: 4
          lane_gap: 3
        - type: sparkline
          id: tor_temp_live
          position:
            - 10%
            - 40%
          size:
            - 80%
            - 20%
          source: toronto_temp
          windowSeconds: 10m
          color: var(--lcars-yellow)
          width: 5
          area_fill: rgba(255,255,0,0.15)
          markers:
            r: 2
          grid:
            x: 6
            "y": 3
            opacity: 0.35
      presets:
        default:
          line:
            width: 10
            corner_style: bevel
            corner_radius: 50
            stroke: var(--picard-orange)
            animation:
              type: motionpath
              duration2: 1200
              playbackRate2: 1
              playbackEase2: inOut(3)
              loop: true
              alternate: false
              trail:
                stroke: blue
              duration:
                entity_id: light.bed
                attribute: brightness
                input_range:
                  - 0
                  - 255
                output_range:
                  - 8000
                  - 500
              tracer:
                shape: circle
                height: 25
                width: 25
                r: 15
          text:
            font_size: 56
            font_family: antonio
            text_transform: uppercase
            color: var(--picard-moonlight)
  custom_fields:
    msd_svg_base: |
      [[[
        let svgContent = window.cblcars.getSvgContent(variables.msd.base_svg);
        if (!svgContent) {
          return `<div style="width:100%;height:100%;display:flex;align-items:center;justify-content:center;color:gray;">Loading SVG...</div>`;
        }
        const viewBox = window.cblcars.getSvgViewBox(svgContent);
        const svgAnchors = window.cblcars.findSvgAnchors(svgContent) || {};
        const userAnchors = variables.msd.anchors || {};
        const anchorTable = { ...svgAnchors, ...userAnchors };
        variables.msd._viewBox = viewBox;
        variables.msd._anchors = anchorTable;
        const aspect = window.cblcars.getSvgAspectRatio(viewBox);
        // Stable wrapper id for controls and layout
        return `<div id="cblcars-msd-wrapper" style="width:100%;height:100%;display:flex;justify-content:center;align-items:center;position:relative;aspect-ratio:${aspect};">${svgContent}</div>`;
      ]]]
  msd_svg_overlays: |
    [[[
      const timelines = variables.msd?.timelines || {};
      const overlays = variables.msd.overlays || [];

      const { svgMarkup, animationsToRun } = window.cblcars.renderMsdOverlay({
        overlays,
        anchors: variables.msd._anchors,
        styleLayers: variables.msd.presets,
        hass,
        root: this.shadowRoot,
        viewBox: variables.msd._viewBox,
        timelines,
        animations: variables.msd.animations,
        dataSources: variables.msd.data_sources || {}
      });

      const overlayConfigsById = Array.isArray(overlays)
        ? overlays.reduce((acc, o) => { if (o && o.id) acc[o.id] = o; return acc; }, {})
        : {};

      if (!this.__cblcars_postStamp) {
        this.__cblcars_postStamp = true;
        requestAnimationFrame(() => {
          this.__cblcars_postStamp = false;

          try {
            if (Array.isArray(animationsToRun) && animationsToRun.length > 0) {
              animationsToRun.forEach(anim => this._animationScope.animate(anim, this.hass));
            }
          } catch (_) {}

          try {
            if (timelines && Object.keys(timelines).length > 0 && typeof this._rebuildTimelines === 'function') {
              this._rebuildTimelines(timelines, overlayConfigsById, variables.msd.presets || {});
            }
          } catch (_) {}

          // Controls: mount under msd_controls (z-index), but measure against #cblcars-msd-wrapper (aspect)
          try {
            const controls = overlays.filter(o => o && o.type === 'control');
            if (controls.length && window.cblcars.renderMsdControls) {
              window.cblcars.renderMsdControls({
                overlays: controls,
                viewBox: variables.msd._viewBox,
                anchors: variables.msd._anchors,
                root: this.shadowRoot,
                hass,
                hostId: 'cblcars-controls-layer',
                hostParentSelector: '#msd_controls',          // Keep z-order and click layer
                measureSelector: '#cblcars-msd-wrapper'       // Align to aspect-locked box
              });
            }
          } catch (_) {}
        });
      }

      return svgMarkup;
    ]]]
  msd_controls: |
    [[[
      // Nothing to render here; the JS will mount the controls host into this field
      return '';
    ]]]
  styles:
    custom_fields:
      msd_svg_base:
        - width: 100%
        - height: 100%
        - position: absolute
        - top: 0
        - left: 0
        - z-index: 0
      msd_svg_overlays:
        - width: 100%
        - height: 100%
        - position: absolute
        - top: 0
        - left: 0
        - z-index: 1
        - pointer-events: auto
      msd_controls:
        - width: 100%
        - height: 100%
        - position: absolute
        - top: 0
        - left: 0
        - z-index: 2
        - pointer-events: none
