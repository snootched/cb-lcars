cb-lcars-cascade:
  template:
    - cb-lcars-functions
    - cb-lcars-label
  show_label: true
  variables:
    text:
      label:
        font_size: 24
        font_weight: 300
    cascade:
      grid:
        num_cols: null
        gap: 8
        column_width: 60
        num_rows: null
        row_height: 24
      colors:
        text: var(--picard-dark-blue)
        animation_start: var(--picard-blue)
        animation_end: var(--picard-moonlight)
        text_orig: '#000'
        animation_start_orig: '#26f'
        animation_end_orig: '#def'
  label: |
    [[[

      const card_height = (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
      const card_width = (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));

      //console.debug( `${card_height}`);
      //console.debug( `${card_width}`);

      const font_size = variables.__get_num_with_unit(variables.text.label.font_size) || '24px';
      const row_height = variables.__get_num_with_unit(variables.cascade.grid.row_height) || '24px';
      const grid_gap = variables.__get_num_with_unit(variables.cascade.grid.gap) || '8px';
      const column_width = variables.__get_num_with_unit(variables.cascade.grid.column_width) || '80px';
      const text_color = variables.cascade.colors.text || '#000';
      const animation_start_color = variables.cascade.colors.animation_start || '#26f';
      const animation_end_color = variables.cascade.colors.animation_end || '#def';

      const auto_num_cols =  variables.__calculate_grid_cells((parseInt(card_width) - parseInt(grid_gap)),column_width,grid_gap,12);
      //console.debug(`${auto_num_cols}`);

      //console.debug("row_height: ",row_height);
      //console.debug("grid_gap: ",grid_gap);

      //console.debug("card_height - grid_gap: ",(parseInt(card_height) - parseInt(grid_gap)));
      const auto_num_rows =  variables.__calculate_grid_cells((parseInt(card_height) - parseInt(grid_gap)),row_height,grid_gap,8);
      //console.debug(`${auto_num_rows}`);

      const num_rows = variables.cascade.grid.num_rows || auto_num_rows;
      const num_cols = variables.cascade.grid.num_cols || auto_num_cols;

      // Predefined animation delays and durations for a more random feel
      const animationSettings = [
        { duration: 3, delay: 0.1 },
        { duration: 3, delay: 0.2 },
        { duration: 4, delay: 0.3 },
        { duration: 4, delay: 0.4 },
        { duration: 4, delay: 0.5 },
        { duration: 2, delay: 0.6 },
        { duration: 2, delay: 0.7 },
        { duration: 2, delay: 0.8 }
      ];

      // Function to generate random text for cells (digits, floats, or text)
      function getRandomText() {
        const types = ['digit', 'float', 'text'];
        const type = types[Math.floor(Math.random() * types.length)];
        switch (type) {
          case 'digit':
            return Math.floor(Math.random() * 10000).toString().padStart(4, '0');
          case 'float':
            return (Math.random() * 100).toFixed(2);
          case 'text':
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            return chars.charAt(Math.floor(Math.random() * chars.length)) + chars.charAt(Math.floor(Math.random() * chars.length));
          default:
            return '00';
        }
      }

      let rows = '';
      for (let i = 1; i <= num_rows; i++) {
        const { duration, delay } = animationSettings[(i - 1) % animationSettings.length];
        rows += `
          <div class="row-${i} row">
            ${Array.from({ length: num_cols }, (_, j) => `
              <div class="cell dc${j + 1}">${getRandomText()}</div>
            `).join('')}
          </div>
        `;
      }

      return `
        <elt>
          <style>
            @keyframes colorchange {
              0% {color: ${animation_start_color}}
              25% {color: ${animation_start_color}}
              50% {color: ${animation_start_color}}
              75% {color: ${animation_start_color}}
              80% {color: ${text_color}}
              90% {color: ${text_color}}
              100% {color: ${animation_end_color}}
            }
            .cascade-wrapper {
              flex: 1;
              padding-right: 1px;
              display: flex;
              flex-grow: 1;
            }
            .data-cascade {
              font-size: ${font_size};
              line-height: 1;
            }
            ${Array.from({ length: num_rows }, (_, i) => `
              .row-${i + 1} {
                display: grid;
                grid-template-columns: repeat(${num_cols}, ${column_width});
                gap: ${grid_gap};
                color: ${text_color};
                animation: colorchange ${animationSettings[i % animationSettings.length].duration}s infinite;
                animation-delay: ${animationSettings[i % animationSettings.length].delay}s;
                margin-bottom: ${grid_gap}; /* Add spacing between rows */
                height: ${row_height}
              }
            `).join('')}
            .cell {
              text-align: right;
            }
          </style>
          <div class="cascade-wrapper">
            <div class="data-cascade" id="default">
              ${rows}
            </div>
          </div>
        </elt>
      `;
    ]]]

