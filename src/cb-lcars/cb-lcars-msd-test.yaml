type: custom:cb-lcars-base-card
variables:
  msd:
    base_svg: 'builtin:ncc-1701-a-blue'
    presets:
      default:
        text:
          font_size: 18
          font_family: Antonio
          align: center
          color:
            default: var(--primary-text-color)
        line:
          width: 4
          color:
            default: var(--lcars-orange)
          stroke_dasharray: "10,5"
          animation:
            type: march
            duration: 2000
    slots:
      test_callout:
        callout:
          entity: sensor.test_entity
          anchor: warp_core
          preset: default
          text:
            value: "Test Overlay"
            position: warp_core_label
            animation:
              type: blink
              duration: 1200
          line:
            width: 4
            color:
              default: var(--lcars-orange)
            stroke_dasharray: "10,5"
            animation:
              type: march
              duration: 2000
custom_fields:
  msd_svg_base: |
    [[[
      // Use the same logic as your main msd_svg_base field
      let svgContent = '';
      let viewBox = [0, 0, 400, 200];
      let anchorTable = {};
      let svgKey = null;
      if (variables.msd.base_svg && variables.msd.base_svg.startsWith('builtin:')) {
        svgKey = variables.msd.base_svg.replace('builtin:', '');
      }
      svgContent = svgKey && window.cblcars?.msd?.svg_templates?.[svgKey];
      if (!svgContent) {
        return `<div style="width:100%;height:100%;display:flex;align-items:center;justify-content:center;color:gray;">Loading SVG...</div>`;
      }
      const match = svgContent.match(/viewBox="([0-9.\-]+)\s+([0-9.\-]+)\s+([0-9.\-]+)\s+([0-9.\-]+)"/);
      if (match) {
        viewBox = [parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4])];
      }
      // Extract anchors from SVG: <circle id="..."/> and <text id="..."/>
      anchorTable = {};
      if (svgContent) {
        const anchorRegex = /<circle[^>]*\sid="([^"]+)"[^>]*\scx="([^"]+)"[^>]*\scy="([^"]+)"[^>]*>/g;
        let m;
        while ((m = anchorRegex.exec(svgContent)) !== null) {
          anchorTable[m[1]] = [parseFloat(m[2]), parseFloat(m[3])];
        }
        const textAnchorRegex = /<text[^>]*\sid="([^"]+)"[^>]*\sx="([^"]+)"[^>]*\sy="([^"]+)"[^>]*>/g;
        while ((m = textAnchorRegex.exec(svgContent)) !== null) {
          anchorTable[m[1]] = [parseFloat(m[2]), parseFloat(m[3])];
        }
      }
      variables.msd._viewBox = viewBox;
      variables.msd._anchors = anchorTable;
      const aspect = viewBox[2] && viewBox[3] ? (viewBox[2] / viewBox[3]) : 2;
      return `<div style="width:100%;height:100%;display:flex;justify-content:center;align-items:center;position:relative;aspect-ratio:${aspect};">${svgContent}</div>`;
    ]]]
  msd_svg_overlays: |
    [[[
      // Use the new helper (once exposed on window.cblcars)
      return window.cblcars.renderMsdOverlay({
        overlays: (() => {
          // Merge slots/callouts as in your main config
          const slots = variables.msd.slots || {};
          return Object.values(slots).map(slot => slot.callout);
        })(),
        anchors: variables.msd._anchors,
        styleLayers: {defaults: variables.msd.presets?.default},
        hass,
        root: this
      });
    ]]]
styles:
  custom_fields:
    msd_svg_base:
      - width: 100%
      - height: 100%
      - position: absolute
      - top: 0
      - left: 0
      - z-index: 1
    msd_svg_overlays:
      - width: 100%
      - height: 100%
      - position: absolute
      - top: 0
      - left: 0
      - z-index: 1
