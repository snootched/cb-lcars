cb-lcars-animation-pulse-wave:
  show_label: false
  variables:
    enable_resize_observer: true
    animation:
      pulse_wave:
        line_height: 20
        line_width: 3
        line_width_even: 4
        line_angle: 15
        color:
          line_color: black
          start_color: var(--lcars-ui-tertiary)
          end_color: black
  styles:
    label:
      - z-index: 1
    custom_fields:
      animation:
        - display: flex
        - position: absolute
        - align-items: center
  custom_fields:
    animation: |
      [[[

        const card_height = (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
        const card_width = (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));

        const line_height = (variables.animation.pulse_wave.line_height !== undefined ) ? parseInt(variables.animation.pulse_wave.line_height) : 20;
        const line_width = (variables.animation.pulse_wave.line_width !== undefined ) ? parseInt(variables.animation.pulse_wave.line_width) : 3;
        const line_width_even = (variables.animation.pulse_wave.line_width_even !== undefined ) ? parseInt(variables.animation.pulse_wave.line_width_even) : 4;
        const line_color = variables.animation.pulse_wave.color.line_color || '#000';
        const animation_start_color = variables.animation.pulse_wave.color.start_color || 'var(--picard-blue)';
        const animation_end_color = variables.animation.pulse_wave.color.end_color || '#000';

        const line_angle = (variables.animation.pulse_wave.line_angle !== undefined) ? variables.animation.pulse_wave.line_angle : 17;
        let line_transform = variables.animation.pulse_wave.line_transform || `rotate(${line_angle}deg)`

        //console.info(line_transform)
        //console.info("line_width: ",line_width)
        //console.info("line_width_even: ",line_width_even)


        // Calculate the total width of one cycle of the pattern
        const pattern_width = line_width + line_width_even;

        //console.info("pattern_width: ",pattern_width)

        // Calculate the number of lines needed to fill the card width
        const num_lines = variables.animation.pulse_wave.num_lines || Math.ceil(card_width / pattern_width) * 2;

        //console.info("num_lines: ",num_lines)

        // Original heights and their ratios
        const originalHeights = [180, 120, 230, 60, 30];
        const maxOriginalHeight = Math.max(...originalHeights);
        const heightRatios = originalHeights.map(height => height / maxOriginalHeight);

        // Calculate new heights based on card_height
        const newHeights = heightRatios.map(ratio => Math.round(ratio * card_height));

        const animationSettings = [
          { keyframe: 'animateLine2', height: newHeights[0], duration: 1, delay: 0.2 },
          { keyframe: 'animateLine3', height: newHeights[1], duration: 1, delay: 0.3 },
          { keyframe: 'animateLine4', height: newHeights[2], duration: 1, delay: 0.4 },
          { keyframe: 'animateLine5', height: newHeights[3], duration: 1, delay: 0.5 },
          { keyframe: 'animateLine6', height: newHeights[4], duration: 1, delay: 0.6 }
        ];

        let keyframes = '';
        animationSettings.forEach(({ keyframe, height }) => {
          keyframes += `
            @keyframes ${keyframe} {
              0% { height: ${height}px; }
              50% { height: ${height / 2}px; }
              100% { height: ${height}px; }
            }
          `;
        });

        let lines = '';
        for (let i = 1; i <= num_lines; i++) {
          lines += `<div class="line line-${i}"></div>`;
        }

        const nthChildAnimations = [
          'animateLine6 1s 0.2s infinite',
          'animateLine5 1s 0.3s infinite',
          'animateLine3 1s 0.4s infinite',
          'animateLine3 1s 0.5s infinite',
          'animateLine2 1s 0.6s infinite',
          'animateLine2 1s 0.7s infinite',
          'animateLine2 1s 0.8s infinite',
          'animateLine4 1s 0.9s infinite',
          'animateLine4 1s 1s infinite',
          'animateLine2 1s 0.8s infinite',
          'animateLine2 1s 0.7s infinite',
          'animateLine2 1s 0.6s infinite',
          'animateLine3 1s 0.5s infinite',
          'animateLine3 1s 0.4s infinite',
          'animateLine5 1s 0.3s infinite',
          'animateLine6 1s 0.2s infinite',
          'animateLine6 1s 0.2s infinite',
          'animateLine5 1s 0.3s infinite',
          'animateLine3 1s 0.4s infinite',
          'animateLine3 1s 0.5s infinite',
          'animateLine2 1s 0.6s infinite',
          'animateLine2 1s 0.7s infinite',
          'animateLine2 1s 0.8s infinite',
          'animateLine4 1s 0.9s infinite',
          'animateLine4 1s 1s infinite',
          'animateLine2 1s 0.8s infinite',
          'animateLine2 1s 0.7s infinite',
          'animateLine2 1s 0.6s infinite',
          'animateLine3 1s 0.5s infinite',
          'animateLine3 1s 0.4s infinite',
          'animateLine5 1s 0.3s infinite',
          'animateLine6 1s 0.2s infinite'
        ];

        return `
          <elt>
            <style>
              .wrapper {
                flex: 1;
                display: flex;
                flex-grow: 1;
                align-items: center;
              }
              .line {
                height: ${line_height}px;
                width: ${line_width}px;
                background: linear-gradient( ${line_color}, ${animation_start_color}, ${line_color}, ${animation_end_color});
                transform: ${line_transform};
              }
              .line:nth-child(even) {
                width: ${line_width_even}px;
              }
              ${keyframes}
              ${Array.from({ length: num_lines }, (_, i) => `
                .line:nth-child(${i + 1}) { animation: ${nthChildAnimations[i % nthChildAnimations.length]}; }
              `).join('')}
            </style>
            <div class="wrapper">
              ${lines}
            </div>
          </elt>
        `;
      ]]]
