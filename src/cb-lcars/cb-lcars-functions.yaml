cb-lcars-functions:
  variables:
    ___debug: false
    ___debug_hass: false
    ___debug_extras: null
    __cblcarsLog: |
      [[[
        return function styledLog(level, message) {
          let styles = [
              'color: white',
              'padding: 2px 4px',
              'border-radius: 15px'
          ];

          switch (level) {
              case 'info':
                  styles.push('background-color: #37a6d1'); // Blue
                  console.log(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                  break;
              case 'warn':
                  styles.push('background-color: #ff6753'); // Orange
                  console.warn(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                  break;
              case 'error':
                  styles.push('background-color: #ef1d10'); // Red
                  console.error(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                  break;
              case 'debug':
                  if(variables.___debug == true) {
                    styles.push('background-color: #8e44ad'); // Purple
                    console.debug(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                  }
                  break;
              default:
                  styles.push('background-color: #6d748c'); // Gray for unknown levels
                  console.log(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                  break;
            }
        }
      ]]]
    __calculcate_grid_cell_dimension: |
      [[[
        return function calculcate_grid_cell_dimension(cardDimension, gridCells, gridGap, defaultButtonCardDimension) {
          let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
          let grid_cells = gridCells ? parseInt(gridCells) : 0;
          let grid_gap = gridGap ? parseInt(gridGap) : 0;

          //console.debug("... card_dimension: " + card_dimension);
          //console.debug("... grid_cells: " + grid_cells);
          //console.debug("... grid_gap: " + grid_gap);


          // If card_dimension is not defined or is 0, return defaultButtonCardDimension (default or user overrides this)
          if (card_dimension === 0) {
            //console.debug("...returning defaultButtonCardDimension: " + defaultButtonCardDimension);
            return defaultButtonCardDimension;
          }
          // Calculate the button card dimension that would fit the given number of grid cells
          //let button_card_dimension = Math.floor((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);
          let button_card_dimension = ((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);

          //console.debug("...button_card_dimension calulated: " + button_card_dimension);

          return (button_card_dimension +"px");
        }
      ]]]
    __calculate_grid_cells: |
      [[[
          return function calculate_grid_cells(cardDimension, buttonCardDimension, gridGap, defaultGridCells) {
          let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
          let button_card_dimension = buttonCardDimension ? parseInt(buttonCardDimension) : 0;
          let grid_gap = gridGap ? parseInt(gridGap) : 0;

          //console.debug("... card_dimension: " + card_dimension);
          //console.debug("... grid_gap: " + grid_gap);
          //console.debug("... defaultGridCells: " + defaultGridCells);

          // If card_dimension is not defined or is 0, return defaultGridCells (default or user overrides this)
          if (card_dimension === 0) {
            //console.debug("...returning defaultGridCells!");
            return defaultGridCells;
          }
          // Calculate the number of grid cells that would fit
          let grid_dimension = Math.floor((card_dimension + grid_gap) / (button_card_dimension + grid_gap));
          //console.debug("...returing calc. grid_dimension: " + grid_dimension);
          return grid_dimension;
        }
      ]]]
    __deepMerge: |
      [[[
        return function deepMerge(object1, object2) {
          if (Array.isArray(object1) && Array.isArray(object2)) {
            return [...object1, ...object2];
          } else if (typeof object1 === 'object' && typeof object2 === 'object') {
            return Object.entries(object2).reduce((acc, [key, value]) => {
              if (Object.keys(acc).includes(key) && typeof value === 'object') {
                acc = { ...acc, [key]: deepMerge(acc[key], value) };
              } else {
                acc = { ...acc, [key]: value };
              }

              return acc;
            }, { ...object1 });
          } else {
            return object2;
          }
        }
      ]]]
    __get_num_with_unit: |
      [[[
        return function getSizeWithUnit(size, unit = 'px') {
          return isNaN(size) ? size : size + unit;
        }
      ]]]
    __get_random_entity: |
      [[[
          return function get_random_entity(domain) {
            const entityList = Object.keys(hass.states).filter(e => e.startsWith(domain + '.'));

            if (domain === 'light') {
                // Filter entities that are powered on
                const poweredOnLights = entityList.filter(e => hass.states[e].state === 'on');

                if (poweredOnLights.length === 0) {
                    // If no lights are powered on, return a random light entity
                    return entityList[Math.floor(Math.random() * entityList.length)];
                }

                // Sort powered on lights by brightness in descending order
                poweredOnLights.sort((a, b) => {
                    const brightnessA = hass.states[a].attributes.brightness || 0;
                    const brightnessB = hass.states[b].attributes.brightness || 0;
                    return brightnessB - brightnessA;
                });

                // Return the brightest powered on light
                return poweredOnLights[0];
            }

            // For other domains, return a random entity
            return entityList[Math.floor(Math.random() * entityList.length)];
          }
      ]]]
    __get_random_css_color: |
      [[[
          return function get_random_css_color() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
              color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
          }
      ]]]
    __hex_to_rgba: |
      [[[
        return function hex_to_rgba(input, alpha = 1) {

          // Ensure alpha is between 0 and 1, or convert if between 1 and 255
          if (alpha > 1 && alpha <= 255) {
            alpha = alpha / 255;
          } else if (alpha < 0 || alpha > 1) {
            alpha = 1;
          }

          if (input.startsWith('rgba')) {
            // If the input starts with 'rgb', return the input as is
            return input;
          }
          if (input.startsWith('rgb(')) {
            // If the input starts with 'rgb(', add the alpha channel and return
            return input.replace('rgb(', 'rgba(').replace(')', `, ${alpha})`);
          }

          let hex;
          if (input.startsWith('var(--')) {
              // If the input is a CSS variable in the format "var(--color)", extract the color variable
              hex = getComputedStyle(document.documentElement)
                  .getPropertyValue(input.slice(4, -1))
                  .trim();
          } else if (input.startsWith('--')) {
              // If the input is a CSS variable, get its value
              hex = getComputedStyle(document.documentElement)
                  .getPropertyValue(input)
                  .trim();
          } else {
              hex = input;
          }

          let r, g, b, a = alpha;
          if (hex.length === 9) { // #RRGGBBAA
              r = parseInt(hex.slice(1, 3), 16);
              g = parseInt(hex.slice(3, 5), 16);
              b = parseInt(hex.slice(5, 7), 16);
              a = parseInt(hex.slice(7, 9), 16) / 255;
          } else if (hex.length === 7) {  // #RRGGBB
              r = parseInt(hex.slice(1, 3), 16);
              g = parseInt(hex.slice(3, 5), 16);
              b = parseInt(hex.slice(5, 7), 16);
          } else if (hex.length === 4) {  // #RGB
              r = parseInt(hex[1] + hex[1], 16);
              g = parseInt(hex[2] + hex[2], 16);
              b = parseInt(hex[3] + hex[3], 16);
          } else {
              throw new Error(`Invalid HEX color: ${input}`);
          }
          return `rgba(${r}, ${g}, ${b}, ${a})`;
        }
      ]]]
    __parse_color_to_rgb_array: |
      [[[
        // create an element to use for color parsing
        if (!window._cbLcarsColorParser) {
          const el = document.createElement('div');
          el.style.display = 'none';
          document.body.appendChild(el);
          window._cbLcarsColorParser = el;
        }
        const el = window._cbLcarsColorParser;
        return function(color) {
          if (color.startsWith('var(')) {
            el.style.color = color;
            color = getComputedStyle(el).color;
          } else if (color === 'transparent') {
            return [0, 0, 0, 0];
          } else {
            el.style.color = color;
            color = getComputedStyle(el).color;
          }
          const rgba = color.match(/\d+/g).map(Number);
          return rgba.length === 4 ? rgba : rgba.slice(0, 3);
        }
      ]]]
    __extract_color_channel: |
      [[[
        return function extract_color_channel(color, channel) {
          // Convert the channel to lowercase
          channel = channel.toLowerCase();
          // Determine if the input is rgb or rgba
          let isRGBA = color.startsWith('rgba');
          // Split the color string into an array of numbers
          let numbers = color.slice(isRGBA ? 5 : 4, -1).split(',').map(Number);
          // Define the color channels
          let channels = {r: 0, g: 1, b: 2, a: 3};
          // Check if the specified channel exists
          if (channel in channels) {
            // If the input is rgb and the channel is 'a', return undefined
            if (!isRGBA && channel === 'a') {
              return undefined;
            }
            // Return the decimal value of the specified color channel
            return numbers[channels[channel]];
          } else {
            throw new Error('Invalid color channel. Please specify "r", "g", "b", or "a".');
          }
        }
      ]]]
    __interpolated_rgb: |
      [[[
        return function interpolated_rgb(start_rgb, end_rgb, step, total_steps) {

          let start_r = variables.__extract_color_channel(start_rgb, 'r');
          let start_g = variables.__extract_color_channel(start_rgb, 'g');
          let start_b = variables.__extract_color_channel(start_rgb, 'b');

          let end_r = variables.__extract_color_channel(end_rgb, 'r');
          let end_g = variables.__extract_color_channel(end_rgb, 'g');
          let end_b = variables.__extract_color_channel(end_rgb, 'b');

          let interpolated_r = Math.round(start_r + step * (end_r - start_r) / total_steps);
          let interpolated_g = Math.round(start_g + step * (end_g - start_g) / total_steps);
          let interpolated_b = Math.round(start_b + step * (end_b - start_b) / total_steps);
          //console.log("in function r="+interpolated_r + ",g=" +interpolated_g+ ",b=" + interpolated_b);
          return `rgb(${interpolated_r}, ${interpolated_g}, ${interpolated_b})`;
        }
      ]]]
  custom_fields:
    debugger: |
      [[[
        if (!variables.___debug) return

        const o = {
          variables: variables,
          entity: entity ? entity : {},
          bc: this
        }

        if (variables.___debug_hass) {
          o.hass = hass
        }

        if (variables.___debug_extras) {
          o.extras = variables.___debug_extras
        }

        variables.__cblcarsLog("debug", o)
      ]]]
  styles:
    custom_fields:
      debugger:
        - height: 0
        - width: 0
        - visibility: hidden
