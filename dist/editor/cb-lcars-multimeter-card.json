{
  "tabs": [
    {
      "label": "LCARS",
      "content": [
        {
          "type": "Section",
          "label": "LCARS Options",
          "outlined": true,
          "leftChevron": false,
          "expanded": true,
          "headerLevel": 4,
          "icon": "mdi:select-color",
          "rows": [
            {
              "controls": [
                {
                  "label": "Slider Control Mode",
                  "configValue": "variables._mode",
                  "required": true,
                  "type": "Selector",
                  "selector": {
                    "select": {
                      "mode": "dropdowm",
                      "options": [
                        {
                          "value": "gauge",
                          "label": "Gauge"
                        },
                        {
                          "value": "slider",
                          "label": "Slider"
                        }
                      ]
                    }
                  }
                },
                {
                  "label": "Orientation",
                  "helper": "Adjust the dimensions of the card in the 'Layout' tab to the desired aspect ratio.",
                  "configValue": "variables._vertical",
                  "required": true,
                  "type": "Selector",
                  "selector": {
                    "select": {
                      "options": [
                        {
                          "value": false,
                          "label": "Horizontal"
                        },
                        {
                          "value": true,
                          "label": "Vertical"
                        }
                      ]
                    }
                  }
                },
                {
                  "type": "Message",
                  "alertType": "info",
                  "message": "If changing the presets after customizing settings - you may need to manually remove/reset those variables in yaml code editor to correctly reset the card."
                }
              ]
            }
          ]
        },
        {
          "type": "ControlRow",
          "controls": [
            {
              "label": "Show Advanced Settings",
              "configValue": "show_advanced",
              "disabled": false,
              "type": "Selector",
              "selector": {
                "boolean": null
              }
            }
          ]
        },
        {
          "type": "Section",
          "label": "Entity Options",
          "outlined": true,
          "leftChevron": false,
          "expanded": true,
          "headerLevel": 4,
          "noCollapse": true,
          "icon": "mdi:devices",
          "rows": [
            {
              "controls": [
                {
                  "type": "Message",
                  "visibilityCondition": "this._config.variables.entity && !['light','input_number','number','media_player','cover','fan','switch','input_boolean','lock'].includes(this._config.variables.entity.split('.')[0])",
                  "alertType": "warning",
                  "message": "Slider control functionality is disabled for unsupported entity types.  The sliders for these entities will be in display-only mode."
                },
                {
                  "label": "Entity",
                  "configValue": "variables.entity",
                  "required": true,
                  "type": "Selector",
                  "selector": {
                    "entity": null
                  }
                },
                {
                  "type": "Message",
                  "visibilityCondition": "this._config.variables.entity && !['light','input_number','number','media_player','cover','fan','switch','input_boolean','lock'].includes(this._config.variables.entity.split('.')[0])",
                  "alertType": "info",
                  "message": "You can try the 'Attribute' selector to select a specific attribute of the entity to display.  The list of attributes has been filtered down to those that can parse to a number.  If not selected, the card will use the state of the entity."
                },
                {
                  "label": "Attribute [optional]",
                  "configValue": "variables.attribute",
                  "visibilityCondition": "this._config?.variables?.entity",
                  "type": "Selector",
                  "selector": {
                    "select": {
                      "mode": "dropdown",
                      "optionsCondition": "(() => {\n  const entityId = this._config?.variables?.entity;\n  const hass = this._hass || this.hass;\n  if (!entityId || !hass?.states?.[entityId]) {\n    return [];\n  }\n  const entity = hass.states[entityId];\n  if (!entity.attributes || typeof entity.attributes !== \"object\") {\n    return [];\n  }\n  return Object.entries(entity.attributes)\n    .filter(([_, value]) =>\n      (typeof value === \"number\" && isFinite(value)) ||\n      (typeof value === \"string\" && !isNaN(parseFloat(value)) && isFinite(parseFloat(value)))\n    )\n  .map(([key]) => ({\n        value: key,\n        label: key\n      }));\n})()\n"
                    }
                  }
                },
                {
                  "label": "Light Control Mode",
                  "configValue": "variables._slider_mode",
                  "visibilityCondition": "this._config.variables.entity?.split?.('.')[0] === 'light'",
                  "required": true,
                  "type": "Selector",
                  "selector": {
                    "select": {
                      "mode": "dropdowm",
                      "options": [
                        {
                          "value": "brightness",
                          "label": "Brightness"
                        },
                        {
                          "value": "temperature",
                          "label": "Temperature"
                        },
                        {
                          "value": "saturation",
                          "label": "Saturation"
                        },
                        {
                          "value": "hue",
                          "label": "Hue"
                        }
                      ]
                    }
                  }
                },
                {
                  "label": "Cover Control Mode",
                  "configValue": "variables._slider_mode",
                  "visibilityCondition": "this._config.variables.entity?.split?.('.')[0] === 'cover'",
                  "required": true,
                  "type": "Selector",
                  "selector": {
                    "select": {
                      "mode": "dropdowm",
                      "options": [
                        {
                          "value": "position",
                          "label": "Position"
                        },
                        {
                          "value": "tilt",
                          "label": "Tilt"
                        }
                      ]
                    }
                  }
                },
                {
                  "label": "Media Player Control Mode",
                  "configValue": "variables._slider_mode",
                  "visibilityCondition": "this._config.variables.entity?.split?.('.')[0] === 'media_player'",
                  "required": true,
                  "type": "Selector",
                  "selector": {
                    "select": {
                      "mode": "dropdowm",
                      "options": [
                        {
                          "value": "volume",
                          "label": "Volume"
                        },
                        {
                          "value": "seekbar",
                          "label": "Seekbar"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "type": "Section",
              "label": "Actions",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:gesture-double-tap",
              "noCollapse": false,
              "rows": [
                {
                  "type": "Section",
                  "label": "Tap Action",
                  "icon": "mdi:gesture-tap",
                  "outline": true,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "label": "Tap Action",
                          "configValue": "tap_action",
                          "type": "Selector",
                          "selector": {
                            "ui_action": null
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Double-Tap Action",
                  "icon": "mdi:gesture-double-tap",
                  "outline": true,
                  "rows": [
                    {
                      "controls": [
                        {
                          "label": "Double-tap Action",
                          "configValue": "double_tap_action",
                          "type": "Selector",
                          "selector": {
                            "ui_action": null
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Hold Action",
                  "icon": "mdi:gesture-tap-hold",
                  "outline": true,
                  "rows": [
                    {
                      "controls": [
                        {
                          "label": "Hold Action",
                          "configValue": "hold_action",
                          "type": "Selector",
                          "selector": {
                            "ui_action": null
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "label": "LCARS Border",
      "content": [
        {
          "type": "Section",
          "label": "LCARS Border",
          "outlined": true,
          "leftChevron": false,
          "headerLevel": 4,
          "expanded": true,
          "noCollapse": true,
          "icon": "mdi:button-pointer",
          "rows": [
            {
              "type": "ControlRow",
              "controls": [
                {
                  "label": "Match Entity Colour",
                  "configValue": "variables.entity_match_header",
                  "type": "Selector",
                  "selector": {
                    "boolean": null
                  }
                }
              ]
            },
            {
              "type": "Section",
              "label": "Card Size",
              "secondary": "[Advanced]",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:resize",
              "noCollapse": false,
              "expanded": false,
              "visibilityCondition": "this._config.show_advanced === true",
              "rows": [
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "label": "Height",
                      "configValue": "variables.card.height",
                      "helper": "Sets static height of the card",
                      "disabled": false,
                      "type": "Selector",
                      "selector": {
                        "text": null
                      }
                    },
                    {
                      "label": "Width",
                      "configValue": "variables.card.width",
                      "helper": "Sets static width of the card",
                      "disabled": false,
                      "type": "Selector",
                      "selector": {
                        "text": null
                      }
                    },
                    {
                      "label": "Minimum Height",
                      "configValue": "variables.card.min_height",
                      "helper": "Sets minimum height of the card",
                      "disabled": false,
                      "type": "Selector",
                      "selector": {
                        "text": null
                      }
                    },
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "Enable/Disable helper that watches for resize events and adjusts card size accordingly.  Only needed for some cards.  Disable if there are undesired effects like infinite resizing loops."
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "label": "Auto Resize Helper",
                      "helper": "Enable Resize Observer for dynamic card resizing",
                      "configValue": "enable_resize_observer",
                      "disabled": false,
                      "type": "Selector",
                      "selector": {
                        "boolean": null
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Borders",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:border-style",
              "rows": [
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "Left Border Size",
                      "helper": "The width of the left side of LCARS",
                      "configValue": "variables.card.border.left.size",
                      "disabled": false,
                      "required": true,
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 300,
                          "step": 1,
                          "mode": "slider",
                          "unit_of_measurement": "px",
                          "slider_ticks": false
                        }
                      }
                    },
                    {
                      "label": "Top Border Size",
                      "helper": "The height of the top side of LCARS",
                      "configValue": "variables.card.border.top.size",
                      "disabled": false,
                      "required": true,
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 200,
                          "step": 1,
                          "mode": "slider",
                          "unit_of_measurement": "px",
                          "slider_ticks": false
                        }
                      }
                    },
                    {
                      "label": "Right Border Size",
                      "helper": "The width of the right side of LCARS",
                      "configValue": "variables.card.border.right.size",
                      "disabled": false,
                      "required": true,
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 300,
                          "step": 1,
                          "mode": "slider",
                          "unit_of_measurement": "px",
                          "slider_ticks": false
                        }
                      }
                    },
                    {
                      "label": "Bottom Border Size",
                      "helper": "The height of the bottom side of LCARS",
                      "configValue": "variables.card.border.bottom.size",
                      "disabled": false,
                      "required": true,
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 200,
                          "step": 1,
                          "mode": "slider",
                          "unit_of_measurement": "px",
                          "slider_ticks": false
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Inner Border",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:border-style",
                  "visibilityCondition": "this._config.type != 'custom:cb-lcars-multimeter-card'",
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "type": "Selector",
                          "label": "Scaling Factor",
                          "helper": "This values affects the inner radius in relation to the outer radius.",
                          "configValue": "variables.card.border.inner.factor",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 10,
                              "step": 0.5,
                              "mode": "slider",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "type": "Selector",
                          "label": "Inner Border Width",
                          "helper": "The width of the inner border.",
                          "configValue": "variables.card.border.inner.width",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 200,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "px",
                              "slider_ticks": false
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Corners",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:rounded-corner",
              "rows": [
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "Top Left Radius",
                      "helper": "The top left curve of LCARS",
                      "configValue": "variables.card.border.top.left_radius",
                      "disabled": false,
                      "required": true,
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 200,
                          "step": 1,
                          "mode": "slider",
                          "unit_of_measurement": "px",
                          "slider_ticks": false
                        }
                      }
                    },
                    {
                      "label": "Top Right Radius",
                      "helper": "The top right curve of LCARS",
                      "configValue": "variables.card.border.top.right_radius",
                      "disabled": false,
                      "required": true,
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 200,
                          "step": 1,
                          "mode": "slider",
                          "unit_of_measurement": "px",
                          "slider_ticks": false
                        }
                      }
                    },
                    {
                      "label": "Bottom Left Radius",
                      "helper": "The bottom left curve of LCARS",
                      "configValue": "variables.card.border.bottom.left_radius",
                      "disabled": false,
                      "required": true,
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 200,
                          "step": 1,
                          "mode": "slider",
                          "unit_of_measurement": "px",
                          "slider_ticks": false
                        }
                      }
                    },
                    {
                      "label": "Bottom Right Radius",
                      "helper": "The bottom right curve of LCARS",
                      "configValue": "variables.card.border.bottom.right_radius",
                      "disabled": false,
                      "required": true,
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 200,
                          "step": 1,
                          "mode": "slider",
                          "unit_of_measurement": "px",
                          "slider_ticks": false
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Colours",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:select-color",
              "noCollapse": false,
              "rows": [
                {
                  "type": "Section",
                  "label": "Border",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:select-color",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "Section",
                      "label": "Default Colour (no entity/state)",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:select-color",
                      "noCollapse": true,
                      "expanded": true,
                      "rows": [
                        {
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "LCARS Colour",
                              "configValue": "variables.card.color.default",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                }
                              }
                            },
                            {
                              "label": "Custom Colour",
                              "configValue": "variables.card.color.default",
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "color"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "controls": [
                            {
                              "type": "ColorPreview",
                              "configValue": "variables.card.color.default"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "State Colours",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:select-color",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "Section",
                          "label": "Active/Inactive",
                          "secondary": "[state: on/off, open/closed, locked/unlocked]",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Active</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.active",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.active",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.active"
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Inactive</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.inactive",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.inactive",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.inactive"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Section",
                          "label": "Zero/Non-Zero",
                          "secondary": "[state: numeric 0 or not 0]",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State Number Value: Zero</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.zero",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.zero",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.zero"
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State Number Value: Non-Zero</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.non_zero",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.non_zero",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.non_zero"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Section",
                          "label": "HVAC Heat/Cool",
                          "secondary": "[state: heat/cool ]",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Heat</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.hvac_heat",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.hvac_heat",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.hvac_heat"
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Cool</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.hvac_cool",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.hvac_cool",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.hvac_cool"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Section",
                          "label": "Unavailable/Unknown",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Unavailable/Unknown</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.unavailable",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.unavailable",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.unavailable"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Background",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:select-color",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "Section",
                      "label": "Default Colour (no entity/state)",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:select-color",
                      "noCollapse": true,
                      "expanded": true,
                      "rows": [
                        {
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "LCARS Colour",
                              "configValue": "variables.card.color.background.default",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                }
                              }
                            },
                            {
                              "label": "Custom Colour",
                              "configValue": "variables.card.color.background.default",
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "color"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "controls": [
                            {
                              "type": "ColorPreview",
                              "configValue": "variables.card.color.background.default"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "State Colours",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:select-color",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "Section",
                          "label": "Active/Inactive",
                          "secondary": "[state: on/off, open/closed, locked/unlocked]",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Active</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.background.active",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.background.active",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.background.active"
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Inactive</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.background.inactive",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.background.inactive",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.background.inactive"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Section",
                          "label": "Zero/Non-Zero",
                          "secondary": "[state: numeric 0 or not 0]",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State Number Value: Zero</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.background.zero",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.background.zero",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.background.zero"
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State Number Value: Non-Zero</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.background.non_zero",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.background.non_zero",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.background.non_zero"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Section",
                          "label": "HVAC Heat/Cool",
                          "secondary": "[state: heat/cool ]",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Heat</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.background.hvac_heat",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.background.hvac_heat",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.background.hvac_heat"
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Cool</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.background.hvac_cool",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.background.hvac_cool",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.background.hvac_cool"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Section",
                          "label": "Unavailable/Unknown",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "controls": [
                                {
                                  "type": "RawHTML",
                                  "html": "<label>State: Unavailable/Unknown</label>\n"
                                }
                              ]
                            },
                            {
                              "type": "ControlRow",
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.card.color.background.unavailable",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.card.color.background.unavailable",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.card.color.background.unavailable"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Text",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:format-textbox",
              "noCollapse": false,
              "rows": [
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "label": "Show Label",
                      "configValue": "show_label",
                      "type": "Selector",
                      "selector": {
                        "boolean": null
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Label",
                  "visibilityCondition": "this._config.show_label === true",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-textbox",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "label": "Custom Label",
                          "helper": "Text content (basic string - or - get fancy with <elt></elt> elements!",
                          "configValue": "variables.label",
                          "required": false,
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": true,
                              "type": "text"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Font",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:format-textbox",
                      "noCollapse": false,
                      "expanded": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Font Size",
                              "configValue": "variables.text.label.font_size",
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "number"
                                }
                              }
                            },
                            {
                              "label": "Font Weight",
                              "configValue": "variables.text.label.font_weight",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": 100,
                                      "label": "Thin (100)"
                                    },
                                    {
                                      "value": 200,
                                      "label": "Extra Light (200)"
                                    },
                                    {
                                      "value": 300,
                                      "label": "Light (300)"
                                    },
                                    {
                                      "value": 400,
                                      "label": "Normal (400)"
                                    },
                                    {
                                      "value": 500,
                                      "label": "Medium (500)"
                                    },
                                    {
                                      "value": 600,
                                      "label": "Semi Bold (600)"
                                    },
                                    {
                                      "value": 700,
                                      "label": "Bold (700)"
                                    },
                                    {
                                      "value": 800,
                                      "label": "Extra Bold (800)"
                                    },
                                    {
                                      "value": 900,
                                      "label": "Black (900)"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Alignment",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:format-align-left",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Justify",
                              "helper": "Horizonal justification within the container",
                              "configValue": "variables.text.label.justify",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "flex-start",
                                      "label": "Flex Start"
                                    },
                                    {
                                      "value": "flex-end",
                                      "label": "Flex End"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "space-between",
                                      "label": "Space Between"
                                    },
                                    {
                                      "value": "space-around",
                                      "label": "Space Around"
                                    },
                                    {
                                      "value": "space-evenly",
                                      "label": "Space Evenly"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Align Items",
                              "helper": "Vertial alignment within the container",
                              "configValue": "variables.text.label.align_items",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "flex-start",
                                      "label": "Flex Start"
                                    },
                                    {
                                      "value": "flex-end",
                                      "label": "Flex End"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "baseline",
                                      "label": "Baseline"
                                    },
                                    {
                                      "value": "stretch",
                                      "label": "Stretch"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Align",
                              "helper": "text-align property",
                              "configValue": "variables.text.label.align",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "left",
                                      "label": "Left"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "right",
                                      "label": "Right"
                                    },
                                    {
                                      "value": "justify",
                                      "label": "Justify"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Transform",
                              "helper": "CSS transform (eg. 'uppercase')",
                              "configValue": "variables.text.label.transform",
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "text"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Padding",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:move-resize",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Padding Top",
                              "configValue": "variables.text.label.padding.top",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            },
                            {
                              "label": "Padding Right",
                              "configValue": "variables.text.label.padding.right",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            },
                            {
                              "label": "Padding Bottom",
                              "configValue": "variables.text.label.padding.bottom",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            },
                            {
                              "label": "Padding Left",
                              "configValue": "variables.text.label.padding.left",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Colours",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:select-color",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "Section",
                          "label": "Default (no entity/state)",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": true,
                          "expanded": true,
                          "rows": [
                            {
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.text.label.color.default",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.text.label.color.default",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.text.label.color.default"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Section",
                          "label": "State Colours",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "type": "Section",
                              "label": "Active/Inactive",
                              "secondary": "[state: on/off, open/closed, locked/unlocked]",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Active</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.label.color.active",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.label.color.active",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.label.color.active"
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Inactive</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.label.color.inactive",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.label.color.inactive",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.label.color.inactive"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Section",
                              "label": "Zero/Non-Zero",
                              "secondary": "[state: numeric 0 or not 0]",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State Number Value: Zero</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.label.color.zero",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.label.color.zero",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.label.color.zero"
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State Number Value: Non-Zero</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.label.color.non_zero",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.label.color.non_zero",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.label.color.non_zero"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Section",
                              "label": "HVAC Heat/Cool",
                              "secondary": "[state: heat/cool ]",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Heat</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.label.color.hvac_heat",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.label.color.hvac_heat",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.label.color.hvac_heat"
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Cool</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.label.color.hvac_cool",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.label.color.hvac_cool",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.label.color.hvac_cool"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Section",
                              "label": "Unavailable/Unknown",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Unavailable/Unknown</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.label.color.unavailable",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.label.color.unavailable",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.label.color.unavailable"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "label": "Show Name",
                      "configValue": "show_name",
                      "type": "Selector",
                      "selector": {
                        "boolean": null
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Name",
                  "visibilityCondition": "this._config.show_name === true",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-textbox",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "label": "Custom Name",
                          "helper": "Text content (basic string - or - get fancy with <elt></elt> elements!",
                          "configValue": "name",
                          "required": false,
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": true,
                              "type": "text"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Font",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:format-textbox",
                      "noCollapse": false,
                      "expanded": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Font Size",
                              "configValue": "variables.text.name.font_size",
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "number"
                                }
                              }
                            },
                            {
                              "label": "Font Weight",
                              "configValue": "variables.text.name.font_weight",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": 100,
                                      "label": "Thin (100)"
                                    },
                                    {
                                      "value": 200,
                                      "label": "Extra Light (200)"
                                    },
                                    {
                                      "value": 300,
                                      "label": "Light (300)"
                                    },
                                    {
                                      "value": 400,
                                      "label": "Normal (400)"
                                    },
                                    {
                                      "value": 500,
                                      "label": "Medium (500)"
                                    },
                                    {
                                      "value": 600,
                                      "label": "Semi Bold (600)"
                                    },
                                    {
                                      "value": 700,
                                      "label": "Bold (700)"
                                    },
                                    {
                                      "value": 800,
                                      "label": "Extra Bold (800)"
                                    },
                                    {
                                      "value": 900,
                                      "label": "Black (900)"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Alignment",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:format-align-left",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Justify",
                              "helper": "Horizonal justification within the container",
                              "configValue": "variables.text.name.justify",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "flex-start",
                                      "label": "Flex Start"
                                    },
                                    {
                                      "value": "flex-end",
                                      "label": "Flex End"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "space-between",
                                      "label": "Space Between"
                                    },
                                    {
                                      "value": "space-around",
                                      "label": "Space Around"
                                    },
                                    {
                                      "value": "space-evenly",
                                      "label": "Space Evenly"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Align Items",
                              "helper": "Vertial alignment within the container",
                              "configValue": "variables.text.name.align_items",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "flex-start",
                                      "label": "Flex Start"
                                    },
                                    {
                                      "value": "flex-end",
                                      "label": "Flex End"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "baseline",
                                      "label": "Baseline"
                                    },
                                    {
                                      "value": "stretch",
                                      "label": "Stretch"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Align",
                              "helper": "text-align property",
                              "configValue": "variables.text.name.align",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "left",
                                      "label": "Left"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "right",
                                      "label": "Right"
                                    },
                                    {
                                      "value": "justify",
                                      "label": "Justify"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Transform",
                              "helper": "CSS transform (eg. 'uppercase')",
                              "configValue": "variables.text.name.transform",
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "text"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Padding",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:move-resize",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Padding Top",
                              "configValue": "variables.text.name.padding.top",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            },
                            {
                              "label": "Padding Right",
                              "configValue": "variables.text.name.padding.right",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            },
                            {
                              "label": "Padding Bottom",
                              "configValue": "variables.text.name.padding.bottom",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            },
                            {
                              "label": "Padding Left",
                              "configValue": "variables.text.name.padding.left",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Colours",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:select-color",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "Section",
                          "label": "Default (no entity/state)",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": true,
                          "expanded": true,
                          "rows": [
                            {
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.text.name.color.default",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.text.name.color.default",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.text.name.color.default"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Section",
                          "label": "State Colours",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "type": "Section",
                              "label": "Active/Inactive",
                              "secondary": "[state: on/off, open/closed, locked/unlocked]",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Active</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.name.color.active",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.name.color.active",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.name.color.active"
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Inactive</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.name.color.inactive",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.name.color.inactive",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.name.color.inactive"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Section",
                              "label": "Zero/Non-Zero",
                              "secondary": "[state: numeric 0 or not 0]",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State Number Value: Zero</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.name.color.zero",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.name.color.zero",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.name.color.zero"
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State Number Value: Non-Zero</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.name.color.non_zero",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.name.color.non_zero",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.name.color.non_zero"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Section",
                              "label": "HVAC Heat/Cool",
                              "secondary": "[state: heat/cool ]",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Heat</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.name.color.hvac_heat",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.name.color.hvac_heat",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.name.color.hvac_heat"
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Cool</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.name.color.hvac_cool",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.name.color.hvac_cool",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.name.color.hvac_cool"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Section",
                              "label": "Unavailable/Unknown",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Unavailable/Unknown</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.name.color.unavailable",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.name.color.unavailable",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.name.color.unavailable"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "label": "Show State",
                      "configValue": "show_state",
                      "type": "Selector",
                      "selector": {
                        "boolean": null
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "State",
                  "visibilityCondition": "this._config.show_state === true",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-textbox",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "error",
                          "message": "Please select an entity in order to display the state",
                          "visibilityCondition": "this._config.show_state === true && !this._config.variables.entity"
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "State Display",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:format-textbox",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Show Units",
                              "helper": "Show units provided by the entity (if available)",
                              "configValue": "show_units",
                              "type": "Selector",
                              "selector": {
                                "boolean": null
                              }
                            },
                            {
                              "label": "Units",
                              "helper": "Override the displayed unit provided by the entity",
                              "configValue": "units",
                              "required": false,
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "text"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "ControlRow",
                          "controls": [
                            {
                              "label": "Numeric Precision",
                              "helper": "Number of decimal places to display",
                              "configValue": "numeric_precision",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 10,
                                  "step": 1,
                                  "mode": "slider",
                                  "slider_ticks": true
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Font",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:format-textbox",
                      "noCollapse": false,
                      "expanded": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Font Size",
                              "configValue": "variables.text.state.font_size",
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "number"
                                }
                              }
                            },
                            {
                              "label": "Font Weight",
                              "configValue": "variables.text.state.font_weight",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": 100,
                                      "label": "Thin (100)"
                                    },
                                    {
                                      "value": 200,
                                      "label": "Extra Light (200)"
                                    },
                                    {
                                      "value": 300,
                                      "label": "Light (300)"
                                    },
                                    {
                                      "value": 400,
                                      "label": "Normal (400)"
                                    },
                                    {
                                      "value": 500,
                                      "label": "Medium (500)"
                                    },
                                    {
                                      "value": 600,
                                      "label": "Semi Bold (600)"
                                    },
                                    {
                                      "value": 700,
                                      "label": "Bold (700)"
                                    },
                                    {
                                      "value": 800,
                                      "label": "Extra Bold (800)"
                                    },
                                    {
                                      "value": 900,
                                      "label": "Black (900)"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Alignment",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:format-align-left",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Justify",
                              "helper": "Horizonal justification within the container",
                              "configValue": "variables.text.state.justify",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "flex-start",
                                      "label": "Flex Start"
                                    },
                                    {
                                      "value": "flex-end",
                                      "label": "Flex End"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "space-between",
                                      "label": "Space Between"
                                    },
                                    {
                                      "value": "space-around",
                                      "label": "Space Around"
                                    },
                                    {
                                      "value": "space-evenly",
                                      "label": "Space Evenly"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Align Items",
                              "helper": "Vertial alignment within the container",
                              "configValue": "variables.text.state.align_items",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "flex-start",
                                      "label": "Flex Start"
                                    },
                                    {
                                      "value": "flex-end",
                                      "label": "Flex End"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "baseline",
                                      "label": "Baseline"
                                    },
                                    {
                                      "value": "stretch",
                                      "label": "Stretch"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Align",
                              "helper": "text-align property",
                              "configValue": "variables.text.state.align",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "left",
                                      "label": "Left"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "right",
                                      "label": "Right"
                                    },
                                    {
                                      "value": "justify",
                                      "label": "Justify"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Transform",
                              "helper": "CSS transform (eg. 'uppercase')",
                              "configValue": "variables.text.state.transform",
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "text"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Padding",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:move-resize",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Padding Top",
                              "configValue": "variables.text.state.padding.top",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            },
                            {
                              "label": "Padding Right",
                              "configValue": "variables.text.state.padding.right",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            },
                            {
                              "label": "Padding Bottom",
                              "configValue": "variables.text.state.padding.bottom",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            },
                            {
                              "label": "Padding Left",
                              "configValue": "variables.text.state.padding.left",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 200,
                                  "step": 1,
                                  "mode": "slider",
                                  "unit_of_measurement": "px",
                                  "slider_ticks": false
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Colours",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:select-color",
                      "noCollapse": false,
                      "rows": [
                        {
                          "type": "Section",
                          "label": "Default (no entity/state)",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": true,
                          "expanded": true,
                          "rows": [
                            {
                              "cssClass": "form-row two-controls",
                              "controls": [
                                {
                                  "label": "LCARS Colour",
                                  "configValue": "variables.text.state.color.default",
                                  "type": "Selector",
                                  "selector": {
                                    "select": {
                                      "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                    }
                                  }
                                },
                                {
                                  "label": "Custom Colour",
                                  "configValue": "variables.text.state.color.default",
                                  "type": "Selector",
                                  "selector": {
                                    "text": {
                                      "type": "color"
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "controls": [
                                {
                                  "type": "ColorPreview",
                                  "configValue": "variables.text.state.color.default"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "Section",
                          "label": "State Colours",
                          "outlined": true,
                          "leftChevron": false,
                          "headerLevel": 4,
                          "icon": "mdi:select-color",
                          "noCollapse": false,
                          "rows": [
                            {
                              "type": "Section",
                              "label": "Active/Inactive",
                              "secondary": "[state: on/off, open/closed, locked/unlocked]",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Active</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.state.color.active",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.state.color.active",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.state.color.active"
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Inactive</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.state.color.inactive",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.state.color.inactive",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.state.color.inactive"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Section",
                              "label": "Zero/Non-Zero",
                              "secondary": "[state: numeric 0 or not 0]",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State Number Value: Zero</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.state.color.zero",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.state.color.zero",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.state.color.zero"
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State Number Value: Non-Zero</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.state.color.non_zero",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.state.color.non_zero",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.state.color.non_zero"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Section",
                              "label": "HVAC Heat/Cool",
                              "secondary": "[state: heat/cool ]",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Heat</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.state.color.hvac_heat",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.state.color.hvac_heat",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.state.color.hvac_heat"
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Cool</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.state.color.hvac_cool",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.state.color.hvac_cool",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.state.color.hvac_cool"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "Section",
                              "label": "Unavailable/Unknown",
                              "outlined": true,
                              "leftChevron": false,
                              "headerLevel": 4,
                              "icon": "mdi:select-color",
                              "noCollapse": false,
                              "rows": [
                                {
                                  "controls": [
                                    {
                                      "type": "RawHTML",
                                      "html": "<label>State: Unavailable/Unknown</label>\n"
                                    }
                                  ]
                                },
                                {
                                  "type": "ControlRow",
                                  "cssClass": "form-row two-controls",
                                  "controls": [
                                    {
                                      "label": "LCARS Colour",
                                      "configValue": "variables.text.state.color.unavailable",
                                      "type": "Selector",
                                      "selector": {
                                        "select": {
                                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                        }
                                      }
                                    },
                                    {
                                      "label": "Custom Colour",
                                      "configValue": "variables.text.state.color.unavailable",
                                      "type": "Selector",
                                      "selector": {
                                        "text": {
                                          "type": "color"
                                        }
                                      }
                                    }
                                  ]
                                },
                                {
                                  "controls": [
                                    {
                                      "type": "ColorPreview",
                                      "configValue": "variables.text.state.color.unavailable"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Card Effects",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:card-multiple-outline",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "Select one or more effects to apply to the card.  Additional settings for the effects are available in the corresponding tab."
                    },
                    {
                      "label": "Effect Templates",
                      "configValue": "template",
                      "disabled": false,
                      "required": false,
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "mode": "list",
                          "multiple": true,
                          "options": [
                            {
                              "value": "cb-lcars-state-on-blink",
                              "label": "Blink [Active]"
                            },
                            {
                              "value": "cb-lcars-state-off-blink",
                              "label": "Blink [Inactive]"
                            },
                            {
                              "value": "cb-lcars-state-unavailable-blink",
                              "label": "Blink [Unavailable]"
                            },
                            {
                              "value": "cb-lcars-animate-press",
                              "label": "Rippled Press"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Ripple",
                  "visibilityCondition": "this._config.template && this._config.template.includes('cb-lcars-animate-press')",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-list-bulleted",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>Base Colour</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.animations.ripple.ripple_color",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.animations.ripple.ripple_color",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.animations.ripple.ripple_color"
                        },
                        {
                          "label": "Ripple Opacity",
                          "configValue": "variables.animations.ripple.ripple_opacity",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 1,
                              "step": 0.1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "label": "Gauge Mode",
      "visibilityCondition": "this._config.variables._mode === 'gauge'",
      "content": [
        {
          "type": "Section",
          "label": "Gauge Style",
          "outlined": true,
          "leftChevron": false,
          "expanded": true,
          "headerLevel": 4,
          "icon": "mdi:view-grid-compact",
          "rows": [
            {
              "type": "ControlRow",
              "controls": [
                {
                  "label": "Gauge Style",
                  "configValue": "variables._gauge_style",
                  "visibilityCondition": "this._config.variables._vertical === true",
                  "required": true,
                  "type": "Selector",
                  "selector": {
                    "select": {
                      "mode": "dropdown",
                      "options": [
                        {
                          "value": "basic",
                          "label": "Basic"
                        },
                        {
                          "value": "picard",
                          "label": "Picard"
                        }
                      ]
                    }
                  }
                },
                {
                  "type": "Selector",
                  "selector": {
                    "boolean": null
                  },
                  "label": "Show Range(s) on Gauge",
                  "configValue": "variables.gauge.range.enabled"
                },
                {
                  "type": "Selector",
                  "selector": {
                    "object": null
                  },
                  "configValue": "variables.gauge.ranges",
                  "label": "Ranges",
                  "helper": "Array of ranges to display on the gauge.  Each range is defined by a 'from', 'to', and 'color' value."
                }
              ]
            },
            {
              "type": "Section",
              "label": "Range Options [Picard Style]",
              "visibilityCondition": "this._config.variables._vertical === true && this._config.variables._gauge_style === 'picard'",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:view-grid-compact",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "Range: Vertical Width Ratio",
                      "visibilityCondition": "this._config.variables._vertical === true && this._config.variables._gauge_style === 'picard'",
                      "configValue": "variables.gauge.range.width_ratio",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "step": 0.1,
                          "mode": "box"
                        }
                      }
                    },
                    {
                      "label": "Range: Bottom Height Ratio",
                      "visibilityCondition": "this._config.variables._vertical === true && this._config.variables._gauge_style === 'picard'",
                      "configValue": "variables.gauge.range.height_ratio",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "step": 0.1,
                          "mode": "box"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Range Border Colours",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:wallpaper",
                  "noCollapse": false,
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Active</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.range.border.color.active",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.range.border.color.active",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.range.border.color.active"
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Inctive</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.range.border.color.inactive",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.range.border.color.inactive",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.range.border.color.inactive"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "label": "Gauge Options",
          "outlined": true,
          "leftChevron": false,
          "expanded": true,
          "headerLevel": 4,
          "icon": "mdi:view-grid-compact",
          "rows": [
            {
              "type": "ControlRow",
              "cssClass": "form-row two-controls",
              "controls": [
                {
                  "label": "Gauge: Min",
                  "configValue": "variables._min",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "step": 1,
                      "mode": "box"
                    }
                  }
                },
                {
                  "label": "Gauge: Max",
                  "configValue": "variables._max",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "step": 1,
                      "mode": "box"
                    }
                  }
                },
                {
                  "label": "Gauge: Increment",
                  "configValue": "variables._increment",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "min": 1,
                      "step": 1,
                      "mode": "box"
                    }
                  }
                },
                {
                  "label": "Gauge: Width (Picard)",
                  "configValue": "variables.gauge.picard_ratio",
                  "visibilityCondition": "this._config.variables._vertical === true && this._config.variables._gauge_style === 'picard'",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "min": 20,
                      "max": 50,
                      "step": 1,
                      "mode": "box",
                      "unit_of_measurement": "%"
                    }
                  }
                }
              ]
            },
            {
              "type": "ControlRow",
              "cssClass": "form-row two-controls",
              "controls": [
                {
                  "label": "Gauge: Show Units",
                  "configValue": "variables._show_unit_of_measurement",
                  "type": "Selector",
                  "selector": {
                    "boolean": null
                  }
                },
                {
                  "label": "Gauge: Unit",
                  "configValue": "variables._unit_of_measurement",
                  "type": "Selector",
                  "selector": {
                    "text": {
                      "type": "text"
                    }
                  }
                }
              ]
            },
            {
              "controls": [
                {
                  "label": "Gauge: Show Sub-meter Ticks",
                  "configValue": "variables.gauge.sub_meter.show_sub_meter",
                  "type": "Selector",
                  "selector": {
                    "boolean": null
                  }
                }
              ]
            },
            {
              "type": "ControlRow",
              "cssClass": "form-row two-controls",
              "visibilityCondition": "this._config.variables.gauge.sub_meter.show_sub_meter === true",
              "controls": [
                {
                  "label": "Subtick Count",
                  "configValue": "variables.gauge.sub_meter.tick_count",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "min": 0,
                      "max": 25,
                      "mode": "box"
                    }
                  }
                },
                {
                  "label": "Subtick Size",
                  "configValue": "variables.gauge.sub_meter.tick_size",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "min": 1,
                      "mode": "box"
                    }
                  }
                }
              ]
            },
            {
              "controls": [
                {
                  "label": "Gauge: Match Entity Colour",
                  "configValue": "variables.entity_match_gauge",
                  "type": "Selector",
                  "selector": {
                    "boolean": null
                  }
                }
              ]
            },
            {
              "type": "Section",
              "label": "Gauge Colours",
              "visibilityCondition": "this._config.variables.entity_match_gauge === false",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:select-color",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "type": "Section",
                  "label": "Gauge Background",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:wallpaper",
                  "noCollapse": false,
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Active</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.color.background.active",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.color.background.active",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.color.background.active"
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Inctive</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.color.background.inactive",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.color.background.inactive",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.color.background.inactive"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Gauge Text",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-textbox",
                  "noCollapse": false,
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Active</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.label.active",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.label.active",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.label.active"
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Inctive</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.label.inactive",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.label.inactive",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.label.inactive"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Gauge Major Ticks",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:tally-mark-4",
                  "noCollapse": false,
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Active</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.color.active",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.color.active",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.color.active"
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Inctive</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.color.inactive",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.color.inactive",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.color.inactive"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Gauge Minor Ticks",
                  "visibilityCondition": "this._config.variables.gauge.sub_meter.show_sub_meter === true",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:tally-mark-3",
                  "noCollapse": false,
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Active</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.sub_meter.active",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.sub_meter.active",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.sub_meter.active"
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>State: Inctive</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.gauge.sub_meter.inactive",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.gauge.sub_meter.inactive",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.gauge.sub_meter.inactive"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "label": "Gauge Slider Options",
          "outlined": true,
          "leftChevron": false,
          "expanded": true,
          "headerLevel": 4,
          "icon": "mdi:view-grid-compact",
          "rows": [
            {
              "type": "ControlRow",
              "cssClass": "form-row two-controls",
              "controls": [
                {
                  "label": "Slider: Thickness",
                  "configValue": "variables._slider_thickness",
                  "helper": "The thickness of the slider bar.",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "mode": "box"
                    }
                  }
                },
                {
                  "label": "Slider: Step Size",
                  "configValue": "variables._slider_step",
                  "helper": "Slider increment/decrement value.",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "min": 1,
                      "max": 50,
                      "step": 1,
                      "mode": "box"
                    }
                  }
                }
              ]
            },
            {
              "controls": [
                {
                  "label": "Show Thumb Control",
                  "configValue": "variables.slider.thumb.enabled",
                  "type": "Selector",
                  "selector": {
                    "boolean": null
                  }
                }
              ]
            },
            {
              "type": "ControlRow",
              "cssClass": "form-row two-controls",
              "controls": [
                {
                  "label": "Thumb: Size",
                  "configValue": "variables.slider.thumb.height",
                  "visibilityCondition": "this._config.variables.slider?.thumb?.enabled === true",
                  "helper": "The slider's thumb control size.",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "min": 1,
                      "max": 50,
                      "step": 1,
                      "mode": "box",
                      "unit_of_measurement": "px"
                    }
                  }
                },
                {
                  "label": "Thumb: Border Radius",
                  "configValue": "variables.slider.thumb.border.radius",
                  "visibilityCondition": "this._config.variables.slider?.thumb?.enabled === true",
                  "helper": "The curvature of the thumb control.",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "min": 1,
                      "max": 100,
                      "step": 1,
                      "mode": "box",
                      "unit_of_measurement": "%"
                    }
                  }
                }
              ]
            },
            {
              "type": "Section",
              "label": "Colours",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:select-color",
              "noCollapse": false,
              "expanded": true,
              "rows": [
                {
                  "controls": [
                    {
                      "label": "Slider: Match Entity Colour",
                      "configValue": "variables.entity_match_slider",
                      "type": "Selector",
                      "selector": {
                        "boolean": null
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Slider",
                  "visibilityCondition": "this._config.variables.entity_match_slider === false",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:select-color",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.slider.color",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.slider.color",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.slider.color"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Slider Border",
                  "visibilityCondition": "this._config.variables.entity_match_slider === false",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:select-color",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.slider.border_color",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.slider.border_color",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.slider.border_color"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Thumb",
                  "visibilityCondition": "this._config.variables.slider?.thumb?.enabled === true",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:border-none-variant",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.slider.thumb.color",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.slider.thumb.color",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.slider.thumb.color"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Thumb Border",
                  "visibilityCondition": "this._config.variables.slider?.thumb?.enabled === true",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:border-none-variant",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.slider.thumb.border.color",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.slider.thumb.border.color",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.slider.thumb.border.color"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "label": "Slider Mode",
      "visibilityCondition": "this._config.variables._mode === 'slider'",
      "content": [
        {
          "type": "Section",
          "label": "Slider Options",
          "outlined": true,
          "leftChevron": false,
          "expanded": true,
          "headerLevel": 4,
          "icon": "mdi:tune-variant",
          "rows": [
            {
              "type": "ControlRow",
              "cssClass": "form-row two-controls",
              "controls": [
                {
                  "label": "Slider: Min",
                  "configValue": "variables._min",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "step": 1,
                      "mode": "box"
                    }
                  }
                },
                {
                  "label": "Slider: Max",
                  "configValue": "variables._max",
                  "type": "Selector",
                  "selector": {
                    "number": {
                      "step": 1,
                      "mode": "box"
                    }
                  }
                }
              ]
            },
            {
              "type": "Section",
              "label": "Size & Shape",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:shape-square-rounded-plus",
              "noCollapse": false,
              "expanded": true,
              "rows": [
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "Slider: Step Size",
                      "configValue": "variables._slider_step",
                      "helper": "The amount the slider will increment/decrement with each step.",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "max": 5000,
                          "step": 1,
                          "mode": "box"
                        }
                      }
                    },
                    {
                      "label": "Bar Thickness",
                      "configValue": "variables.slider_track.bar_thickness",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "max": 100,
                          "step": 1,
                          "mode": "slider"
                        }
                      }
                    },
                    {
                      "label": "Bar Corner Radius",
                      "configValue": "variables.slider_track.bar_border_radius",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 25,
                          "step": 1,
                          "mode": "slider"
                        }
                      }
                    },
                    {
                      "label": "Bar Gap/Spacing",
                      "configValue": "variables.slider_track.gap",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 50,
                          "step": 1,
                          "mode": "slider"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Colours",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:select-color",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "controls": [
                    {
                      "label": "Gradient: Match [Left/Top] to Entity Colour",
                      "configValue": "variables.entity_match_slider_start",
                      "type": "Selector",
                      "selector": {
                        "boolean": null
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Gradient - Left/Top",
                  "visibilityCondition": "this._config.variables.entity_match_slider_start === false",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:gradient-horizontal",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.slider_track.gradient_start_color",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.slider_track.gradient_start_color",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.slider_track.gradient_start_color"
                        }
                      ]
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "label": "Gradient: Match [Right/Bottom] to Entity Colour",
                      "configValue": "variables.entity_match_slider_end",
                      "type": "Selector",
                      "selector": {
                        "boolean": null
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Slider - Right/Bottom",
                  "visibilityCondition": "this._config.variables.entity_match_slider_end === false",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:gradient-vertical",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.slider_track.gradient_end_color",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.slider_track.gradient_end_color",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.slider_track.gradient_end_color"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "label": "Animations & Effects",
      "content": [
        {
          "type": "Section",
          "label": "Background Animations",
          "outlined": true,
          "leftChevron": false,
          "headerLevel": 4,
          "icon": "mdi:animation-outline",
          "noCollapse": false,
          "expanded": false,
          "rows": [
            {
              "type": "ControlRow",
              "controls": [
                {
                  "type": "Message",
                  "alertType": "info",
                  "message": "Select a background animation to apply to the card (due to limitations, multiple can be selected, but only one is applied).  Additional per-animation settings are avaiable in the corresponding tab."
                },
                {
                  "label": "Background Animations",
                  "configValue": "template",
                  "disabled": false,
                  "required": false,
                  "type": "Selector",
                  "selector": {
                    "select": {
                      "mode": "list",
                      "multiple": true,
                      "options": [
                        {
                          "value": "cb-lcars-animation-alert",
                          "label": "ALERT"
                        },
                        {
                          "value": "cb-lcars-animation-geo-array",
                          "label": "GEO Array"
                        },
                        {
                          "value": "cb-lcars-animation-bg-grid",
                          "label": "GRID"
                        },
                        {
                          "value": "cb-lcars-animation-cascade",
                          "label": "Data Cascade"
                        },
                        {
                          "value": "cb-lcars-animation-pulsewave",
                          "label": "Pulsewave"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "type": "Section",
              "label": "Advanced Settings",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:format-list-bulleted",
              "noCollapse": false,
              "rows": [
                {
                  "type": "Section",
                  "label": "CSS Filters",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:filter",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "Blur",
                          "configValue": "variables.animation.filter.blur",
                          "helper": "Amount of blur to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 25,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "px",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Opacity",
                          "configValue": "variables.animation.filter.opacity",
                          "helper": "Amount of opacity to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Brightness",
                          "configValue": "variables.animation.filter.brightness",
                          "helper": "Amount of brightness to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 200,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Contrast",
                          "configValue": "variables.animation.filter.contrast",
                          "helper": "Amount of contrast to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 200,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Saturate",
                          "configValue": "variables.animation.filter.saturate",
                          "helper": "Amount of saturation to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Hue Rotate",
                          "configValue": "variables.animation.filter.hue_rotate",
                          "helper": "Amount of hue rotation to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 360,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "deg",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Invert",
                          "configValue": "variables.animation.filter.invert",
                          "helper": "Amount of invert to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Grayscale",
                          "configValue": "variables.animation.filter.grayscale",
                          "helper": "Amount of grayscale to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Sepia",
                          "configValue": "variables.animation.filter.sepia",
                          "helper": "Amount of sepia to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%",
                              "slider_ticks": false
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "info",
                          "message": "Advanced: specify custom filter string to apply for the entire animation.  This will override all other filter settings."
                        },
                        {
                          "label": "CSS Filter",
                          "configValue": "variables.animation.filter.advanced",
                          "helper": "CSS `filter` property to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": false
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "CSS Transform",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-align-left",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "Scale",
                          "configValue": "variables.animation.transform.scale",
                          "helper": "Amount of scale to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 10,
                              "step": 0.1,
                              "mode": "slider",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Scale X",
                          "configValue": "variables.animation.transform.scale_x",
                          "helper": "Amount of horizontal scale to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 10,
                              "step": 0.1,
                              "mode": "slider",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Scale Y",
                          "configValue": "variables.animation.transform.scale_y",
                          "helper": "Amount of vertical scale to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 10,
                              "step": 0.1,
                              "mode": "slider",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Scale Z",
                          "configValue": "variables.animation.transform.scale_z",
                          "helper": "Amount of depth scale to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 10,
                              "step": 0.1,
                              "mode": "slider",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Rotate",
                          "configValue": "variables.animation.transform.rotate",
                          "helper": "Amount of rotation to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 360,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "deg",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Rotate X",
                          "configValue": "variables.animation.transform.rotate_x",
                          "helper": "Amount of horizontal rotation to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": -180,
                              "max": 180,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "deg",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Rotate Y",
                          "configValue": "variables.animation.transform.rotate_y",
                          "helper": "Amount of vertical rotation to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": -180,
                              "max": 180,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "deg",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Rotate Z",
                          "configValue": "variables.animation.transform.rotate_z",
                          "helper": "Amount of depth rotation to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": -180,
                              "max": 180,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "deg",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Translate X",
                          "configValue": "variables.animation.transform.translate_x",
                          "helper": "Amount of horizontal translation to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": -100,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Translate Y",
                          "configValue": "variables.animation.transform.translate_y",
                          "helper": "Amount of vertical translation to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": -100,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Skew",
                          "configValue": "variables.animation.transform.skew",
                          "helper": "Amount of skew to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": -45,
                              "max": 45,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "deg",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Perspective",
                          "configValue": "variables.animation.transform.perspective",
                          "helper": "Amount of perspective to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 1000,
                              "step": 25,
                              "mode": "slider",
                              "unit_of_measurement": "px",
                              "slider_ticks": false
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "info",
                          "message": "Advanced: specify custom transform string to apply for the entire animation.  This will override all other transform settings."
                        },
                        {
                          "label": "CSS Transform",
                          "configValue": "variables.animation.transform.advanced",
                          "helper": "CSS `transform` property to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": false
                            }
                          }
                        },
                        {
                          "label": "CSS Transform Origin",
                          "configValue": "variables.animation.transform_origin",
                          "helper": "CSS `transform=origin` property to apply to the animation",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": false
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Animation Container",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:resize",
                  "noCollapse": false,
                  "expanded": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "info",
                          "message": "By default, the animation container will fill the dimensions of the card.  If a custom animation container size is specified, these settings will set the position of container on the card."
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Container Dimensions",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:format-align-left",
                      "noCollapse": false,
                      "expanded": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Height",
                              "configValue": "variables.animation.height",
                              "helper": "Sets static height of the animation container",
                              "disabled": false,
                              "type": "Selector",
                              "selector": {
                                "text": null
                              }
                            },
                            {
                              "label": "Width",
                              "configValue": "variables.animation.width",
                              "helper": "Sets static width of the animation container",
                              "disabled": false,
                              "type": "Selector",
                              "selector": {
                                "text": null
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Container Alignment",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:format-align-left",
                      "noCollapse": false,
                      "expanded": false,
                      "rows": [
                        {
                          "type": "ControlRow",
                          "cssClass": "form-row two-controls",
                          "controls": [
                            {
                              "label": "Justify",
                              "helper": "Horizonal justification on the card",
                              "configValue": "variables.animation.justify_content",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "flex-start",
                                      "label": "Flex Start"
                                    },
                                    {
                                      "value": "flex-end",
                                      "label": "Flex End"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "space-between",
                                      "label": "Space Between"
                                    },
                                    {
                                      "value": "space-around",
                                      "label": "Space Around"
                                    },
                                    {
                                      "value": "space-evenly",
                                      "label": "Space Evenly"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "label": "Align Items",
                              "helper": "Vertial alignment on the card",
                              "configValue": "variables.animation.align_items",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "mode": "dropdown",
                                  "options": [
                                    {
                                      "value": "flex-start",
                                      "label": "Flex Start"
                                    },
                                    {
                                      "value": "flex-end",
                                      "label": "Flex End"
                                    },
                                    {
                                      "value": "center",
                                      "label": "Center"
                                    },
                                    {
                                      "value": "baseline",
                                      "label": "Baseline"
                                    },
                                    {
                                      "value": "stretch",
                                      "label": "Stretch"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "Section",
          "label": "Card Effects",
          "outlined": true,
          "leftChevron": false,
          "headerLevel": 4,
          "icon": "mdi:card-multiple-outline",
          "noCollapse": false,
          "expanded": false,
          "rows": [
            {
              "type": "ControlRow",
              "controls": [
                {
                  "type": "Message",
                  "alertType": "info",
                  "message": "Select one or more effects to apply to the card.  Additional settings for the effects are available in the corresponding tab."
                },
                {
                  "label": "Effect Templates",
                  "configValue": "template",
                  "disabled": false,
                  "required": false,
                  "type": "Selector",
                  "selector": {
                    "select": {
                      "mode": "list",
                      "multiple": true,
                      "options": [
                        {
                          "value": "cb-lcars-state-on-blink",
                          "label": "Blink [Active]"
                        },
                        {
                          "value": "cb-lcars-state-off-blink",
                          "label": "Blink [Inactive]"
                        },
                        {
                          "value": "cb-lcars-state-unavailable-blink",
                          "label": "Blink [Unavailable]"
                        },
                        {
                          "value": "cb-lcars-animate-press",
                          "label": "Rippled Press"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "type": "Section",
              "label": "Ripple",
              "visibilityCondition": "this._config.template && this._config.template.includes('cb-lcars-animate-press')",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:format-list-bulleted",
              "noCollapse": false,
              "rows": [
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Base Colour</label>\n"
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animations.ripple.ripple_color",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animations.ripple.ripple_color",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animations.ripple.ripple_color"
                    },
                    {
                      "label": "Ripple Opacity",
                      "configValue": "variables.animations.ripple.ripple_opacity",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 1,
                          "step": 0.1,
                          "mode": "slider",
                          "slider_ticks": true
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "label": "Data Cascade",
      "visibilityCondition": "this._config.template && this._config.template.includes('cb-lcars-animation-cascade')",
      "content": [
        {
          "type": "Section",
          "label": "Cascade",
          "outlined": true,
          "leftChevron": false,
          "headerLevel": 4,
          "icon": "mdi:matrix",
          "noCollapse": false,
          "expanded": true,
          "rows": [
            {
              "type": "Section",
              "label": "Pattern",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:format-list-bulleted",
              "noCollapse": false,
              "expanded": true,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "Select the pattern of the data cascade animation."
                    },
                    {
                      "label": "Pattern",
                      "configValue": "variables.animation.cascade.pattern",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "mode": "dropdown",
                          "options": [
                            {
                              "value": "default",
                              "label": "Default"
                            },
                            {
                              "value": "niagara",
                              "label": "Niagara"
                            },
                            {
                              "value": "frozen",
                              "label": "Frozen"
                            },
                            {
                              "value": "custom",
                              "label": "Custom"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Custom Pattern",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-list-bulleted",
                  "noCollapse": false,
                  "visibilityCondition": "(this._config?.variables?.animation?.cascade?.pattern ?? '') === 'custom'",
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "warning",
                          "message": "Advanced: Custom animation patterns and keyframes can be defined - please refer to the documentation for more information."
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "label": "Custom Animation Pattern",
                          "configValue": "variables.animation.cascade.custom_pattern",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "label": "Custom Keyframes",
                          "configValue": "variables.animation.cascade.custom_keyframes",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Colours",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:select-color",
              "noCollapse": false,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Base Colour</label>\n"
                    }
                  ]
                },
                {
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animation.cascade.color.text",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animation.cascade.color.text",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animation.cascade.color.text"
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Animation Start Colour</label>\n"
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animation.cascade.color.animation_start",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animation.cascade.color.animation_start",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animation.cascade.color.animation_start"
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Animation End Colour</label>\n"
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animation.cascade.color.animation_end",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animation.cascade.color.animation_end",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animation.cascade.color.animation_end"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Text",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:format-textbox",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "type": "Section",
                  "label": "Size & Weight",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-textbox",
                  "noCollapse": true,
                  "expanded": true,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "Font Size",
                          "configValue": "variables.animation.cascade.text.font_size",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "number"
                            }
                          }
                        },
                        {
                          "label": "Font Weight",
                          "configValue": "variables.animation.cascade.text.font_weight",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "mode": "dropdown",
                              "options": [
                                {
                                  "value": 100,
                                  "label": "Thin (100)"
                                },
                                {
                                  "value": 200,
                                  "label": "Extra Light (200)"
                                },
                                {
                                  "value": 300,
                                  "label": "Light (300)"
                                },
                                {
                                  "value": 400,
                                  "label": "Normal (400)"
                                },
                                {
                                  "value": 500,
                                  "label": "Medium (500)"
                                },
                                {
                                  "value": 600,
                                  "label": "Semi Bold (600)"
                                },
                                {
                                  "value": 700,
                                  "label": "Bold (700)"
                                },
                                {
                                  "value": 800,
                                  "label": "Extra Bold (800)"
                                },
                                {
                                  "value": 900,
                                  "label": "Black (900)"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Grid",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:grid",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "Grid dimensions are calculated automatically by default using the card's size and font size.  Here you can provide specific values to override the automatic settings."
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "# Columns",
                      "configValue": "variables.animation.cascade.grid.num_cols",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "max": 100,
                          "step": 1,
                          "mode": "slider"
                        }
                      }
                    },
                    {
                      "label": "# Rows",
                      "configValue": "variables.animation.cascade.grid.num_rows",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "max": 100,
                          "step": 1,
                          "mode": "slider"
                        }
                      }
                    },
                    {
                      "label": "Column Width",
                      "configValue": "variables.animation.cascade.grid.column_width",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "step": 1
                        }
                      }
                    },
                    {
                      "label": "Row Height",
                      "configValue": "variables.animation.cascade.grid.row_height",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "step": 1
                        }
                      }
                    },
                    {
                      "label": "Grid Gap",
                      "configValue": "variables.animation.cascade.grid.gap",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "step": 1
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "label": "Pulsewave",
      "visibilityCondition": "this._config.template && this._config.template.includes('cb-lcars-animation-pulsewave')",
      "content": [
        {
          "type": "Section",
          "label": "Pulsewave",
          "outlined": true,
          "leftChevron": false,
          "headerLevel": 4,
          "icon": "mdi:sine-wave",
          "noCollapse": false,
          "expanded": true,
          "rows": [
            {
              "type": "Section",
              "label": "Pattern",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:format-list-bulleted",
              "noCollapse": false,
              "expanded": true,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "Select the pattern of the pulsewave animation."
                    },
                    {
                      "label": "Pattern",
                      "configValue": "variables.animation.pulsewave.pattern",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "mode": "dropdown",
                          "options": [
                            {
                              "value": "default",
                              "label": "Default"
                            },
                            {
                              "value": "niagara",
                              "label": "Niagara"
                            },
                            {
                              "value": "sine",
                              "label": "Sine"
                            },
                            {
                              "value": "square",
                              "label": "Square"
                            },
                            {
                              "value": "triangle",
                              "label": "Triangle"
                            },
                            {
                              "value": "sawtooth",
                              "label": "Sawtooth"
                            },
                            {
                              "value": "random",
                              "label": "Random"
                            },
                            {
                              "value": "custom",
                              "label": "Custom"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Custom Pattern",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-list-bulleted",
                  "noCollapse": false,
                  "visibilityCondition": "this._config.variables.animation?.pulsewave && this._config.variables.animation?.pulsewave?.pattern === 'custom'",
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "warning",
                          "message": "Advanced: Custom animation patterns and keyframes can be defined - please refer to the documentation for more information."
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "label": "Custom Animation Pattern",
                          "configValue": "variables.animation.pulsewave.custom_pattern",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "label": "Custom Keyframes",
                          "configValue": "variables.animation.pulsewave.custom_keyframes",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Colours",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:select-color",
              "noCollapse": false,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Base Colour</label>\n"
                    }
                  ]
                },
                {
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animation.pulsewave.color.line_color",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animation.pulsewave.color.line_color",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animation.pulsewave.color.line_color"
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Animation Start Colour</label>\n"
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animation.pulsewave.color.animation_start",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animation.pulsewave.color.animation_start",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animation.pulsewave.color.animation_start"
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Animation End Colour</label>\n"
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animation.pulsewave.color.animation_end",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animation.pulsewave.color.animation_end",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animation.pulsewave.color.animation_end"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Advanced Settings",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:sine-wave",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "By default, the pulsewave pattern will repeat to fill the width of the card, and scale line lengths to the height of the card.  These settings can be overriden to customize the effect."
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Line Settings",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-align-left",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "Angle",
                          "configValue": "variables.animation.pulsewave.line_angle",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 360,
                              "step": 1
                            }
                          }
                        },
                        {
                          "label": "# Lines",
                          "configValue": "variables.animation.pulsewave.num_lines",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "step": 1
                            }
                          }
                        },
                        {
                          "label": "Width [odd lines]",
                          "configValue": "variables.animation.pulsewave.line_width",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 100,
                              "step": 1,
                              "mode": "slider"
                            }
                          }
                        },
                        {
                          "label": "Line Width [even lines]",
                          "configValue": "variables.animation.pulsewave.line_width_even",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 100,
                              "step": 1,
                              "mode": "slider"
                            }
                          }
                        },
                        {
                          "label": "Scale Line Heights",
                          "configValue": "variables.animation.pulsewave.scale_line_heights",
                          "helper": "Scale line heights to fit to the height of the card (otherwise specified heights will be used)",
                          "type": "Selector",
                          "selector": {
                            "boolean": null
                          }
                        },
                        {
                          "label": "Line Heights",
                          "configValue": "variables.animation.pulsewave.line_heights",
                          "helper": "Array of heights to use for each line",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "number",
                              "multiple": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Internal Alignment",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-align-left",
                  "noCollapse": false,
                  "expanded": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "Justify",
                          "helper": "Horizonal justification within the container",
                          "configValue": "variables.animation.pulsewave.justify_content",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "mode": "dropdown",
                              "options": [
                                {
                                  "value": "flex-start",
                                  "label": "Flex Start"
                                },
                                {
                                  "value": "flex-end",
                                  "label": "Flex End"
                                },
                                {
                                  "value": "center",
                                  "label": "Center"
                                },
                                {
                                  "value": "space-between",
                                  "label": "Space Between"
                                },
                                {
                                  "value": "space-around",
                                  "label": "Space Around"
                                },
                                {
                                  "value": "space-evenly",
                                  "label": "Space Evenly"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "label": "Align Items",
                          "helper": "Vertial alignment within the container",
                          "configValue": "variables.animation.pulsewave.align_items",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "mode": "dropdown",
                              "options": [
                                {
                                  "value": "flex-start",
                                  "label": "Flex Start"
                                },
                                {
                                  "value": "flex-end",
                                  "label": "Flex End"
                                },
                                {
                                  "value": "center",
                                  "label": "Center"
                                },
                                {
                                  "value": "baseline",
                                  "label": "Baseline"
                                },
                                {
                                  "value": "stretch",
                                  "label": "Stretch"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "label": "GRID Background",
      "visibilityCondition": "this._config.template && this._config.template.includes('cb-lcars-animation-bg-grid')",
      "content": [
        {
          "type": "Section",
          "label": "GRID Background",
          "outlined": true,
          "leftChevron": false,
          "headerLevel": 4,
          "icon": "mdi:matrix",
          "noCollapse": false,
          "expanded": true,
          "rows": [
            {
              "type": "Section",
              "label": "Global Motion Settings",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:motion-outline",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "These settings control the global motion effect of the background and grid layers together.  You can override these settings independently in the background and grid sections below."
                    },
                    {
                      "label": "Speed (s)",
                      "configValue": "variables.animation.bg_grid.speed",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 0,
                          "max": 60,
                          "step": 0.5,
                          "mode": "slider"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "label": "Motion Effect",
                      "configValue": "variables.animation.bg_grid.effect",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "mode": "radio",
                          "options": [
                            {
                              "value": "scroll",
                              "label": "Scroll"
                            },
                            {
                              "value": "zoom",
                              "label": "Zoom"
                            },
                            {
                              "value": "none",
                              "label": "None"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "label": "Scroll Direction",
                      "configValue": "variables.animation.bg_grid.direction",
                      "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.effect === 'scroll'",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "mode": "dropdown",
                          "options": [
                            {
                              "value": "up",
                              "label": "Up"
                            },
                            {
                              "value": "down",
                              "label": "Down"
                            },
                            {
                              "value": "left",
                              "label": "Left"
                            },
                            {
                              "value": "right",
                              "label": "Right"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Zoom Settings",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:move-resize-variant",
                  "noCollapse": false,
                  "expanded": true,
                  "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.effect === 'zoom'",
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "info",
                          "message": "Each layer will zoom in until the layer is scaled by the factor.  It will fade in and out based on the opacity stops."
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "Zoom Layers",
                          "configValue": "variables.animation.bg_grid.zoom.layers",
                          "helper": "Number of layers to zoom in the background",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 10,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        },
                        {
                          "label": "Scale Size",
                          "configValue": "variables.animation.bg_grid.zoom.scale_to",
                          "helper": "Scale factor of the zoom effect",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 10,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true,
                              "2unit_of_measurement": "x"
                            }
                          }
                        },
                        {
                          "label": "Opacity Fade In",
                          "configValue": "variables.animation.bg_grid.zoom.opacity_fade_in",
                          "helper": "At what percent of the zoom should the opacity fade in",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true,
                              "2unit_of_measurement": "%"
                            }
                          }
                        },
                        {
                          "label": "Opacity Fade Out",
                          "configValue": "variables.animation.bg_grid.zoom.opacity_fade_out",
                          "helper": "At what percent of the zoom should the opacity fade out",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true,
                              "2unit_of_measurement": "%"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Background",
              "icon": "mdi:star-shooting-outline",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "Select the pattern of the background behind the grid."
                    },
                    {
                      "label": "Pattern",
                      "configValue": "variables.animation.bg_grid.background_pattern",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "mode": "dropdown",
                          "options": [
                            {
                              "value": "none",
                              "label": "None"
                            },
                            {
                              "value": "fill",
                              "label": "Fill"
                            },
                            {
                              "value": "stars",
                              "label": "Stars"
                            },
                            {
                              "value": "nebula",
                              "label": "Nebula"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Star Settings",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:star-cog-outline",
                  "noCollapse": false,
                  "expanded": true,
                  "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.background_pattern === 'stars'",
                  "rows": [
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "label": "Star Count",
                          "configValue": "variables.animation.bg_grid.stars.count",
                          "helper": "Number of stars for background",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 500,
                              "step": 1,
                              "mode": "slider"
                            }
                          }
                        },
                        {
                          "label": "Scale Size",
                          "configValue": "variables.animation.bg_grid.background_zoom.scale_to",
                          "helper": "Scale factor of the zoom effect",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 10,
                              "step": 1,
                              "unit_of_measurement": "x",
                              "mode": "slider"
                            }
                          }
                        },
                        {
                          "label": "Minumum Radius",
                          "configValue": "variables.animation.bg_grid.stars.min_radius",
                          "helper": "Minimum radius of the stars",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0.1,
                              "max": 5,
                              "step": 0.1,
                              "mode": "slider",
                              "slider_ticks": true,
                              "unit_of_measurement": "px"
                            }
                          }
                        },
                        {
                          "label": "Maximum Radius",
                          "configValue": "variables.animation.bg_grid.stars.max_radius",
                          "helper": "Maximum radius of the stars",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0.1,
                              "max": 15,
                              "step": 0.1,
                              "mode": "slider",
                              "slider_ticks": true,
                              "unit_of_measurement": "px"
                            }
                          }
                        },
                        {
                          "label": "Minumum Brightness",
                          "configValue": "variables.animation.bg_grid.stars.min_brightness",
                          "helper": "Minimum brightness of the stars",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 1,
                              "step": 0.01,
                              "mode": "slider",
                              "slider_ticks": true,
                              "unit_of_measurement": ""
                            }
                          }
                        },
                        {
                          "label": "Maximum Brightness",
                          "configValue": "variables.animation.bg_grid.stars.max_brightness",
                          "helper": "Maximum brightness of the stars",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 1,
                              "step": 0.01,
                              "mode": "slider",
                              "slider_ticks": true,
                              "unit_of_measurement": ""
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Star Colours",
                      "outlined": false,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:select-color",
                      "noCollapse": true,
                      "expanded": true,
                      "rows": [
                        {
                          "visibilityCondition": "!Array.isArray(this._config.variables?.animation?.bg_grid?.stars?.color)",
                          "controls": [
                            {
                              "type": "Message",
                              "alertType": "info",
                              "message": "Tip: Pick a singular colour below - or for multiple colours, you can provide an array in the YAML: [var(--lcars-blue), '#00ff00', rgba(255, 0, 0, 0.5)]"
                            }
                          ]
                        },
                        {
                          "visibilityCondition": "Array.isArray(this._config.variables?.animation?.bg_grid?.stars?.color)",
                          "controls": [
                            {
                              "type": "Message",
                              "alertType": "warning",
                              "message": "Multiple colours are defined - colour picker disabled.  Please edit the list as text below or in the code editor."
                            }
                          ]
                        },
                        {
                          "cssClass": "form-row two-controls",
                          "visibilityCondition": "!Array.isArray(this._config.variables?.animation?.bg_grid?.stars?.color)",
                          "controls": [
                            {
                              "label": "LCARS Colour",
                              "configValue": "variables.animation.bg_grid.stars.color",
                              "type": "Selector",
                              "selector": {
                                "select": {
                                  "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                                }
                              }
                            },
                            {
                              "label": "Custom Colour",
                              "configValue": "variables.animation.bg_grid.stars.color",
                              "type": "Selector",
                              "selector": {
                                "text": {
                                  "type": "color"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "visibilityCondition": "!Array.isArray(this._config.variables?.animation?.bg_grid?.stars?.color)",
                          "controls": [
                            {
                              "type": "ColorPreview",
                              "configValue": "variables.animation.bg_grid.stars.color"
                            }
                          ]
                        },
                        {
                          "controls": [
                            {
                              "type": "Selector",
                              "configValue": "variables.animation.bg_grid.stars.color",
                              "visibilityCondition": "Array.isArray(this._config.variables?.animation?.bg_grid?.stars?.color)",
                              "selector": {
                                "text": {
                                  "type": "text",
                                  "multiple": true
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Nebula Settings",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:weather-tornado",
                  "noCollapse": false,
                  "expanded": true,
                  "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.background_pattern === 'nebula'",
                  "rows": [
                    {
                      "type": "ControlRow",
                      "controls": [
                        {
                          "label": "Preset",
                          "configValue": "variables.animation.bg_grid.nebula.preset",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "mode": "dropdown",
                              "options": [
                                {
                                  "value": "default",
                                  "label": "Default"
                                },
                                {
                                  "value": "orion",
                                  "label": "[M42] Orion"
                                },
                                {
                                  "value": "crab",
                                  "label": "[M1] Crab"
                                },
                                {
                                  "value": "horsehead",
                                  "label": "[B33] Horsehead"
                                },
                                {
                                  "value": "eagle",
                                  "label": "[M16] Eagle"
                                },
                                {
                                  "value": "pillars_of_creation",
                                  "label": "[M16] Pillars of Creation"
                                },
                                {
                                  "value": "veil",
                                  "label": "[NGC 6960] Veil"
                                },
                                {
                                  "value": "aurora_nexus",
                                  "label": "Aurora Nexus"
                                },
                                {
                                  "value": "cosmic_embers",
                                  "label": "Cosmic Embers"
                                },
                                {
                                  "value": "iridescent_drift",
                                  "label": "Iridescent Drift"
                                },
                                {
                                  "value": "emerald_void",
                                  "label": "Emerald Void"
                                },
                                {
                                  "value": "ethereal_drift",
                                  "label": "Ethereal Drift"
                                },
                                {
                                  "value": "custom",
                                  "label": "Custom"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "label": "Custom Nebula",
                          "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.nebula?.preset === 'custom'",
                          "configValue": "variables.animation.bg_grid.nebula_layers",
                          "helper": "Please see documentation for how to define custom nebula layers",
                          "type": "Selector",
                          "selector": {
                            "object": null
                          }
                        },
                        {
                          "label": "Blur",
                          "configValue": "variables.animation.bg_grid.nebula.blur",
                          "helper": "Softens the nebula for a foggy look.",
                          "type": "Selector",
                          "selector": {
                            "boolean": null
                          }
                        },
                        {
                          "label": "Blur Level",
                          "configValue": "variables.animation.bg_grid.nebula.blur_level",
                          "helper": "Amount of blur to apply to the nebula.  Higher = more blur.",
                          "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.nebula?.blur",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 25,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "px",
                              "slider_ticks": false
                            }
                          }
                        },
                        {
                          "label": "Nebula Effect",
                          "configValue": "variables.animation.bg_grid.nebula.nebula_effect",
                          "helper": "Enable advanced nebula effect adding noise and distortion",
                          "type": "Selector",
                          "selector": {
                            "boolean": null
                          }
                        },
                        {
                          "label": "Turbulance/noise Base Frequency",
                          "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.nebula?.nebula_effect",
                          "configValue": "variables.animation.bg_grid.nebula.base_frequency",
                          "helper": "Controls the size and density of the nebula's noise pattern. Higher = finer.",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 5,
                              "step": 0.1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        },
                        {
                          "label": "Turbulance/Noise Octaves",
                          "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.nebula?.nebula_effect",
                          "configValue": "variables.animation.bg_grid.nebula.octaves",
                          "helper": " Number of noise layers for detail. Higher = more complex nebula.",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 10,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        },
                        {
                          "label": "Turbulance/Noise Seed",
                          "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.nebula?.nebula_effect",
                          "configValue": "variables.animation.bg_grid.nebula.seed",
                          "helper": "Seed for the turbulence effect to randomize the pattern.  Any integer for different looks.",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 1000,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        },
                        {
                          "label": "Displacement Scale",
                          "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.nebula?.nebula_effect",
                          "configValue": "variables.animation.bg_grid.nebula.scale",
                          "helper": "Scale of the displacement effect",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 10,
                              "max": 100,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        },
                        {
                          "label": "Animate Effects",
                          "configValue": "variables.animation.bg_grid.nebula.animate",
                          "helper": "Give the nebula a subtle animated effect",
                          "type": "Selector",
                          "selector": {
                            "boolean": null
                          }
                        },
                        {
                          "label": "Animation Duration (s)",
                          "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.nebula?.animate",
                          "configValue": "variables.animation.bg_grid.nebula.animation_duration",
                          "helper": "Duration (seconds) for the full animation cycle effect.",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 60,
                              "step": 0.5,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Background Motion Settings",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:motion-outline",
                  "noCollapse": false,
                  "expanded": false,
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "info",
                          "message": "These settings control override the global motion effect of the background layers."
                        },
                        {
                          "label": "Speed (s)",
                          "configValue": "variables.animation.bg_grid.background_speed",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 60,
                              "step": 0.5,
                              "mode": "slider"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "label": "Motion Effect",
                          "configValue": "variables.animation.bg_grid.background_effect",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "mode": "radio",
                              "options": [
                                {
                                  "value": "scroll",
                                  "label": "Scroll"
                                },
                                {
                                  "value": "zoom",
                                  "label": "Zoom"
                                },
                                {
                                  "value": "none",
                                  "label": "None"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Zoom Settings",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:move-resize-variant",
                      "noCollapse": false,
                      "expanded": true,
                      "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.background_effect === 'zoom'",
                      "rows": [
                        {
                          "controls": [
                            {
                              "type": "Message",
                              "alertType": "info",
                              "message": "Each layer will zoom in until the layer is scaled by the factor.  It will fade in and out based on the opacity stops."
                            }
                          ]
                        },
                        {
                          "type": "ControlRow",
                          "controls": [
                            {
                              "label": "Zoom Layers",
                              "configValue": "variables.animation.bg_grid.background_zoom.layers",
                              "helper": "Number of layers to zoom in the background",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 1,
                                  "max": 10,
                                  "step": 1,
                                  "mode": "slider",
                                  "slider_ticks": true
                                }
                              }
                            },
                            {
                              "label": "Scale Size",
                              "configValue": "variables.animation.bg_grid.background_zoom.scale_to",
                              "helper": "Scale factor of the zoom effect",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 1,
                                  "max": 10,
                                  "step": 1,
                                  "mode": "slider",
                                  "slider_ticks": true,
                                  "unit_of_measurement": "x"
                                }
                              }
                            },
                            {
                              "label": "Opacity Fade In",
                              "configValue": "variables.animation.bg_grid.background_zoom.opacity_fade_in",
                              "helper": "At what percent of the zoom should the opacity fade in",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 100,
                                  "step": 1,
                                  "mode": "slider",
                                  "slider_ticks": true,
                                  "unit_of_measurement": "%"
                                }
                              }
                            },
                            {
                              "label": "Opacity Fade Out",
                              "configValue": "variables.animation.bg_grid.background_zoom.opacity_fade_out",
                              "helper": "At what percent of the zoom should the opacity fade out",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 100,
                                  "step": 1,
                                  "mode": "slider",
                                  "slider_ticks": true,
                                  "unit_of_measurement": "%"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Background Colours",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:select-color",
                  "noCollapse": false,
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>Background Fill Colour</label>\n"
                        }
                      ]
                    },
                    {
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.animation.bg_grid.color.fill",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.animation.bg_grid.color.fill",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.animation.bg_grid.color.fill"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "GRID",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:grid",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "Cell dimensions are calculated automatically based on card size and row/column counts."
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "label": "Grid Preset",
                      "configValue": "variables.animation.bg_grid.grid.preset",
                      "helper": "Select the type of grid to display",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "mode": "dropdown",
                          "options": [
                            {
                              "value": "rect",
                              "label": "Rectangular"
                            },
                            {
                              "value": "bracket",
                              "label": "[[ bracket ]]"
                            },
                            {
                              "value": "hex",
                              "label": "Hexagonal"
                            },
                            {
                              "value": "diagonal",
                              "label": "Diagonal/Diamond"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "controls": [
                    {
                      "label": "Hex Radius",
                      "configValue": "variables.animation.bg_grid.grid.hex_radius",
                      "helper": "Radius of the hexagonal grid cells",
                      "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.grid?.preset === 'hex'",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "max": 50,
                          "step": 1,
                          "mode": "slider",
                          "slider_ticks": true,
                          "unit_of_measurement": "px"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Grid Dimensions & Sizing",
                  "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.grid?.preset !== 'bracket'",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:ruler-square",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "# Major Columns",
                          "configValue": "variables.animation.bg_grid.grid.num_major_cols",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 25,
                              "step": 1,
                              "mode": "slider"
                            }
                          }
                        },
                        {
                          "label": "# Minor Columns",
                          "configValue": "variables.animation.bg_grid.grid.num_minor_cols",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 25,
                              "step": 1,
                              "mode": "slider"
                            }
                          }
                        },
                        {
                          "label": "# Major Rows",
                          "configValue": "variables.animation.bg_grid.grid.num_major_rows",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 25,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        },
                        {
                          "label": "# Minor Rows",
                          "configValue": "variables.animation.bg_grid.grid.num_minor_rows",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 25,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        },
                        {
                          "label": "Major Line Width",
                          "configValue": "variables.animation.bg_grid.grid.line_width_major",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 10,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        },
                        {
                          "label": "Minor Line Width",
                          "configValue": "variables.animation.bg_grid.grid.line_width_minor",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 10,
                              "step": 1,
                              "mode": "slider",
                              "slider_ticks": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Bracket Settings",
                  "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.grid?.preset === 'bracket'",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:ruler-square",
                  "noCollapse": false,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "Bracket Width",
                          "configValue": "variables.animation.bg_grid.grid.bracket_width",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 25,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%"
                            }
                          }
                        },
                        {
                          "label": "Bracket Height",
                          "configValue": "variables.animation.bg_grid.grid.bracket_height",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": "label",
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%"
                            }
                          }
                        },
                        {
                          "label": "Bracket Radius",
                          "configValue": "variables.animation.bg_grid.grid.bracket_radius",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 1,
                              "max": 25,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "px"
                            }
                          }
                        },
                        {
                          "label": "Bracket Gap/Inset",
                          "configValue": "variables.animation.bg_grid.grid.bracket_gap",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 50,
                              "step": 1,
                              "mode": "slider",
                              "unit_of_measurement": "%"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>Bracket Colour</label>\n"
                        }
                      ]
                    },
                    {
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.animation.bg_grid.grid.bracket_color",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.animation.bg_grid.grid.bracket_color",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.animation.bg_grid.grid.bracket_color"
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "Selector",
                          "label": "Bracket Fill",
                          "configValue": "variables.animation.bg_grid.grid.bracket_fill",
                          "helper": "Fill the area between brackets (def: rgba(128, 128, 128, 0.08) )  Set 'none' to disable.",
                          "selector": {
                            "text": null
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Grid Colours",
                  "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.grid?.preset !== 'bracket'",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:select-color",
                  "noCollapse": false,
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>Grid Line Colour</label>\n"
                        }
                      ]
                    },
                    {
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.animation.bg_grid.color.line",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.animation.bg_grid.color.line",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.animation.bg_grid.color.line"
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "RawHTML",
                          "html": "<label>Grid Cell Fill Colour</label>\n"
                        }
                      ]
                    },
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "LCARS Colour",
                          "configValue": "variables.animation.bg_grid.color.fill",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                            }
                          }
                        },
                        {
                          "label": "Custom Colour",
                          "configValue": "variables.animation.bg_grid.color.fill",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "color"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "type": "ColorPreview",
                          "configValue": "variables.animatino.bg_grid.color.fill"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "GRID Motion Settings",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:motion-outline",
                  "noCollapse": false,
                  "expanded": false,
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "info",
                          "message": "These settings control override the global motion effect of the grid layers."
                        },
                        {
                          "label": "Speed (s)",
                          "configValue": "variables.animation.bg_grid.grid_speed",
                          "type": "Selector",
                          "selector": {
                            "number": {
                              "min": 0,
                              "max": 60,
                              "step": 0.5,
                              "mode": "slider"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "label": "Motion Effect",
                          "configValue": "variables.animation.bg_grid.grid_effect",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "mode": "radio",
                              "options": [
                                {
                                  "value": "scroll",
                                  "label": "Scroll"
                                },
                                {
                                  "value": "zoom",
                                  "label": "Zoom"
                                },
                                {
                                  "value": "none",
                                  "label": "None"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "Section",
                      "label": "Zoom Settings",
                      "outlined": true,
                      "leftChevron": false,
                      "headerLevel": 4,
                      "icon": "mdi:move-resize-variant",
                      "noCollapse": false,
                      "expanded": true,
                      "visibilityCondition": "this._config.variables && this._config.variables.animation?.bg_grid?.grid_effect === 'zoom'",
                      "rows": [
                        {
                          "controls": [
                            {
                              "type": "Message",
                              "alertType": "info",
                              "message": "Each layer will zoom in until the layer is scaled by the factor.  It will fade in and out based on the opacity stops."
                            }
                          ]
                        },
                        {
                          "type": "ControlRow",
                          "controls": [
                            {
                              "label": "Zoom Layers",
                              "configValue": "variables.animation.bg_grid.grid_zoom.layers",
                              "helper": "Number of grid layers to zoom",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 1,
                                  "max": 10,
                                  "step": 1,
                                  "mode": "slider",
                                  "slider_ticks": true
                                }
                              }
                            },
                            {
                              "label": "Scale Size",
                              "configValue": "variables.animation.bg_grid.grid_zoom.scale_to",
                              "helper": "Scale factor of the zoom effect",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 1,
                                  "max": 10,
                                  "step": 1,
                                  "mode": "slider",
                                  "slider_ticks": true,
                                  "unit_of_measurement": "x"
                                }
                              }
                            },
                            {
                              "label": "Opacity Fade In",
                              "configValue": "variables.animation.bg_grid.grid_zoom.opacity_fade_in",
                              "helper": "At what percent of the zoom should the opacity fade in",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 100,
                                  "step": 1,
                                  "mode": "slider",
                                  "slider_ticks": true,
                                  "unit_of_measurement": "%"
                                }
                              }
                            },
                            {
                              "label": "Opacity Fade Out",
                              "configValue": "variables.animation.bg_grid.grid_zoom.opacity_fade_out",
                              "helper": "At what percent of the zoom should the opacity fade out",
                              "type": "Selector",
                              "selector": {
                                "number": {
                                  "min": 0,
                                  "max": 100,
                                  "step": 1,
                                  "mode": "slider",
                                  "slider_ticks": true,
                                  "unit_of_measurement": "%"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "label": "GEO Array",
      "visibilityCondition": "this._config.template && this._config.template.includes('cb-lcars-animation-geo-array')",
      "content": [
        {
          "type": "Section",
          "label": "GEO Animation",
          "outlined": true,
          "leftChevron": false,
          "headerLevel": 4,
          "icon": "mdi:matrix",
          "noCollapse": false,
          "expanded": true,
          "rows": [
            {
              "type": "Section",
              "label": "Pattern",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:format-list-bulleted",
              "noCollapse": false,
              "expanded": true,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "Select the pattern of the animation."
                    },
                    {
                      "label": "Pattern",
                      "configValue": "variables.animation.geo_array.pattern",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "mode": "dropdown",
                          "options": [
                            {
                              "value": "default",
                              "label": "Default"
                            },
                            {
                              "value": "niagara",
                              "label": "Niagara"
                            },
                            {
                              "value": "frozen",
                              "label": "Frozen"
                            },
                            {
                              "value": "custom",
                              "label": "Custom"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "Section",
                  "label": "Custom Pattern",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:format-list-bulleted",
                  "noCollapse": false,
                  "visibilityCondition": "(this._config?.variables?.animation?.geo_array?.pattern ?? '') === 'custom'",
                  "rows": [
                    {
                      "controls": [
                        {
                          "type": "Message",
                          "alertType": "warning",
                          "message": "Advanced: Custom animation patterns and keyframes can be defined - please refer to the documentation for more information."
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "label": "Custom Animation Pattern",
                          "configValue": "variables.animation.geo_array.custom_pattern",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": true
                            }
                          }
                        }
                      ]
                    },
                    {
                      "controls": [
                        {
                          "label": "Custom Keyframes",
                          "configValue": "variables.animation.geo_array.custom_keyframes",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "multiline": true
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "label": "Animation Axis",
                      "configValue": "variables.animation.geo_array.animation_axis",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "mode": "dropdown",
                          "options": [
                            {
                              "value": "row",
                              "label": "Row"
                            },
                            {
                              "value": "col",
                              "label": "Column"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Shape",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:shape",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "type": "Section",
                  "label": "Type & Size",
                  "outlined": true,
                  "leftChevron": false,
                  "headerLevel": 4,
                  "icon": "mdi:shape",
                  "noCollapse": true,
                  "expanded": true,
                  "rows": [
                    {
                      "type": "ControlRow",
                      "cssClass": "form-row two-controls",
                      "controls": [
                        {
                          "label": "Type",
                          "configValue": "variables.animation.geo_array.shape.type",
                          "type": "Selector",
                          "selector": {
                            "select": {
                              "mode": "dropdown",
                              "options": [
                                {
                                  "value": "square",
                                  "label": "Square"
                                },
                                {
                                  "value": "circle",
                                  "label": "Circle"
                                },
                                {
                                  "value": "ellipse",
                                  "label": "Ellipse"
                                },
                                {
                                  "value": "triangle",
                                  "label": "Triangle"
                                },
                                {
                                  "value": "diamond",
                                  "label": "Diamond"
                                },
                                {
                                  "value": "hexagon",
                                  "label": "Hexagon"
                                },
                                {
                                  "value": "pentagon",
                                  "label": "Pentagon"
                                },
                                {
                                  "value": "octagon",
                                  "label": "Octagon"
                                },
                                {
                                  "value": "cross",
                                  "label": "Cross"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "label": "Size",
                          "configValue": "variables.animation.geo_array.shape.size",
                          "type": "Selector",
                          "selector": {
                            "text": {
                              "type": "number"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Colours",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:select-color",
              "noCollapse": false,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Base Colour</label>\n"
                    }
                  ]
                },
                {
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animation.geo_array.color.base",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animation.geo_array.color.base",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animation.geo_array.color.base"
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Animation Start Colour</label>\n"
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animation.geo_array.color.animation_start",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animation.geo_array.color.animation_start",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animation.geo_array.color.animation_start"
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "RawHTML",
                      "html": "<label>Animation End Colour</label>\n"
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "LCARS Colour",
                      "configValue": "variables.animation.geo_array.color.animation_end",
                      "type": "Selector",
                      "selector": {
                        "select": {
                          "optionsCondition": "(() => {\n  const styles = document.documentElement.style;\n  const options = [];\n  options.push({ value: 'transparent', label: '[[ transparent ]]' });\n  options.push({ value: 'var(--button-card-light-color)', label: '[[ Match Light Colour ]]' });\n  options.push({ value: 'var(--button-card-light-color-no-temperature)', label: '[[ Match Light Colour w/o temp. ]]' });\n\n  for (let i = 0; i < styles.length; i++) {\n    const name = styles[i];\n    if (name.startsWith('--cblcars-') || name.startsWith('--picard-') || name.startsWith('--lcars-')) {\n      //const value = styles.getPropertyValue(name).trim();\n      const value = `var(${name})`;\n      options.push({ value, label: name.replace('--', '') });\n    }\n  }\n  options.sort((a, b) => a.label.localeCompare(b.label));\n  return options;\n})()\n"
                        }
                      }
                    },
                    {
                      "label": "Custom Colour",
                      "configValue": "variables.animation.geo_array.color.animation_end",
                      "type": "Selector",
                      "selector": {
                        "text": {
                          "type": "color"
                        }
                      }
                    }
                  ]
                },
                {
                  "controls": [
                    {
                      "type": "ColorPreview",
                      "configValue": "variables.animation.geo_array.color.animation_end"
                    }
                  ]
                }
              ]
            },
            {
              "type": "Section",
              "label": "Grid",
              "outlined": true,
              "leftChevron": false,
              "headerLevel": 4,
              "icon": "mdi:grid",
              "noCollapse": false,
              "expanded": false,
              "rows": [
                {
                  "controls": [
                    {
                      "type": "Message",
                      "alertType": "info",
                      "message": "Grid dimensions are calculated automatically by default using the card's size and font size.  Here you can provide specific values to override the automatic settings."
                    }
                  ]
                },
                {
                  "type": "ControlRow",
                  "cssClass": "form-row two-controls",
                  "controls": [
                    {
                      "label": "# Columns",
                      "configValue": "variables.animation.geo_array.grid.num_cols",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "max": 100,
                          "step": 1,
                          "mode": "slider"
                        }
                      }
                    },
                    {
                      "label": "# Rows",
                      "configValue": "variables.animation.geo_array.grid.num_rows",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "max": 100,
                          "step": 1,
                          "mode": "slider"
                        }
                      }
                    },
                    {
                      "label": "Column Width",
                      "configValue": "variables.animation.geo_array.grid.column_width",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "step": 1
                        }
                      }
                    },
                    {
                      "label": "Row Height",
                      "configValue": "variables.animation.geo_array.grid.row_height",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "step": 1
                        }
                      }
                    },
                    {
                      "label": "Grid Gap",
                      "configValue": "variables.animation.geo_array.grid.gap",
                      "type": "Selector",
                      "selector": {
                        "number": {
                          "min": 1,
                          "step": 1
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "css": {
    "mergeUserStyles": true,
    "cssText": ".form-control {\n  padding: 2px 8px 2px 8px;\n}\n.form-row {\n  grid-template-columns: 100%;\n}\n.form-row.two-controls {\n  grid-template-columns: 50% 50%;\n}\n"
  }
}