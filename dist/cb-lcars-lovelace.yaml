cblcars:
  version: 2025.07.2
  manage_config: true
cblcars_card_templates:
  cb-lcars-label:
    enable_resize_observer: true
    template:
      - cb-lcars-base
    show_label: true
    variables:
      card:
        min_height: 40px
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
            zero: transparent
            non_zero: transparent
            hvac_heat: transparent
            hvac_cool: transparent
            unavailable: transparent
      text:
        label:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
        state:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
        name:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
  cb-lcars-state-on-blink:
    variables:
      blink_seconds: 3s
    extra_styles: |
      [[[ return `
          @keyframes blink2 {
            0% {
              opacity: 1;
            }
            50% {
              opacity: 0.3;
            }
            100% {
              opacity: 1;
            }
          }
        `]]]
    state:
      - id: state_on
        styles:
          card:
            - animation-duration: '[[[ return variables.blink_seconds; ]]]'
            - animation-timing-function: ease-out
            - animation-name: blink2
            - animation-iteration-count: infinite
            - animation-delay: 1s
  cb-lcars-state-off-blink:
    variables:
      blink_seconds: 3s
    extra_styles: |
      [[[ return `
          @keyframes blink2 {
            0% {
              opacity: 1;
            }
            50% {
              opacity: 0.3;
            }
            100% {
              opacity: 1;
            }
          }
        `]]]
    state:
      - id: state_off
        styles:
          card:
            - animation-duration: '[[[ return variables.blink_seconds; ]]]'
            - animation-timing-function: ease-out
            - animation-name: blink2
            - animation-iteration-count: infinite
            - animation-delay: 1s
  cb-lcars-state-unavailable-blink:
    variables:
      blink_seconds: 3s
    extra_styles: |
      [[[ return `
          @keyframes blink2 {
            0% {
              opacity: 1;
            }
            50% {
              opacity: 0.3;
            }
            100% {
              opacity: 1;
            }
          }
        `]]]
    state:
      - id: state_unavailable
        styles:
          card:
            - animation-duration: '[[[ return variables.blink_seconds; ]]]'
            - animation-timing-function: ease-out
            - animation-name: blink2
            - animation-iteration-count: infinite
            - animation-delay: 1s
  cb-lcars-button-bullet:
    template: cb-lcars-button-lozenge
    variables:
      card:
        border:
          top:
            left_radius: 0px
          bottom:
            left_radius: 0px
  cb-lcars-button-bullet-right:
    template: cb-lcars-button-lozenge-right
    variables:
      card:
        border:
          top:
            right_radius: 0px
          bottom:
            right_radius: 0px
  cb-lcars-header-base:
    template:
      - cb-lcars-button-base
      - cb-lcars-functions
      - cb-lcars-symbiont
    variables:
      label: ' '
      text:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
        state:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
        name:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
      card:
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
            zero: transparent
            non_zero: transparent
            hvac_heat: transparent
            hvac_cool: transparent
            unavailable: transparent
    styles:
      label:
        - z-index: 2
      name:
        - z-index: 2
      state:
        - z-index: 2
  cb-lcars-header:
    template:
      - cb-lcars-header-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
            left_radius: var(--ha-card-border-radius)
          left:
            size: 90px
      text:
        label:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        state:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        name:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
    styles:
      label:
        - border-top-right-radius: 0px
        - border-top-left-radius: |
            [[[
                let leftRadius = variables.card.border.top.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-header-open:
    template:
      - cb-lcars-header-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
  cb-lcars-header-contained:
    template:
      - cb-lcars-header-open
    variables:
      card:
        min_height: 10px
        border:
          left:
            size: 50px
          right:
            size: 50px
          top:
            size: 10px
            left_radius: var(--ha-card-border-radius)
            right_radius: var(--ha-card-border-radius)
          bottom:
            left_radius: 0px
            right_radius: 0px
    styles:
      label:
        - border-top-left-radius: |
            [[[
                let leftRadius = variables.card.border.top.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
        - border-top-right-radius: |
            [[[
                let rightRadius = variables.card.border.top.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-header-right:
    template:
      - cb-lcars-header-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
            left_radius: 0px
            right_radius: var(--ha-card-border-radius)
          right:
            size: 90px
          bottom:
            right_radius: 0px
      text:
        label:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        state:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        name:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
    styles:
      label:
        - border-top-left-radius: 0px
        - border-top-right-radius: |
            [[[
                let rightRadius = variables.card.border.top.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-label-picard:
    template:
      - cb-lcars-label
    show_label: true
    variables:
      label: LCARS LABEL
      text:
        label:
          font_size: 52
          font_weight: 100
          color:
            default: var(--picard-yellow)
          justify: right
          padding:
            right: 15
            bottom: 8
      card:
        border:
          left:
            size: 60
          right:
            size: 40
          color: var(--picard-medium-dark-gray)
  cb-lcars-label-picard-square:
    template:
      - cb-lcars-label
    enable_resize_observer: true
    show_label: true
    variables:
      label: LCARS Label
      card:
        border:
          right:
            size: 50
          left:
            size: 50
          top:
            left_radius: 0
            right_radius: 0
          bottom:
            left_radius: 0
            right_radius: 0
      text:
        label:
          justify: flex-end
          font_size: |
            [[[
              return variables.__get_num_with_unit(variables.card.height);
            ]]]
          font_weight: 100
          color:
            default: var(--picard-yellow)
          padding:
            right: 10
            left: 10
            bottom: 8
        name:
          justify: flex-end
          font_size: |
            [[[
              return variables.__get_num_with_unit(variables.card.height);
            ]]]
          font_weight: 100
          color:
            default: var(--picard-yellow)
          padding:
            right: 10
            left: 10
            bottom: 8
        state:
          justify: flex-end
          font_size: |
            [[[
              return variables.__get_num_with_unit(variables.card.height);
            ]]]
          font_weight: 100
          color:
            default: var(--picard-yellow)
          padding:
            right: 10
            left: 10
            bottom: 8
    state:
      - id: state_on
        operator: template
        styles:
          card:
            - background: |
                [[[
                  return (variables.card.color.active || variables.card.color.default);
                ]]]
            - border: none
      - id: state_off
        operator: template
        styles:
          card:
            - background: |
                [[[
                  return (variables.card.color.inactive || variables.card.color.default);
                ]]]
            - border: none
    styles:
      card:
        - background: |
            [[[
              return (variables.card.color.default);
            ]]]
        - border: none
      label:
        - background: black
        - width: null
        - outline-width: 0
        - border: none
        - margin-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size);
            ]]]
        - margin-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size);
            ]]]
        - left: null
        - top: null
        - justify-self: |
            [[[
              return (variables.text.label.justify);
            ]]]
      name:
        - background: black
        - width: null
        - outline-width: 0
        - border: none
        - margin-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size);
            ]]]
        - margin-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size);
            ]]]
        - left: null
        - top: null
        - justify-self: |
            [[[
              return (variables.text.name.justify);
            ]]]
      state:
        - background: black
        - width: null
        - outline-width: 0
        - border: none
        - margin-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size);
            ]]]
        - margin-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size);
            ]]]
        - left: null
        - top: null
        - justify-self: |
            [[[
              return (variables.text.state.justify);
            ]]]
      custom_fields:
        animation:
          - width: |
              [[[
                return "calc( " + variables.__get_num_with_unit(variables.card.width) + ")";
              ]]]
  cb-lcars-label-picard-lozenge:
    template:
      - cb-lcars-label-picard-square
    variables:
      card:
        border:
          top:
            left_radius: null
            right_radius: null
          bottom:
            left_radius: null
            right_radius: null
  cb-lcars-label-picard-bullet:
    template:
      - cb-lcars-label-picard-square
    variables:
      card:
        border:
          top:
            left_radius: 0
            right_radius: null
          bottom:
            left_radius: 0
            right_radius: null
  cb-lcars-label-picard-bullet-right:
    template:
      - cb-lcars-label-picard-square
    variables:
      card:
        border:
          top:
            left_radius: null
            right_radius: 0
          bottom:
            left_radius: null
            right_radius: 0
  cb-lcars-button-picard-filled:
    template: cb-lcars-button-base
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            hvac_other: black
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            hvac_other: black
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            hvac_other: black
      icon:
        color:
          default: black
        justify: left
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          right:
            size: 6px
            color: black
            padding: 1.5%
            margin: 0
          left:
            size: 6px
            color: transparent
            padding: 0.5%
            margin: null
    state:
      - id: state_on
        operator: template
        value: |
          [[[
            return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.active ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.active ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.active ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.active ]]]
          state:
            - color: '[[[ return variables.text.state.color.active ]]]'
          label:
            - color: '[[[ return variables.text.label.color.active ]]]'
          name:
            - color: '[[[ return variables.text.name.color.active ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.active ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.active ||
                variables.card.color.background.active ]]]
      - id: state_off
        operator: template
        value: |
          [[[
            return entity !== undefined && ['off', 'closed', 'unlocked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.inactive ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.inactive ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.inactive ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.inactive ]]]
          state:
            - color: '[[[ return variables.text.state.color.inactive ]]]'
          label:
            - color: '[[[ return variables.text.label.color.inactive ]]]'
          name:
            - color: '[[[ return variables.text.name.color.inactive ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]
      - value: heat
        id: state_heat
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.hvac_heat ]]]'
          state:
            - color: '[[[ return variables.text.state.color.hvac_heat ]]]'
          label:
            - color: '[[[ return variables.text.label.color.hvac_heat ]]]'
          name:
            - color: '[[[ return variables.text.name.color.hvac_heat ]]]'
      - value: cool
        id: state_cool
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.hvac_cool ]]]'
          state:
            - color: '[[[ return variables.text.state.color.hvac_cool ]]]'
          label:
            - color: '[[[ return variables.text.label.color.hvac_cool ]]]'
          name:
            - color: '[[[ return variables.text.name.color.hvac_cool ]]]'
      - operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            return entity !== undefined && Number(states[entity.entity_id].state) === 0;
          ]]]
        id: state_zero
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.zero ]]]'
          state:
            - color: '[[[ return variables.text.state.color.zero ]]]'
          label:
            - color: '[[[ return variables.text.label.color.zero ]]]'
          name:
            - color: '[[[ return variables.text.name.color.zero ]]]'
      - operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            return entity !== undefined && Number(states[entity.entity_id].state) !== 0;
          ]]]
        id: state_nonzero
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.non_zero ]]]'
          state:
            - color: '[[[ return variables.text.state.color.non_zero ]]]'
          label:
            - color: '[[[ return variables.text.label.color.non_zero ]]]'
          name:
            - color: '[[[ return variables.text.name.color.non_zero ]]]'
      - operator: default
        id: state_default
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.default ]]]'
          state:
            - color: '[[[ return variables.text.state.color.default ]]]'
          label:
            - color: '[[[ return variables.text.label.color.default ]]]'
          name:
            - color: '[[[ return variables.text.name.color.default ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]
  cb-lcars-button-picard-filled-dense:
    template: cb-lcars-button-picard-filled
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-filled-right:
    template: cb-lcars-button-picard-filled
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        color:
          default: black
        justify: right
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          left:
            size: 6px
            color: black
            padding: 1.5%
            margin: 0
          right:
            size: 6px
            color: transparent
            padding: 0.5%
            margin: null
  cb-lcars-button-picard-filled-dense-right:
    template: cb-lcars-button-picard-filled-right
    variables:
      card:
        height: 50px
  cb-lcars-card-base:
    template:
      - cb-lcars-functions
      - cb-lcars-actions-disable
    show_icon: false
    show_label: false
    show_name: false
    show_state: false
    styles:
      card:
        - background-color: |
            [[[
              if (states['input_boolean.lcars_ui_debug'] && states['input_boolean.lcars_ui_debug'].state === 'on') {
                return variables.__get_random_css_color();
              } else {
                return 'transparent';
              }
            ]]]
  cb-lcars-button-base:
    template:
      - cb-lcars-base
      - cb-lcars-actions-toggle
    show_icon: false
    show_name: false
    show_label: true
    variables:
      label: |
        [[[
          return (((Math.floor(Math.random() * 256).toString(16).padStart(2, '0')) + "-" + (Math.floor(Math.random() * 4096).toString(16).padStart(3, '0'))))
        ]]]
      card:
        min_height: 45px
        color:
          default: var(--lcars-card-button, var(--picard-medium-light-gray))
          active: "var(--lcars-card-button, var(--picard-medium-light-gray))"
          inactive: "var(--lcars-card-button-off, var(--picard-dark-gray))"
          zero: "var(--lcars-card-button, var(--picard-medium-light-gray))"
          non_zero: "var(--lcars-card-button-off, var(--picard-dark-gray))"
          unavailable: "var(--lcars-card-button-unavailable, var(--picard-darkest-gray))"
          background:
            default: null
            active: "var(--lcars-card-button, var(--picard-medium-light-gray))"
            inactive: "var(--lcars-card-button-off, var(--picard-dark-gray))"
            zero: "var(--lcars-card-button, var(--picard-medium-light-gray))"
            non_zero: "var(--lcars-card-button-off, var(--picard-dark-gray))"
            unavailable: "var(--lcars-card-button-unavailable, var(--picard-darkest-gray))"
      text:
        label:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            unavailable: black
        state:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            unavailable: black
        name:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            unavailable: black
      icon:
        size: 24px
        color:
          default: black
        justify: left
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          right:
            size: 6px
            color: black
            padding: 1.0%
            margin: 0
          left:
            size: 6px
            color: transparent
            padding: 1.0%
            margin: null
    size: 1.75em
    styles:
      grid:
        - grid-template-areas: '"i n" "i s" "i l"'
      icon:
        - color: '[[[ return variables.icon.color.default ]]]'
        - display: flex
        - align-items: center
        - justify-content: left
        - border-left: >-
            [[[ return variables.icon.border.left.color + " solid " +
            variables.icon.border.left.size ]]]
        - border-right: >-
            [[[ return variables.icon.border.right.color + " solid " +
            variables.icon.border.right.size ]]]
        - '--mdc-icon-size': '[[[ return variables.icon.size; ]]]'
        - margin-left: '[[[ return variables.__get_num_with_unit(variables.icon.border.left.margin) ]]]'
        - margin-right: '[[[ return variables.__get_num_with_unit(variables.icon.border.right.margin) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.icon.border.left.padding) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.icon.border.right.padding) ]]]'
        - height: "[[[ return variables.__get_num_with_unit(variables.card.height); ]]]"
        - width: "[[[ return variables.__get_num_with_unit(variables.icon.size); ]]]"
  cb-lcars-button-picard-label-east:
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-west:
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-ne:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-se:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-nw:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-sw:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-label-center:
    variables:
      text:
        label:
          font_size: 22px
          font_weight: normal
          justify: center
          align_items: center
          padding:
            padding:
              bottom: 10px
  cb-lcars-button-picard-state-east:
    variables:
      text:
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-west:
    variables:
      text:
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-ne:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-se:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-nw:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-sw:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-state-center:
    variables:
      text:
        state:
          font_size: 22px
          font_weight: normal
          justify: center
          align_items: center
          padding:
            padding:
              bottom: 10px
  cb-lcars-button-picard-name-east:
    variables:
      text:
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-west:
    variables:
      text:
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-ne:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-se:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-nw:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-sw:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-name-center:
    variables:
      text:
        name:
          font_size: 22px
          font_weight: normal
          justify: center
          align_items: center
          padding:
            padding:
              bottom: 10px
  cb-lcars-defs:
    template:
        - cb-lcars-functions
    variables:
      ___helpers:
        alert_condition: input_select.lcars_ui_alert_condition
        lcars_ui_debug: input_boolean.lcars_ui_debug
        ha_lcars:
          lcars_sound: input_boolean.lcars_sound
          lcars_texture: input_boolean.lcars_texture
      __defs:
        font_url: >-
          https://fonts.googleapis.com/css2?family=Antonio:wght@100..700&display=swap
        themes:
          green_alert:
            colors:
              oranges:
                picard-darkest-orange: '#d91604'
                picard-dark-orange: '#ef1d10'
                picard-medium-dark-orange: '#e7442a'
                picard-orange: '#ff6753'
                picard-medium-light-orange: '#ff8470'
                picard-light-orange: '#ff977b'
                picard-lightest-orange: '#ffb399'
              grays:
                picard-darkest-gray: '#1e2229'
                picard-dark-gray: '#2f3749'
                picard-medium-dark-gray: '#52596e'
                picard-gray: '#6d748c'
                picard-medium-light-gray: '#9ea5ba'
                picard-light-gray: '#d2d5df'
                picard-lightest-gray: '#f3f4f7'
                picard-moonlight: '#dfe1e8'
              blues:
                picard-darkest-blue: '#002241'
                picard-dark-blue: '#1c3c55'
                picard-medium-dark-blue: '#2a7193'
                picard-blue: '#37a6d1'
                picard-medium-light-blue: '#67caf0'
                picard-light-blue: '#93e1ff'
                picard-lightest-blue: '#00eeee'
              greens:
                picard-darkest-green: '#0c2a15'
                picard-dark-green: '#083717'
                picard-medium-dark-green: '#095320'
                picard-green: '#266239'
                picard-medium-light-green: '#458359'
                picard-light-green: '#80bb93'
                picard-lightest-green: '#b8e0c1'
              yellows:
                picard-darkest-yellow: '#70602c'
                picard-dark-yellow: '#ac943b'
                picard-medium-dark-yellow: '#d2bf50'
                picard-yellow: '#f9ef97'
                picard-medium-light-yellow: '#fffac9'
                picard-light-yellow: '#e7e6de'
                picard-lightest-yellow: '#f5f5dc'
          red_alert:
            colors:
              oranges:
                picard-darkest-orange: '#8b0000'
                picard-dark-orange: '#a52a2a'
                picard-medium-dark-orange: '#b22222'
                picard-orange: '#dc143c'
                picard-medium-light-orange: '#ff0000'
                picard-light-orange: '#ff4500'
                picard-lightest-orange: '#ff6347'
              grays:
                picard-darkest-gray: '#8b0000'
                picard-dark-gray: '#a52a2a'
                picard-medium-dark-gray: '#b22222'
                picard-gray: '#dc143c'
                picard-medium-light-gray: '#ff0000'
                picard-light-gray: '#ff4500'
                picard-lightest-gray: '#ff7f50'
              blues:
                picard-darkest-blue: '#cd5c5c'
                picard-dark-blue: '#f08080'
                picard-medium-dark-blue: '#e9967a'
                picard-blue: '#fa8072'
                picard-medium-light-blue: '#ffa07a'
                picard-light-blue: '#ff6347'
                picard-lightest-blue: '#ff4500'
              greens:
                picard-darkest-green: '#dc143c'
                picard-dark-green: '#b22222'
                picard-medium-dark-green: '#a52a2a'
                picard-green: '#8b0000'
                picard-medium-light-green: '#ff0000'
                picard-light-green: '#ff4500'
                picard-lightest-green: '#ff6347'
              yellows:
                picard-darkest-yellow: '#8b0000'
                picard-dark-yellow: '#a52a2a'
                picard-medium-dark-yellow: '#b22222'
                picard-yellow: '#dc143c'
                picard-medium-light-yellow: '#ff0000'
                picard-light-yellow: '#ff4500'
                picard-lightest-yellow: '#ff6347'
          blue_alert:
            colors:
              oranges:
                picard-darkest-orange: '#00008b'
                picard-dark-orange: '#0000cd'
                picard-medium-dark-orange: '#4169e1'
                picard-orange: '#4682b4'
                picard-medium-light-orange: '#5f9ea0'
                picard-light-orange: '#87ceeb'
                picard-lightest-orange: '#b0e0e6'
              grays:
                picard-darkest-gray: '#1c1c3c'
                picard-dark-gray: '#2a2a5a'
                picard-medium-dark-gray: '#3a3a7a'
                picard-gray: '#4a4a9a'
                picard-medium-light-gray: '#5a5ab4'
                picard-light-gray: '#6a6ad4'
                picard-lightest-gray: '#7a7af4'
              blues:
                picard-darkest-blue: '#00008b'
                picard-dark-blue: '#0000cd'
                picard-medium-dark-blue: '#4169e1'
                picard-blue: '#4682b4'
                picard-medium-light-blue: '#5f9ea0'
                picard-light-blue: '#87ceeb'
                picard-lightest-blue: '#b0e0e6'
              greens:
                picard-darkest-green: '#1c1c3c'
                picard-dark-green: '#2a2a5a'
                picard-medium-dark-green: '#3a3a7a'
                picard-green: '#4a4a9a'
                picard-medium-light-green: '#5a5ab4'
                picard-light-green: '#6a6ad4'
                picard-lightest-green: '#7a7af4'
              yellows:
                picard-darkest-yellow: '#1c1c3c'
                picard-dark-yellow: '#2a2a5a'
                picard-medium-dark-yellow: '#3a3a7a'
                picard-yellow: '#4a4a9a'
                picard-medium-light-yellow: '#5a5ab4'
                picard-light-yellow: '#6a6ad4'
                picard-lightest-yellow: '#7a7af4'
          yellow_alert:
            colors:
              oranges:
                picard-darkest-orange: '#8b4513'
                picard-dark-orange: '#d2691e'
                picard-medium-dark-orange: '#ff8c00'
                picard-orange: '#ffa500'
                picard-medium-light-orange: '#ffb84d'
                picard-light-orange: '#ffd700'
                picard-lightest-orange: '#ffec8b'
              grays:
                picard-darkest-gray: '#4b4b00'
                picard-dark-gray: '#6b6b00'
                picard-medium-dark-gray: '#8b8b00'
                picard-gray: '#abab00'
                picard-medium-light-gray: '#cbcb00'
                picard-light-gray: '#ebeb00'
                picard-lightest-gray: '#fbfb00'
              blues:
                picard-darkest-blue: '#4b4b00'
                picard-dark-blue: '#6b6b00'
                picard-medium-dark-blue: '#8b8b00'
                picard-blue: '#abab00'
                picard-medium-light-blue: '#cbcb00'
                picard-light-blue: '#ebeb00'
                picard-lightest-blue: '#fbfb00'
              greens:
                picard-darkest-green: '#4b4b00'
                picard-dark-green: '#6b6b00'
                picard-medium-dark-green: '#8b8b00'
                picard-green: '#abab00'
                picard-medium-light-green: '#cbcb00'
                picard-light-green: '#ebeb00'
                picard-lightest-green: '#fbfb00'
              yellows:
                picard-darkest-yellow: '#8b4513'
                picard-dark-yellow: '#d2691e'
                picard-medium-dark-yellow: '#ff8c00'
                picard-yellow: '#ffa500'
                picard-medium-light-yellow: '#ffb84d'
                picard-light-yellow: '#ffd700'
                picard-lightest-yellow: '#ffec8b'
          black_alert:
            colors:
              oranges:
                picard-darkest-orange: '#0d0d0d'
                picard-dark-orange: '#1a1a1a'
                picard-medium-dark-orange: '#333333'
                picard-orange: '#4d4d4d'
                picard-medium-light-orange: '#666666'
                picard-light-orange: '#808080'
                picard-lightest-orange: '#999999'
              grays:
                picard-darkest-gray: '#0d0d0d'
                picard-dark-gray: '#1a1a1a'
                picard-medium-dark-gray: '#333333'
                picard-gray: '#4d4d4d'
                picard-medium-light-gray: '#666666'
                picard-light-gray: '#808080'
                picard-lightest-gray: '#999999'
              blues:
                picard-darkest-blue: '#0d0d0d'
                picard-dark-blue: '#1a1a1a'
                picard-medium-dark-blue: '#333333'
                picard-blue: '#4d4d4d'
                picard-medium-light-blue: '#666666'
                picard-light-blue: '#808080'
                picard-lightest-blue: '#999999'
              greens:
                picard-darkest-green: '#0d0d0d'
                picard-dark-green: '#1a1a1a'
                picard-medium-dark-green: '#333333'
                picard-green: '#4d4d4d'
                picard-medium-light-green: '#666666'
                picard-light-green: '#808080'
                picard-lightest-green: '#999999'
              yellows:
                picard-darkest-yellow: '#0d0d0d'
                picard-dark-yellow: '#1a1a1a'
                picard-medium-dark-yellow: '#333333'
                picard-yellow: '#4d4d4d'
                picard-medium-light-yellow: '#666666'
                picard-light-yellow: '#808080'
                picard-lightest-yellow: '#999999'
          gray_alert:
            colors:
              oranges:
                picard-darkest-orange: '#2b2b2b'
                picard-dark-orange: '#3b3b3b'
                picard-medium-dark-orange: '#4b4b4b'
                picard-orange: '#5b5b5b'
                picard-medium-light-orange: '#6b6b6b'
                picard-light-orange: '#7b7b7b'
                picard-lightest-orange: '#8b8b8b'
              grays:
                picard-darkest-gray: '#2b2b2b'
                picard-dark-gray: '#3b3b3b'
                picard-medium-dark-gray: '#4b4b4b'
                picard-gray: '#5b5b5b'
                picard-medium-light-gray: '#6b6b6b'
                picard-light-gray: '#7b7b7b'
                picard-lightest-gray: '#8b8b8b'
              blues:
                picard-darkest-blue: '#2b2b2b'
                picard-dark-blue: '#3b3b3b'
                picard-medium-dark-blue: '#4b4b4b'
                picard-blue: '#5b5b5b'
                picard-medium-light-blue: '#6b6b6b'
                picard-light-blue: '#7b7b7b'
                picard-lightest-blue: '#8b8b8b'
              greens:
                picard-darkest-green: '#2b2b2b'
                picard-dark-green: '#3b3b3b'
                picard-medium-dark-green: '#4b4b4b'
                picard-green: '#5b5b5b'
                picard-medium-light-green: '#6b6b6b'
                picard-light-green: '#7b7b7b'
                picard-lightest-green: '#8b8b8b'
              yellows:
                picard-darkest-yellow: '#2b2b2b'
                picard-dark-yellow: '#3b3b3b'
                picard-medium-dark-yellow: '#4b4b4b'
                picard-yellow: '#5b5b5b'
                picard-medium-light-yellow: '#6b6b6b'
                picard-light-yellow: '#7b7b7b'
                picard-lightest-yellow: '#8b8b8b'
  cb-lcars-footer-picard:
    template:
      - cb-lcars-header-picard-base
    variables:
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
        border:
          bottom:
            left_radius: var(--ha-card-border-radius)
            right_radius: 0px !important
          top:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: " "
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 0
          left:
            size: 180
          bottom:
            size: 20
          right:
            size: 0
      lcars_outer:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
      lcars_inner:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              left_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: "[[[ return variables.__get_num_with_unit(variables.card.height); ]]]"
        - width: "[[[ return variables.__get_num_with_unit(variables.card.width); ]]]"
        - border: 0
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - bottom: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - left: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-footer
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_outer.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                bottom:
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size);
                    ]]]
                  right_radius: 0px
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size);
                    ]]]
                inner:
                  factor: "[[[ return variables.card.border.inner.factor; ]]]"
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
      lcars_inner:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-footer
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_inner.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.left.size);
                    ]]]
                bottom:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.size);
                    ]]]
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.left_radius);
                    ]]]
                  right_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-footer-picard-right:
    template:
      - cb-lcars-header-picard-base
    variables:
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
        border:
          bottom:
            left_radius: 0px !important
            right_radius: var(--ha-card-border-radius)
          top:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: " "
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 0
          left:
            size: 0
          bottom:
            size: 20
          right:
            size: 180
      lcars_outer:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
      lcars_inner:
        card:
          border:
            right:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              right_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: "[[[ return variables.__get_num_with_unit(variables.card.height); ]]]"
        - width: "[[[ return variables.__get_num_with_unit(variables.card.width); ]]]"
        - border: 0
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - bottom: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - right: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-footer-right
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_outer.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                bottom:
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size);
                    ]]]
                  left_radius: 0px
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size);
                    ]]]
                inner:
                  factor: "[[[ return variables.card.border.inner.factor; ]]]"
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
      lcars_inner:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-footer-right
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_inner.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.right.size);
                    ]]]
                bottom:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.size);
                    ]]]
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.right_radius);
                    ]]]
                  left_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-multimeter:
    enable_resize_observer: true
    entity: '[[[ return variables.entity ]]]'
    template:
      - cb-lcars-functions
      - cb-lcars-base
      - cb-lcars-actions-disable
      - cb-lcars-animation-geo-array
    triggers_update: '[[[ return variables.entity ]]]'
    show_icon: false
    show_label: false
    label: '[[[ return variables.label ]]]'
    show_name: false
    show_state: false
    variables:
      _mode: gauge
      _gauge_style: basic
      _vertical: false
      _slider_thickness: 12
      _slider_step: 1
      _slider_mode: brightness
      _min: 0
      _max: 100
      _increment: 10
      _show_unit_of_measurement: false
      _unit_of_measurement: null
      entity: |
        [[[
          return variables.__get_random_entity('light');
        ]]]
      entity_min: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let minValue = variables._min || 0;
          switch (entityDomain) {
            case 'light':
              switch (variables._slider_mode) {
                case 'brightness':
                  minValue = variables._min || 0; //0-100
                  break;
                case 'temperature':
                  minValue = entity.attributes.min_mireds;  // min_mireds/max_mireds
                  break;
                case 'saturation':
                  minValue = variables._min || 0; //0-100
                  break;
                case 'hue':
                  minValue = variables._min || 0;  //0-360
                  break;
                default:
                  minValue = variables._min || 0;
              }
              break;
            case 'fan':
            case 'switch':
            case 'media_player':
              minValue = variables._min || 0;
              break;
            default:
              minValue = variables._min || 0;
          }
          return parseInt(minValue);
        ]]]
      entity_max: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let maxValue = variables._max || 100;
          switch (entityDomain) {
            case 'light':
              switch (variables._slider_mode) {
                case 'brightness':
                  maxValue = variables._max || 100; //0-100
                  break;
                case 'temperature':
                  maxValue = entity.attributes.max_mireds;  // min_mireds/max_mireds
                  break;
                case 'saturation':
                  maxValue = variables._max || 100; //0-100
                  break;
                case 'hue':
                  maxValue = variables._max || 360;  //0-360
                  break;
                default:
                  maxValue = variables._max || 100;
              }
              break;
            case 'fan':
            case 'switch':
            case 'media_player':
              maxValue = variables._max || 100;
              break;
            default:
              maxValue = variables._max || 100;
          }
          return parseInt(maxValue);
        ]]]
      entity_unit_of_measurement: |
        [[[
          return variables._unit_of_measurement || entity.attributes.unit_of_measurement || '%';
        ]]]
      entity_color: var(--button-card-light-color)
      entity_match_slider: false
      entity_match_gauge: false
      entity_match_header: false
      entity_match_slider_start: false
      entity_match_slider_end: false
      animation:
        justify_content: left
        align_items: center
        geo_array:
          animation_axis: cols
          grid:
            num_rows: 1
            num_cols: 3
          shape:
            size: 14
          color:
            base: var(--picard-orange)
            animation_start: var(--picard-blue)
            animation_end: var(--picard-dark-blue)
      card:
        gap: 5
        color:
          active: var(--lcars-card-button)
          inactive: var(--lcars-card-button-off)
          non_zero: var(--lcars-card-button)
          zero: var(--lcars-card-button-off)
          background:
            default: transparent
            active: transparent
            inactive: transparent
            zero: transparent
            non_zero: transparent
            hvac_heat: transparent
            hvac_cool: transparent
            unavailable: transparent
        height: '[[[ return this.offsetHeight; ]]]'
        min_height: '[[[ return Math.max(parseInt(this.offsetHeight), 50); ]]]'
        width: '[[[ return this.offsetWidth; ]]]'
        border:
          top:
            size: |
              [[[
                return (variables._vertical && variables._mode == 'gauge' && variables._gauge_style == 'picard') ? 40 : 10
              ]]]
          bottom:
            size: |
              [[[
                return (variables._vertical && variables._mode == 'gauge' && variables._gauge_style == 'picard') ? 50 : 0
              ]]]
          left:
            size: |
              [[[
                if (variables._vertical && variables._mode == 'gauge' && variables._gauge_style == 'picard') {
                  return 0;
                }
                if (variables._vertical ) {
                  return 30;
                }
                return 120;
              ]]]
          right:
            size: 0
          inner:
            width: 0
      text:
        label:
          font_size: 22px
          align_items: center
          justify: right
          transform: uppercase
          padding:
            top: 0
            left: 0
            right: 5
            bottom: 0
          color:
            default: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--primary-text-color)'
              : 'black'  ]]]
            active: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-ui-secondary)'
              : 'black'  ]]]
            inactive: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-ui-tertiary)' :
              'black'  ]]]
            zero: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-green)' :
              'black'  ]]]
            non_zero: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-blue)' :
              'black'  ]]]
            hvac_heat: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-orange)' :
              'black'  ]]]
            hvac_cool: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-blue)' :
              'black'  ]]]
            unavailable: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ?
              'var(--lcars-card-button-unavailable)' : 'black'  ]]]
        name:
          font_size: 22px
          align_items: center
          justify: right
          transform: uppercase
          padding:
            top: 0
            left: 0
            right: 5
            bottom: 0
          color:
            default: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--primary-text-color)'
              : 'black'  ]]]
            active: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-ui-secondary)'
              : 'black'  ]]]
            inactive: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-ui-tertiary)' :
              'black'  ]]]
            zero: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-green)' :
              'black'  ]]]
            non_zero: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-blue)' :
              'black'  ]]]
            hvac_heat: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-orange)' :
              'black'  ]]]
            hvac_cool: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-blue)' :
              'black'  ]]]
            unavailable: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ?
              'var(--lcars-card-button-unavailable)' : 'black'  ]]]
        state:
          font_size: 22px
          align_items: center
          justify: right
          transform: uppercase
          padding:
            top: 0
            left: 0
            right: 5
            bottom: 0
          color:
            default: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--primary-text-color)'
              : 'black'  ]]]
            active: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-ui-secondary)'
              : 'black'  ]]]
            inactive: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-ui-tertiary)' :
              'black'  ]]]
            zero: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-green)' :
              'black'  ]]]
            non_zero: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-blue)' :
              'black'  ]]]
            hvac_heat: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-orange)' :
              'black'  ]]]
            hvac_cool: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'var(--lcars-blue)' :
              'black'  ]]]
            unavailable: >-
              [[[ return (variables._mode == 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ?
              'var(--lcars-card-button-unavailable)' : 'black'  ]]]
      slider:
        locked: |
          [[[
            const entityDomain = entity.entity_id.split('.')[0];
            let locked = true;
            switch (entityDomain) {
              case 'light':
              case 'input_number':
              case 'number':
              case 'media_player':
              case 'cover':
              case 'fan':
              case 'switch':
              case 'input_boolean':
              case 'lock':
                locked = false;
                break;
              default:
                locked = true;
                break;
            }
            return locked;
          ]]]
        height: >-
          [[[ return (variables._vertical) ?
          variables.__get_num_with_unit(variables.card.height) :
          variables.__get_num_with_unit(variables._slider_thickness) ]]]
        width: >-
          [[[ return (variables._vertical) ?
          variables.__get_num_with_unit(variables._slider_thickness) :
          variables.__get_num_with_unit(variables.card.width) ]]]
        picard_right: 35
        color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-lightest-blue)" ]]]
        color_alpha: 0.95
        border_color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-blue)" ]]]
        border_alpha: 0.5
        border_width: 0px
        border_radius: 2px
        thumb:
          border:
            size: 3
            color: black
            radius: 50%
          height: 15
          color: white
          enabled: |
            [[[
              return (variables._mode == 'gauge' && variables._gauge_style == 'picard' && variables._vertical == true) ? true : false;
            ]]]
        flipped: '[[[ return (variables._vertical) ? true : false ]]]'
        padding:
          left: 0
          right: 0
          bottom: 0
          top: '[[[ return parseInt(variables.gauge.sub_meter.tick_size) ]]]'
        step: |
          [[[
            return entity.attributes.percentage_step || variables._slider_step;
          ]]]
        mode: '[[[ return variables._slider_mode ]]]'
        min: '[[[ return variables.entity_min ]]]'
        max: '[[[ return variables.entity_max ]]]'
      gauge:
        picard_ratio: 40
        range:
          enabled: true
          width_ratio: 1.9
          height_ratio: 2
          inset:
            border:
              color: black
              size: 4
            gap: 5
          border:
            color:
              active: var(--lcars-card-button)
              inactive: var(--lcars-card-button-off)
        connect_ticks: |
          [[[
            return (variables._vertical && variables._mode == 'gauge' && variables._gauge_style == 'picard' ) ? true : false;
          ]]]
        tick_line_thickness: 10
        min: '[[[ return variables.entity_min ]]]'
        max: '[[[ return variables.entity_max ]]]'
        increment: |
          [[[
            const entityDomain = entity.entity_id.split('.')[0];
            let increment = variables._increment || 10;
            switch (entityDomain) {
              case 'light':
                switch (variables._slider_mode) {
                  case 'temperature':
                    increment = 50;
                    break;
                  default:
                    increment = variables._increment || 10;
                }
                break;
            }
            return parseInt(increment);
          ]]]
        color:
          active: >-
            [[[ return variables.entity_match_gauge ? variables.entity_color :
            variables.card.color.active ]]]
          inactive: '[[[ return variables.card.color.inactive ]]]'
          background:
            active: transparent
            inactive: transparent
        sub_meter:
          show_sub_meter: true
          tick_size: 10px
          tick_count: 4
          active: >-
            [[[ return variables.entity_match_gauge ? variables.entity_color :
            variables.card.color.active ]]]
          inactive: '[[[ return variables.card.color.inactive ]]]'
          background:
            active: >-
              [[[ return variables.entity_match_gauge ? variables.entity_color :
              "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
            inactive: var(--lcars-card-button-off, var(--picard-darkest-gray))
        label:
          decimal_places: 0
          font_size: 14
          active: >-
            [[[ return variables.entity_match_gauge ? variables.entity_color :
            variables.card.color.active ]]]
          inactive: '[[[ return variables.card.color.inactive ]]]'
      slider_track:
        padding:
          left: 5
          right: 0
          top: 5
          bottom: 0
        mask_color: rgba(0,0,0,0.8)
        gradient_start_color: >
          [[[ return  variables.entity_match_slider_start ?
          variables.entity_color : "var(--error-color)" ]]]
        gradient_end_color: >
          [[[ return  variables.entity_match_slider_end ? variables.entity_color
          : "var(--success-color)" ]]]
        gap: 5
        bar_border_radius: 0
        bar_thickness: 10
      z_slider: |
        [[[
          try {
            const width = parseInt(variables.slider_track.width) || parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size) - parseInt(variables.slider_track.padding.left) - parseInt(variables.slider_track.padding.right);
            const height = parseInt(variables.slider_track.height) || parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size) - parseInt(variables.slider_track.padding.top) - parseInt(variables.slider_track.padding.bottom);
            let barWidth, barHeight;
            // Check for invalid dimensions (affects calcuations during instantiation generating invalid dimensions in the svg)
            if (width <= 0 || height <= 0) {
              //console.error(`Invalid dimensions: width=${width}, height=${height}`);
              // Return a placeholder or empty SVG
              return `<svg width="100" height="100"><text x="10" y="50" fill="red">Invalid SVG</text></svg>`;
            }
            // Defaults and overrides
            let barSpacing = variables.slider_track.gap ? parseInt(variables.slider_track.gap) : 5;
            let barOrientation = variables._vertical ? "vertical" : "horizontal";
            let cornerRadius = variables.slider_track.bar_border_radius ? parseInt(variables.slider_track.bar_border_radius) : 0;
            // Set defaults based on orientation
            if (barOrientation === 'horizontal') {
              barHeight = height; // Default to height
              barWidth = variables.slider_track.bar_thickness ? parseInt(variables.slider_track.bar_thickness) : 10; // Default to 10px, but user may change
            } else {
              barWidth = width; // Default to width
              barHeight = variables.slider_track.bar_thickness ? parseInt(variables.slider_track.bar_thickness) : 10; // Default to 10px, but user may change
            }
            let startColor, endColor;
            if (variables._vertical) {
              startColor = variables.entity_match_slider_start
                ? variables.entity_color
                : variables.slider_track.gradient_start_color.trim();
              endColor = variables.entity_match_slider_end
                ? variables.entity_color
                : variables.slider_track.gradient_end_color.trim();
            } else {
              startColor = variables.entity_match_slider_start
                ? variables.entity_color
                : variables.slider_track.gradient_start_color.trim();
              endColor = variables.entity_match_slider_end
                ? variables.entity_color
                : variables.slider_track.gradient_end_color.trim();
            }
            // Parse colors to RGB arrays.  Array values will pass to interpolateColor function
            const startRgb = variables.__parse_color(startColor,'rgb',this);
            const endRgb = variables.__parse_color(endColor,'rgb',this);
            function interpolateColor(color1, color2, factor) {
              const result = color1.map((c, i) => Math.round(c + factor * (color2[i] - c)));
              return `rgb(${result.join(',')})`;
            }
            // Autocalculate numBars
            let numBars = barOrientation === 'horizontal' ? Math.floor((width + barSpacing) / (barWidth + barSpacing)) : Math.floor((height + barSpacing) / (barHeight + barSpacing));
            //numBars = numBars+1;
            let bars = '';
            let x = 0, y = 0;
            for (let i = 0; i < numBars; i++) {
              const factor = i / (numBars - 1);
              const color = interpolateColor(startRgb, endRgb, factor);
              bars += `<rect x="${barOrientation === 'horizontal' ? x : 0}" y="${barOrientation === 'horizontal' ? 0 : y}" width="${barWidth}" height="${barHeight}" rx="${cornerRadius}" ry="${cornerRadius}" fill="${color}" />`;
              x += barOrientation === 'horizontal' ? barWidth + barSpacing : 0;
              y += barOrientation === 'horizontal' ? 0 : barHeight + barSpacing;
            }
            // Build SVG string directly
            const svgString = `
              <svg width="100%" height="100%" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
                <g>
                  ${bars}
                </g>
              </svg>
            `;
            return svgString;
          } catch (error) {
            return '';
          }
        ]]]
      z_gauge: |
        [[[
          let minVal = variables.gauge.min;
          let maxVal = variables.gauge.max;
          let increment = variables.gauge.increment;
          let width = parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size);
          let height = parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size);
          if (variables._vertical && variables._mode == 'gauge' && variables._gauge_style == 'picard') {
              let percent = (variables.gauge.picard_ratio !== undefined && !isNaN(variables.gauge.picard_ratio)) ? variables.gauge.picard_ratio / 100 : 40 / 100;
            width = width * percent;
            height = parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size) - (2 * parseInt(variables.card.gap));
          }
          const orientation = variables._vertical ? 'vertical' : 'horizontal';
          const showSubticks = variables.gauge.sub_meter.show_sub_meter;
          const entityState = entity.state;
          const attribute = variables.attribute;
          let isActive;
          if (attribute && !isNaN(Number(entity.attributes?.[attribute]))) {
            isActive = Number(entity.attributes[attribute]) > 0;
          } else {
            isActive = (entityState === 'on' || (entityState !== 'off' && Number(entityState) > 0));
          }
          const meter_bg_color = isActive ? variables.gauge.color.background.active : variables.gauge.color.background.inactive;
          const meter_tick_color = isActive ? variables.gauge.color.active : variables.gauge.color.inactive;
          const meter_subtick_color = isActive ? variables.gauge.sub_meter.active : variables.gauge.sub_meter.inactive;
          const meter_label_color = isActive ? variables.gauge.label.active : variables.gauge.label.inactive;
          const meter_label_font_size = variables.__get_num_with_unit(variables.gauge.label.font_size);
          const meter_subtick_size = parseInt(variables.gauge.sub_meter.tick_size) || 10;
          const numSubticks = variables.gauge.sub_meter.tick_count;
          const numSegments = (maxVal - minVal) / increment; // Calculate the number of segments
          const subTickIncrement = 100 / numSegments / (numSubticks + 1);
          const decimal_places = variables.gauge.label.decimal_places || 0;
          const connect_ticks = variables.gauge.connect_ticks || false;
          const tick_line_thickness = variables.gauge.tick_line_thickness || 1;
          const meterTicks = [];
          for (let i = minVal; i <= maxVal; i += increment) {
            const percent = orientation === 'vertical' ? 100 - ((i - minVal) / (maxVal - minVal) * 100) : (i - minVal) / (maxVal - minVal) * 100;
            const position = percent + '%';
            const labelOffset = orientation === 'vertical' ? 'translate(-5, 0)' : 'translate(0, -5)';
            meterTicks.push(`<line x1="${orientation === 'vertical' ? (connect_ticks ? tick_line_thickness : '0') : position}" y1="${orientation === 'vertical' ? position : (connect_ticks ? tick_line_thickness : '0')}" x2="${orientation === 'vertical' ? '100%' : position}" y2="${orientation === 'vertical' ? position : '100%'}" stroke="${meter_tick_color}" stroke-width="2"/>`);
            meterTicks.push(`<text x="${orientation === 'vertical' ? '100%' : position}" y="${orientation === 'vertical' ? position : '100%'}" font-size="${meter_label_font_size}" fill="${meter_label_color}" text-anchor="end" transform="${labelOffset}" dx="${orientation === 'vertical' ? '3' : '-3'}" dy="${orientation === 'vertical' ? '18' : '3'}">${i.toFixed(decimal_places)}${variables._show_unit_of_measurement ? variables.entity_unit_of_measurement : ''}</text>`);
            if (showSubticks && i < maxVal) {
              for (let j = 1; j <= numSubticks; j++) {
                const subTickPercent = orientation === 'vertical' ? percent - (j * subTickIncrement) : percent + (j * subTickIncrement);
                const subTickPosition = subTickPercent + '%';
                meterTicks.push(`<line x1="${orientation === 'vertical' ? (connect_ticks ? tick_line_thickness : '0') : subTickPosition}" y1="${orientation === 'vertical' ? subTickPosition : (connect_ticks ? tick_line_thickness : '0')}" x2="${orientation === 'vertical' ? meter_subtick_size + (connect_ticks ? tick_line_thickness : 0) : subTickPosition}" y2="${orientation === 'vertical' ? subTickPosition : meter_subtick_size + (connect_ticks ? tick_line_thickness : 0)}" stroke="${meter_subtick_color}" stroke-width="1"/>`);
              }
            }
          }
          const ranges = variables.gauge.ranges || [];
          let rangeBackgrounds = '';
          //if (variables.gauge.range.enabled && variables._gauge_style == 'basic') {
          if (variables.gauge.range.enabled && (!variables._vertical || (variables._vertical && variables._gauge_style == 'basic'))) {            ranges.forEach(range => {
              const fromPercent = ((range.from - minVal) / (maxVal - minVal)) * 100;
              const toPercent = ((range.to - minVal) / (maxVal - minVal)) * 100;
              const rangeWidth = toPercent - fromPercent;
              rangeBackgrounds += `
                <rect x="${orientation === 'vertical' ? '0' : fromPercent + '%'}" y="${orientation === 'vertical' ? 100 - toPercent + '%' : '0'}"
                      width="${orientation === 'vertical' ? '100%' : rangeWidth + '%'}" height="${orientation === 'vertical' ? rangeWidth + '%' : '100%'}"
                      fill="${range.color}" />
              `;
            });
          }
          const tickLine = connect_ticks ? (orientation === 'vertical' ?
            `<line x1="${tick_line_thickness / 2}" y1="0" x2="${tick_line_thickness / 2}" y2="100%" stroke="${meter_tick_color}" stroke-width="${tick_line_thickness}" />` :
            `<line x1="0" y1="${tick_line_thickness / 2}" x2="100%" y2="${tick_line_thickness / 2}" stroke="${meter_tick_color}" stroke-width="${tick_line_thickness}" />`) : '';
          return `
            <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
              <rect x="0" y="0" width="100%" height="100%" fill="${meter_bg_color}"/>
              ${rangeBackgrounds}
              ${tickLine}
              ${meterTicks.join('')}
            </svg>
          `;
        ]]]
      z_isPicardMode: |
        [[[
          return (variables._mode == 'gauge' && variables._vertical && variables._gauge_style == 'picard');
        ]]]
    state:
      - id: state_on
        operator: template
        value: |
          [[[
            return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    let border = variables.__get_num_with_unit(parseInt(variables.card.border.bottom.size))
                    return border + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
            gauge_control:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.active;
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.active;
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.active;
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.active;
                    }
                  ]]]
            locked_bar:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.active;
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.active;
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.active;
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.active;
                    }
                  ]]]
            slider_bg:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
      - id: state_off
        operator: template
        value: |
          [[[
            return entity !== undefined && ['off', 'closed', 'unlocked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + (variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + (variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + (variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + (variables.card.color.inactive || variables.card.border.color);
                  ]]]
            gauge_control:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.inactive;
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.inactive;
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.inactive;
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.inactive;
                    }
                  ]]]
            locked_bar:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.gauge.range.border.color.inactive;
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.gauge.range.border.color.inactive;
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid "  +  variables.gauge.range.border.color.inactive;
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.gauge.range.border.color.inactive;
                    }
                  ]]]
            slider_bg:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
      - id: state_unavailable
        operator: template
        value: |
          [[[
            return entity !== undefined && ['unknown', 'unavailable'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
            gauge_control:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            locked_bar:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            slider_bg:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
      - id: state_heat
        value: heat
        styles:
          custom_fields:
            gauge:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
            gauge_control:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            locked_bar:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            slider_bg:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
      - id: state_cool
        value: cool
        styles:
          custom_fields:
            gauge:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
            gauge_control:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            locked_bar:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            slider_bg:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
      - id: state_zero
        operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            const attr = variables.attribute;
            if (attr && !isNaN(Number(entity.attributes?.[attr]))) {
              return Number(entity.attributes[attr]) === 0;
            }
            return entity !== undefined && Number(states[entity.entity_id].state) === 0;
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
            gauge_control:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            locked_bar:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.inactive || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.inactive || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.inactive || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.inactive || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            slider_bg:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
      - id: state_nonzero
        operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            const attr = variables.attribute;
            if (attr && !isNaN(Number(entity.attributes?.[attr]))) {
              return Number(entity.attributes[attr]) !== 0;
            }
            return entity !== undefined && Number(states[entity.entity_id].state) !== 0;
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
            gauge_control:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            locked_bar:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            slider_bg:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
      - id: state_default
        operator: default
        styles:
          custom_fields:
            gauge:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
            gauge_control:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            locked_bar:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-bottom: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-left: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
              - border-right: |
                  [[[
                    if (variables.z_isPicardMode) {
                      return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.gauge.range.border.color.active || variables.card.color.active || variables.card.border.color);
                    }
                  ]]]
            slider_bg:
              - transition: all 0.2s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
    styles:
      card:
        - background: none
        - border-radius: 0 !important
        - border: none
        - height: 100%
        - max-width: none
      label:
        - z-index: 2
        - visibility: |
            [[[
              if (variables.z_isPicardMode){
                return 'visible';
              }
            ]]]
        - background: |
            [[[
              return (variables.z_isPicardMode) ? 'black' : 'none';
            ]]]
        - background-clip: padding-box
        - height: |
            [[[
              if (variables.z_isPicardMode){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " + 1px )"
              } else {
                return '100%'
              }
            ]]]
        - width: |
            [[[
              if (variables.z_isPicardMode) {
                return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"
              } else {
                return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-left: |
            [[[
              if (variables.z_isPicardMode) {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - border-top: |
            [[[
              if (variables.z_isPicardMode) {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - right: |
            [[[
              if (variables.z_isPicardMode) {
                return 0;
              }
            ]]]
        - left: null
      name:
        - z-index: 2
        - background: |
            [[[
              return (variables.z_isPicardMode) ? 'black' : 'none';
            ]]]
        - background-clip: padding-box
        - height: |
            [[[
              if (variables.z_isPicardMode){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") + " + variables.__get_num_with_unit(variables.card.gap) +")"
              } else {
                return '100%'
              }
            ]]]
        - width: |
            [[[
              if (variables.z_isPicardMode) {
                return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"
              } else {
                return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-left: |
            [[[
              if (variables.z_isPicardMode) {
                return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables.z_isPicardMode) {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") solid transparent";
              }
            ]]]
        - right: |
            [[[
              if (variables.z_isPicardMode) {
                return 0;
              }
            ]]]
        - bottom: |
            [[[
              if (variables.z_isPicardMode) {
                return 0;
              }
            ]]]
        - left: null
        - top: null
      state:
        - z-index: 2
        - background: |
            [[[
              return (variables.z_isPicardMode) ? 'black' : 'none';
            ]]]
        - background-clip: content-box
        - height: |
            [[[
              if (variables.z_isPicardMode){
                return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") + " + variables.__get_num_with_unit(variables.card.gap) +")"
              } else {
                return '100%'
              }
            ]]]
        - width: |
            [[[
              if (variables.z_isPicardMode) {
                return "calc(50% - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio + ") - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"
              } else {
                return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
              }
            ]]]
        - border-right: |
            [[[
              if (variables.z_isPicardMode) {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio + ") solid transparent";
              }
            ]]]
        - border-bottom: |
            [[[
              if (variables.z_isPicardMode) {
                return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") solid transparent";
              }
            ]]]
        - left: |
            [[[
              if (variables.z_isPicardMode) {
                return 0;
              }
            ]]]
        - bottom: |
            [[[
              if (variables.z_isPicardMode) {
                return 0;
              }
            ]]]
        - right: null
        - top: null
        - justify-content: |
            [[[
              if (variables.z_isPicardMode) {
                return 'left';
              } else {
                return 'right';
              }
            ]]]
      custom_fields:
        ne_mask:
          - z-index: 1
          - top: 0
          - right: 0
          - visibility: |
              [[[
                return (variables.z_isPicardMode) ? "visible" : "hidden";
              ]]]
          - position: absolute
          - display: flex
          - justify: left
          - background: |
              [[[
                return (variables.z_isPicardMode) ? 'black' : 'none';
              ]]]
          - background-clip: padding-box
          - height: |
              [[[
                if (variables.z_isPicardMode){
                  return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " + 1px )"
                } else {
                  return '100%'
                }
              ]]]
          - width: |-
              [[[
                if (variables.z_isPicardMode) {
                  return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + ")"
                } else {
                return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
                }
              ]]]
          - border-left: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
                }
              ]]]
          - border-top: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
                }
              ]]]
          - right: |
              [[[
                if (variables.z_isPicardMode) {
                  return 0;
                }
              ]]]
          - left: null
        sw_mask:
          - z-index: 1
          - visibility: |
              [[[
                return (variables.z_isPicardMode) ? "visible" : "hidden";
              ]]]
          - position: absolute
          - display: flex
          - justify: left
          - background: black
          - background-clip: padding-box
          - height: |
              [[[
                if (variables.z_isPicardMode){
                  return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") + " + variables.__get_num_with_unit(variables.card.gap) +")"
                } else {
                  return '100%'
                }
              ]]]
          - width: |
              [[[
                if (variables.z_isPicardMode) {
                    return "calc(50% - " + variables.__get_num_with_unit(variables.card.gap) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio +") )"
                } else {
                return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
                }
              ]]]
          - border-right: |
              [[[
                if (variables.z_isPicardMode) {
                  return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio + ") solid transparent";
                }
              ]]]
          - border-bottom: |
              [[[
                if (variables.z_isPicardMode) {
                  return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio +") solid transparent";
                }
              ]]]
          - left: |
              [[[
                if (variables.z_isPicardMode) {
                  return 0;
                }
              ]]]
          - bottom: |
              [[[
                if (variables.z_isPicardMode) {
                  return 0;
                }
              ]]]
          - right: null
          - top: null
          - justify-content: |
              [[[
                if (variables.z_isPicardMode) {
                  return 'left';
                }
              ]]]
        se_mask:
          - z-index: 1
          - visibility: |
              [[[
                return (variables.z_isPicardMode) ? "visible" : "hidden";
              ]]]
          - position: absolute
          - display: flex
          - justify: left
          - background: |
              [[[
                return (variables.z_isPicardMode) ? 'black' : 'none';
              ]]]
          - background-clip: padding-box
          - height: |
              [[[
                if (variables.z_isPicardMode){
                  return "calc(" + variables.__get_num_with_unit(variables.card.border.bottom.size) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") + " + variables.__get_num_with_unit(variables.card.gap) +")"
                } else {
                  return '100%'
                }
              ]]]
          - width: |-
              [[[
                if (variables.z_isPicardMode) {
                  return "calc(50% - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + ")"
                } else {
                return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
                }
              ]]]
          - border-left: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
                }
              ]]]
          - border-bottom: |
              [[[
                if (variables.z_isPicardMode) {
                  return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.height_ratio + ") solid transparent";
                }
              ]]]
          - right: |
              [[[
                if (variables.z_isPicardMode) {
                  return 0;
                }
              ]]]
          - bottom: |
              [[[
                if (variables.z_isPicardMode) {
                  return 0;
                }
              ]]]
          - left: null
        animation:
          - visibility: |
              [[[
                return (variables.z_isPicardMode) ? "visible" : "hidden";
              ]]]
          - z-index: 1
          - background: |
              [[[
                return (variables.z_isPicardMode) ? 'black' : 'none';
              ]]]
          - background-clip: content-box
          - height: |
              [[[
                if (variables.z_isPicardMode){
                  return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " - " + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " + 1px )"
                } else {
                  return '100%'
                }
              ]]]
          - width: |-
              [[[
                if (variables.z_isPicardMode) {
                  return "calc(50% - " + variables.__get_num_with_unit(variables.card.gap) + " - (" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio +") )"
                } else {
                return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
                }
              ]]]
          - border-right: |
              [[[
                if (variables.z_isPicardMode) {
                  return "calc(" + variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " * " + variables.gauge.range.width_ratio + ") solid transparent";
                }
              ]]]
          - border-top: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.gauge.tick_line_thickness) + " solid transparent";
                }
              ]]]
          - left: |
              [[[
                if (variables.z_isPicardMode) {
                  return 0;
                }
              ]]]
          - right: null
          - position: absolute
          - top: 0
          - background: black
          - display: flex
          - align-items: |
              [[[
                return variables.animation.align_items || 'center';
              ]]]
          - justify-content: |
              [[[
                return variables.animation.justify_content || 'center';
              ]]]
          - filter: |
              [[[
                if (variables.animation?.filter?.advanced) {
                  return variables.animation.filter.advanced;
                }
                const filter = variables.animation.filter || {};
                const filters = [];
                if (filter.blur !== undefined) filters.push(`blur(${filter.blur}px)`);
                if (filter.brightness !== undefined) filters.push(`brightness(${filter.brightness}%)`);
                if (filter.saturate !== undefined) filters.push(`saturate(${filter.saturate}%)`);
                if (filter.invert !== undefined) filters.push(`invert(${filter.invert}%)`);
                if (filter.sepia !== undefined) filters.push(`sepia(${filter.sepia}%)`);
                if (filter.grayscale !== undefined) filters.push(`grayscale(${filter.grayscale}%)`);
                if (filter.hue_rotate !== undefined) filters.push(`hue-rotate(${filter.hue_rotate}deg)`);
                if (filter.contrast !== undefined) filters.push(`contrast(${filter.contrast}%)`);
                if (filter.opacity !== undefined) filters.push(`opacity(${filter.opacity}%)`);
                return filters.length > 0 ? filters.join(' ') : 'none';
              ]]]
        gauge:
          - background: none
          - text-align: |
              [[[
                return (variables.z_isPicardMode) ? 'left' : '';
              ]]]
          - visibility: >-
              [[[ return (variables._mode === 'gauge') ? 'visible' : 'hidden'
              ]]]
          - position: absolute
          - top: 0px
          - left: |
              [[[
                if (variables.z_isPicardMode) {
                  return '';
                } else {
                return 0;
                }
              ]]]
          - right: |
              [[[
                if (variables.z_isPicardMode) {
                  return 0;
                }
              ]]]
          - width: >-
              [[[
                if (variables.z_isPicardMode) {
                  return '50%'
                } else {
                return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
              variables.__get_num_with_unit(variables.card.border.left.size)  +
              " - " +
              variables.__get_num_with_unit(variables.card.border.right.size) +
              " )"
                }
              ]]]
          - height: |
              [[[
                if(variables.z_isPicardMode) {
                  return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size) +
                  " - (2 * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                  ")"
                }
              ]]]
          - padding-bottom: |
              [[[
                return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
              ]]]
          - padding-top: |
              [[[
                return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
              ]]]
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-top-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
              ]]]
          - border-top-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
              ]]]
          - border-bottom-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
              ]]]
          - border-bottom-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
              ]]]
        slider_track_control:
          - visibility: >-
              [[[ return ((variables._mode === 'slider') &&
              !(variables.slider.locked)) ? 'visible' : 'hidden' ]]]
          - position: absolute
          - top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size);
              ]]]
          - left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size);
              ]]]
          - width: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.width) + " - " +
              variables.__get_num_with_unit(variables.card.border.left.size) + "
              - " +
              variables.__get_num_with_unit(variables.card.border.right.size)  +
              ")" ]]]
          - height: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.height) + " - " +
              variables.__get_num_with_unit(variables.card.border.top.size) + "
              - " +
              variables.__get_num_with_unit(variables.card.border.bottom.size) +
              ")" ]]]
        slider_bg:
          - visibility: >-
              [[[ return (variables._mode === 'slider') ? 'visible' : 'hidden'
              ]]]
          - position: absolute
          - top: 0px
          - width: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.width) +  " - " +
              variables.__get_num_with_unit(variables.card.border.left.size) + "
              - " +
              variables.__get_num_with_unit(variables.card.border.right.size) +
              " - " +
              variables.__get_num_with_unit(variables.slider_track.padding.left)
              + " - " +
              variables.__get_num_with_unit(variables.slider_track.padding.right)
              + ")" ]]]
          - height: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.height) +  " - " +
              variables.__get_num_with_unit(variables.card.border.top.size) +  "
              - " +
              variables.__get_num_with_unit(variables.card.border.bottom.size) +
              " - " +
              variables.__get_num_with_unit(variables.slider_track.padding.top)
              + " - " +
              variables.__get_num_with_unit(variables.slider_track.padding.bottom)
              + ")" ]]]
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-top-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
              ]]]
          - border-top-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
              ]]]
          - border-bottom-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
              ]]]
          - border-bottom-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
              ]]]
          - background: '[[[ return variables.z_slider ]]]'
          - padding-left: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.left) + ")";
              ]]]
          - padding-top: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.top) + ")";
              ]]]
          - padding-right: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.right) + ")";
              ]]]
          - padding-bottom: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.bottom) + ")";
              ]]]
        gauge_control:
          - background: none
          - visibility: >-
              [[[ return ((variables._mode === 'gauge') &&
              !(variables.slider.locked)) ? 'visible' : 'hidden' ]]]
          - position: absolute
          - top: |
              [[[
                  if (variables.z_isPicardMode) {
                    return 0;
                  }
                  if (variables._vertical) {
                    return variables.__get_num_with_unit(variables.card.border.top.size);
                  } else {
                    return "calc(" + variables.__get_num_with_unit(variables.slider.padding.top) + " + " + variables.__get_num_with_unit(variables.card.border.top.size) + ")"
                  }
              ]]]
          - left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size);
              ]]]
          - width: |-
              [[[
                if (variables.z_isPicardMode) {
                    return "calc( 50% - " + variables.__get_num_with_unit(variables.card.gap) + ")";
                  }
                return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " + variables.__get_num_with_unit(variables.card.border.left.size)  + " - " + variables.__get_num_with_unit(variables.card.border.right.size) + ")";
              ]]]
          - height: |
              [[[
                let gap_count = (variables._gauge_style == 'picard') ? 2 : 0;
                if(variables._mode == 'gauge' && variables._vertical) {
                  return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size) +
                  " - (" + gap_count + " * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                  ")"
                }
              ]]]
          - padding-bottom: |
              [[[
                return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
              ]]]
          - padding-top: |
              [[[
                return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
              ]]]
          - border-top: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
                }
              ]]]
          - border-bottom: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
                }
              ]]]
          - border-left: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
                }
              ]]]
          - border-right: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
                }
              ]]]
        locked_bar:
          - visibility: '[[[ return (variables.slider.locked) ? ''visible'' : ''hidden'' ]]]'
          - overflow: visible
          - position: absolute
          - left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size);
              ]]]
          - top: |
              [[[
                if (variables.z_isPicardMode) {
                  return 0;
                }
                return variables.__get_num_with_unit(variables.card.border.top.size);
              ]]]
          - width: |-
              [[[
                if (variables._mode === 'slider') {
                  return "calc(" +
                    variables.__get_num_with_unit(variables.card.width) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.left.size) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.right.size) +
                    " + " +
                    variables.__get_num_with_unit(variables.slider_track.padding.left) +
                    " + " +
                    variables.__get_num_with_unit(variables.slider_track.padding.right) +
                    ")";
                }
                if (variables.z_isPicardMode) {
                    return "calc( 50% - " + variables.__get_num_with_unit(variables.card.gap) + ")";
                  }
                return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " + variables.__get_num_with_unit(variables.card.border.left.size)  + " - " + variables.__get_num_with_unit(variables.card.border.right.size) + ")";
              ]]]
          - height: |-
              [[[
                if (variables._mode === 'slider') {
                  return "calc(" +
                    variables.__get_num_with_unit(variables.card.height) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.top.size) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.bottom.size) +
                    " + " +
                    variables.__get_num_with_unit(variables.slider_track.padding.top) +
                    " + " +
                    variables.__get_num_with_unit(variables.slider_track.padding.bottom) +
                    ")";
                }
                let gap_count = (variables._gauge_style == 'picard') ? 2 : 0;
                if(variables._mode == 'gauge' && variables._vertical) {
                  return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size) +
                  " - (" + gap_count + " * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                  ")"
                }
                return "calc(" +
                  variables.__get_num_with_unit(variables.card.height) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size) +
                  ")";
              ]]]
          - padding-bottom: |
              [[[
                return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
              ]]]
          - padding-top: |
              [[[
                return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
              ]]]
          - border-top: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
                }
              ]]]
          - border-bottom: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
                }
              ]]]
          - border-left: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
                }
              ]]]
          - border-right: |
              [[[
                if (variables.z_isPicardMode) {
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
                }
              ]]]
        ranges_alt:
          - background: none
          - text-align: |
              [[[
                return (variables.z_isPicardMode) ? 'left' : '';
              ]]]
          - visibility: >-
              [[[ return (variables._mode === 'gauge' && variables._vertical &&
              variables._gauge_style == 'picard') ? 'visible' : 'hidden' ]]]
          - position: absolute
          - top: 0
          - left: 0
          - display: flex
          - justify-content: flex-end
          - width: >-
              [[[
                if (variables.z_isPicardMode) {
                  return "calc( 50% - " + variables.__get_num_with_unit(variables.card.gap) + ")"
                } else {
                return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
              variables.__get_num_with_unit(variables.card.border.left.size)  +
              " - " +
              variables.__get_num_with_unit(variables.card.border.right.size) +
              " )"
                }
              ]]]
          - height: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.card.height) + " - " +
                variables.__get_num_with_unit(variables.card.border.top.size)  + " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size) +
                " - (2 * " + variables.__get_num_with_unit(variables.card.gap) + ")" +
                ")"
              ]]]
          - padding-bottom: |
              [[[
                return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
              ]]]
          - padding-top: |
              [[[
                return (variables._vertical && variables._gauge_style =='picard') ? variables.__get_num_with_unit(variables.card.gap) : 0;
              ]]]
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid transparent" ;
              ]]]
          - border-bottom: |
              [[[
                let border = parseInt(variables.card.border.bottom.size); //+ parseInt(variables.card.gap);
                return  variables.__get_num_with_unit(border) + " solid transparent";
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid transparent";
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid transparent";
              ]]]
          - border-top-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
              ]]]
          - border-top-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
              ]]]
          - border-bottom-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
              ]]]
          - border-bottom-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
              ]]]
    custom_fields:
      ranges_alt: |
        [[[
          let width = parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size);
          let height = parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size) - (2 * parseInt(variables.card.gap));
          if (variables.z_isPicardMode) {
            let ratio = variables.gauge?.range?.width_ratio || 2;
            width = variables.gauge.tick_line_thickness * ratio;
          }
          const entityState = entity.state;
          //const outerRectColor = (entityState === 'on' || (entityState !== 'off' && Number(entityState) > 0)) ? variables.gauge.range.border.color.active : variables.gauge.range.border.color.inactive;
          const attribute = variables.attribute;
          let isActive;
          if (attribute && !isNaN(Number(entity.attributes?.[attribute]))) {
            isActive = Number(entity.attributes[attribute]) > 0;
          } else {
            isActive = (entityState === 'on' || (entityState !== 'off' && Number(entityState) > 0));
          }
          const outerRectColor = isActive ? variables.gauge.range.border.color.active : variables.gauge.range.border.color.inactive;
          // inset color and thickness - this is the stroke on range rects
          const borderColor = variables.gauge.range.inset.border.color || 'black';
          const borderThickness = parseInt(variables.gauge.range.inset.border.size);
          let borderGap = parseInt(variables.card.border.gap) || 5;
          let insetGap = parseInt(variables.gauge.range.inset.gap) || parseInt(variables.card.border.gap);
          // gap between ranges (set to 0 when using svg stroke)
          const rangeGap = 0;
          // svg offsets to start drawing
          const startX = 0;
          const startY = 0;
          // Setup ranges - if enabled
          const ranges = (variables.gauge.range.enabled) ? (variables.gauge.ranges || []) : [];
          let rects = '';
          // Calculate Available Range Area Height (remove rangeGap if used, and borderGap used as top/bottom padding)
          const availableRangeHeight = height - ((ranges.length - 1) * rangeGap) - (2 * borderGap);
          // svg rect for background
          rects += `
              <rect x="${startX}" y="${startY}" width="${width}" height="${height}" fill="${outerRectColor}" /> &lt;-- GRAY BACKGROUND -->
          `;
          // Iterate through ranges - generate rects at proper positions in available range height
          for (let i = 0; i < ranges.length; i++) {
            const range = ranges[i];
            const fromPercent = ((range.from - variables.gauge.min) / (variables.gauge.max - variables.gauge.min)) * 100;
            const toPercent = ((range.to - variables.gauge.min) / (variables.gauge.max - variables.gauge.min)) * 100;
            const rangePercentHeight = toPercent - fromPercent;
            const barHeight = (rangePercentHeight / 100) * availableRangeHeight; // SIMPLE HEIGHT CALC
            // set range X position and width
            const rangeX = startX; // SIMPLE X
            const rangeWidth = width - insetGap; // SIMPLE WIDTH - Reduced by borderGap
            const rangeY_bottom = startY + height - borderGap - ((fromPercent / 100) * availableRangeHeight); // Bottom edge - ABSOLUTE Y CALC - FROM PERCENT
            const rangeY = rangeY_bottom - barHeight; // Top edge - ABSOLUTE Y CALC
            rects += `
              <rect x="${rangeX}" y="${rangeY}" width="${rangeWidth}" height="${barHeight}" fill="${range.color}" stroke="${borderColor}" stroke-width="${borderThickness}" />
            `;
          }
          return `
            <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
              ${rects}
            </svg>
          `;
        ]]]
      se_mask: |
        [[[
          return "";
        ]]]
      ne_mask: |
        [[[
          return "";
        ]]]
      sw_mask: |
        [[[
          return "";
        ]]]
      gauge: |
        [[[
          return variables.z_gauge;
        ]]]
      slider_bg: |
        [[[
          return variables.z_slider;
        ]]]
      locked_bar: |
        [[[
          const entityState = entity.state;
          const entityType = entity.entity_id.split('.')[0]; // Extract entity type
          const attr = variables.attribute;
          let progress = 0;
          // try to get the attribute value provided by the user
          if(attr) {
            progress = parseFloat(states[entity.entity_id].attributes[attr]) || 0;
          } else {
            switch(entityType) {
              case 'light':
                progress = ((parseFloat(entity.attributes.brightness) / 256) * 100);
                break;
              case 'fan':
                progress = (parseFloat(entity.attributes.percentage));
                break;
              default:
                progress = (parseFloat(entityState));
                break;
            }
          }
          const progressPercentage = ((progress / variables.slider.max) * 100);
          const remainingPercentage = 100 - progressPercentage;
          const isVertical = variables._vertical;
          const borderRadius = variables.slider.border_radius;
          const borderWidth = variables.slider.border_width;
          const borderColor = variables.slider.border_color;
          const maskColor = variables.slider_track.mask_color;
          const calcWidth = `calc(${variables.__get_num_with_unit(variables.card.width)} - ${variables.__get_num_with_unit(variables.card.border.left.size)} - ${variables.__get_num_with_unit(variables.card.border.right.size)} )`;
          const calcHeight = `calc(${variables.__get_num_with_unit(variables.card.height)} - ${variables.__get_num_with_unit(variables.card.border.top.size)} - ${variables.__get_num_with_unit(variables.card.border.bottom.size)} )`;
          const sliderPaddingTop = variables.__get_num_with_unit(variables.slider.padding.top);
          const sliderPaddingLeft = variables.__get_num_with_unit(variables.slider.padding.left);
          const sliderHeight = variables.__get_num_with_unit(variables._slider_thickness);
          // thumb
          const thumbEnabled = (variables.slider.locked && variables._vertical && variables.slider.thumb.enabled) || false;
          const thumbHeight = variables.slider.thumb.height || '12px';
          const thumbColor = variables.slider.thumb.color || 'white';
          const thumbBorderColor = variables.slider.thumb.border.color || 'black';
          const thumbBorderSize = parseInt(variables.slider.thumb.border.size) || '3px';
          const thumbBorderRadius = parseInt(variables.slider.thumb.border.radius) || '50%';
          if (variables._mode === 'gauge') {
            const leftStyle = (variables._gauge_style == 'picard' && isVertical) ? 'unset' : (isVertical ? sliderPaddingTop : sliderPaddingLeft);
            const rightStyle = (variables._gauge_style == 'picard' && isVertical) ? variables.__get_num_with_unit(variables.slider.picard_right) : 'unset';
            let thumbBorderStyle = variables.__get_num_with_unit(thumbBorderSize) + " solid " + thumbBorderColor;
            let thumbLeftStyle =  'calc(-150% - ' + variables.__get_num_with_unit(thumbBorderSize) + ')';
            return `
              <div class="progress-bar" style="
                position: absolute;
                ${isVertical ? 'bottom: 0;' : 'left: 0;'}
                top: ${isVertical ? 'unset' : sliderPaddingTop};
                left: ${leftStyle};
                right: ${rightStyle};
                width: ${isVertical ? sliderHeight : progressPercentage + '%'};
                height: ${isVertical ? progressPercentage + '%' : sliderHeight};
                border-radius: ${borderRadius};
                border: ${borderWidth} solid ${borderColor};
                background-color: ${variables.slider.color};
              ">
                <div class="progress-bar-custom-thumb" style="
                  height: ${thumbHeight}px;
                  background: ${thumbColor};
                  position: absolute;
                  width: 400%;
                  visibility: ${thumbEnabled ? 'visible' : 'hidden'};
                  border: ${thumbBorderStyle};
                  left: ${isVertical ? thumbLeftStyle : 'auto'};
                  border-radius: ${thumbBorderRadius}%;
                  z-index: 2;
                  top: -${thumbHeight / 2}px;
                "></div>
              </div>
            `;
          } else if (variables._mode === 'slider') {
            return `
              <div class="slider-background" style="
                position: absolute;
                width: ${calcWidth};
                height: ${calcHeight};
                border-radius: unset !important;
              ">
                <div class="slider-mask" style="
                  position: absolute;
                  ${isVertical ? 'top: 0;' : 'right: 0;'}
                  width: ${isVertical ? '100%' : remainingPercentage + '%'};
                  height: ${isVertical ? remainingPercentage + '%' : '100%'};
                  border-radius: unset !important;
                  background-color: ${maskColor};
                "></div>
              </div>
            `;
          }
        ]]]
      gauge_control:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: '[[[ return variables.slider.mode ]]]'
          vertical: '[[[ return variables._vertical ]]]'
          flipped: false
          inverse: false
          step: '[[[ return variables.slider.step; ]]]'
          min: |
            [[[
            //  if (variables.slider.mode === 'temperature') {
            //    return entity.attributes.min_mired
            //  } else {
                return variables.slider.min;
            //  }
            ]]]
          max: |
            [[[
            //  if (variables.slider.mode === 'temperature') {
            //    return entity.attributes.max_mired
            //  } else {
                return variables.slider.max;
            //  }
            ]]]
          styles:
            card:
              - width: |
                  [[[
                      if (variables.z_isPicardMode) {
                          return "100%";
                        }
                      return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " + variables.__get_num_with_unit(variables.card.border.left.size)  + " - " + variables.__get_num_with_unit(variables.card.border.right.size) + ")";
                  ]]]
              - background: none
              - border-radius: 0
            progress:
              - background-color: >-
                  [[[
                    return variables.slider.color;
                  ]]]
              - border: >-
                  [[[
                    return variables.slider.border_width + " solid " + variables.slider.border_color;
                  ]]]
              - border-radius: '[[[ return variables.slider.border_radius ]]]'
              - height: '[[[ return variables.slider.height ]]]'
              - width: '[[[ return variables.slider.width ]]]'
              - left: |-
                  [[[
                    return (variables.z_isPicardMode) ? "" : variables.__get_num_with_unit(variables.slider.padding.left);
                  ]]]
            container:
              - border-radius: 0
              - overflow: visible
            track:
              - background: none
              - width: >-
                  [[[ return variables._vertical ? variables.slider.width :
                  '']]]
              - left: |
                  [[[
                    if (variables._vertical && variables._gauge_style != 'picard') {
                      return "calc(" + variables.__get_num_with_unit(variables.gauge.sub_meter.tick_size) + ")"
                    }
                  ]]]
              - position: |
                  [[[
                    return (variables.z_isPicardMode) ? 'absolute' : 'relative';
                  ]]]
              - right: |-
                  [[[
                    return (variables.z_isPicardMode) ? variables.__get_num_with_unit(variables.slider.picard_right) : "";
                  ]]]
            thumb:
              - visibility: |
                  [[[
                    return (variables.slider.thumb.enabled && variables._vertical && !(variables.slider.locked)) ? 'visible' : 'hidden'
                  ]]]
              - width: |
                  [[[
                    return variables._vertical ? '400%' : '';
                  ]]]
              - background-color: |
                  [[[
                    return variables.slider.thumb.color || 'white';
                  ]]]
              - border: |
                  [[[
                    let thickness = variables.__get_num_with_unit(variables.slider.thumb.border.size) || '3px'
                    let color = variables.slider.thumb.border.color || 'black';
                    return thickness + " solid " + color;
                  ]]]
              - top: |
                  [[[
                    return "-" + variables.__get_num_with_unit((variables.slider.thumb.height / 2))
                  ]]]
              - left: |
                  [[[
                    let thickness = variables.__get_num_with_unit(variables.slider.thumb.border.size) || '3px'
                    return variables._vertical ? 'calc(-150% - ' + thickness + ')' : '';
                  ]]]
              - border-radius: |
                  [[[
                    return variables.__get_num_with_unit(variables.slider.thumb.border.radius,'%') || '50%';
                  ]]]
              - height: |
                  [[[
                    return variables.__get_num_with_unit(variables.slider.thumb.height) || '12px';
                  ]]]
              - z-index: 2
      slider_track_control:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: '[[[ return variables.slider.mode ]]]'
          vertical: '[[[ return variables._vertical ]]]'
          flipped: true
          inverse: true
          step: '[[[ return variables.slider.step; ]]]'
          min: |
            [[[
                return variables.slider.min;
            ]]]
          max: |
            [[[
                return variables.slider.max;
            ]]]
          styles:
            progress:
              - background-color: '[[[ return variables.slider_track.mask_color; ]]]'
            container:
              - border-radius: 0
            track:
              - background: none
            thumb:
              - background: none
            card:
              - width: >-
                  [[[ return "calc(" +
                  variables.__get_num_with_unit(variables.card.width) + " - " +
                  variables.__get_num_with_unit(variables.card.border.left.size)
                  + " - " +
                  variables.__get_num_with_unit(variables.card.border.right.size)
                  + ")"; ]]]
              - height: >-
                  [[[ return "calc(" +
                  variables.__get_num_with_unit(variables.card.height) + " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size)
                  + " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size)
                  + ")" ]]]
              - border-radius: unset !important
              - background: none
  cb-lcars-footer-base:
    template:
      - cb-lcars-functions
      - cb-lcars-button-base
      - cb-lcars-symbiont
    variables:
      label: ' '
      text:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
      state:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
      name:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
      card:
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
            unavailable: transparent
        border:
          color: var(--lcars-card-bottom-color)
    styles:
      label:
        - z-index: 2
      name:
        - z-index: 2
      state:
        - z-index: 2
  cb-lcars-footer:
    template:
      - cb-lcars-footer-base
    show_label: true
    variables:
      card:
         border:
          left:
            size: 90px
          bottom:
            size: 20px
            left_radius: var(--ha-card-border-radius)
      text:
        label:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        state:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        name:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
    styles:
      label:
        - border-bottom-left-radius: |
            [[[
                let leftRadius = variables.card.border.bottom.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
        - border-bottom-right-radius: 0px
  cb-lcars-footer-open:
    template:
      - cb-lcars-footer-base
    show_label: true
    variables:
      card:
        border:
          bottom:
            size: 20px
  cb-lcars-footer-contained:
    template:
      - cb-lcars-footer-open
    show_label: true
    variables:
      card:
        min_height: 10px
        border:
          left:
            size: 50px
          right:
            size: 50px
          bottom:
            size: 10px
            left_radius: var(--ha-card-border-radius)
            right_radius: var(--ha-card-border-radius)
          top:
            left_radius: 0px
            right_radius: 0px
    styles:
      label:
        - border-bottom-left-radius: |
            [[[
                let leftRadius = variables.card.border.bottom.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
        - border-bottom-right-radius: |
            [[[
                let rightRadius = variables.card.border.bottom.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-footer-right:
    template:
      - cb-lcars-footer-base
    show_label: true
    variables:
      card:
        border:
          right:
            size: 90px
          bottom:
            size: 20px
            right_radius: var(--ha-card-border-radius)
      text:
        label:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        state:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        name:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
    styles:
      label:
        - border-bottom-left-radius: 0px
        - border-bottom-right-radius: |
            [[[
                let rightRadius = variables.card.border.bottom.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-button-lozenge:
    template: cb-lcars-button-base
    variables:
      card:
        border:
          top:
            left_radius: null
            right_radius: null
          bottom:
            left_radius: null
            right_radius: null
      icon:
        border:
          left:
            padding: 0px
          right:
            padding: 3px
  cb-lcars-button-lozenge-right:
    template: cb-lcars-button-lozenge
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        justify: right
        border:
          left:
            color: black
            padding: 3px
          right:
            color: transparent
            padding: 3px
  cb-lcars-actions-hue-tap:
    tap_action:
      action: navigate
      navigation_path: |
        [[[
          return "\#hue_card:" + variables.action.hue_api + "_openHueScreen"
        ]]]
    double_tap_action:
      action: more-info
    hold_action:
      action: toggle
  cb-lcars-actions-hue-hold:
    tap_action:
      action: toggle
    double_tap_action:
      action: more-info
    hold_action:
      action: navigate
      navigation_path: |
        [[[
          return "\#hue_card:" + variables.action.hue_api + "_openHueScreen"
        ]]]
  cb-lcars-actions-toggle:
    tap_action:
      action: toggle
      haptic: success
    double_tap_action:
      action: more-info
      haptic: success
    hold_action:
      action: more-info
      haptic: success
  cb-lcars-actions-more-info:
    tap_action:
      action: more-info
      haptic: success
    double_tap_action:
      action: more-info
      haptic: success
    hold_action:
      action: more-info
      haptic: success
  cb-lcars-actions-disable:
    tap_action:
      action: none
      haptic: failure
    double_tap_action:
      action: none
      haptic: failure
    hold_action:
      action: none
      haptic: failure
  cb-lcars-theme:
    template:
        - cb-lcars-functions
        - cb-lcars-defs
    triggers_update:
      - '[[[ return variables.___helpers.alert_condition ]]]'
    custom_fields:
      colors: |
        [[[
          const themes = variables.__defs.themes;
          let alertCondition = 'green'; // Default to 'green'
          if (variables.___helpers && variables.___helpers.alert_condition) {
            const entityState = states[variables.___helpers.alert_condition];
            if (entityState) {
              alertCondition = entityState.state.toLowerCase();
            } else {
              variables.__cblcarsLog('error', `Entity ${variables.___helpers.alert_condition} does not exist - defaulting to condition ${alertCondition}!`);
            }
          }
          const selectedTheme = themes[`${alertCondition}_alert`];
          //console.debug(variables.__defs.debug_title,'Setting alert condition ${alertCondition}'); 
          variables.__cblcarsLog('info',`Setting alert condition ${alertCondition}`);
          const colors = selectedTheme.colors;
          for (const [colorGroup, colorValues] of Object.entries(colors)) {
            for (const [colorName, colorValue] of Object.entries(colorValues)) {
              const cssVarName = `--${colorName}`;
              //if (getComputedStyle(document.documentElement).getPropertyValue(cssVarName).trim()) {
                //console.debug(variables.__defs.debug_title,`Setting ${cssVarName}=${colorValue}`);
                variables.__cblcarsLog('debug',`Setting ${cssVarName}=${colorValue}`);
                document.documentElement.style.setProperty(cssVarName, colorValue);
              //}
            }
          }
        ]]]
      font: |
        [[[
          variables.__cblcarsLog('debug', `Adding link to font from: ${variables.__defs.font_url}`);
          const existingLink = document.querySelector(`link[href="${variables.__defs.font_url}"]`);
          if (!existingLink) {
            const link = document.createElement('link'); 
            link.href = variables.__defs.font_url; 
            link.rel = 'stylesheet'; 
            document.head.appendChild(link);
            variables.__cblcarsLog('debug', `Added link to font from: ${variables.__defs.font_url}`);
          } else {
            variables.__cblcarsLog('debug', `Font link already exists: ${variables.__defs.font_url}`);
          } 
        ]]]
    styles:
      custom_fields:
        colors:
          - height: 0
          - width: 0
          - visibility: hidden
        font:
          - height: 0
          - width: 0
          - visibility: hidden 
  cb-lcars-animation-cascade:
    template:
      - cb-lcars-functions
    variables:
      enable_resize_observer: true
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
      animation:
        cascade:
          grid:
            num_cols: null
            gap: 8
            num_rows: null
          color:
            text: var(--picard-dark-blue)
            animation_start: var(--picard-blue)
            animation_end: var(--picard-moonlight)
          text:
            font_size: 24
            font_weight: 300
    styles:
      label:
        - z-index: 2
      custom_fields:
        animation:
          - display: flex
          - position: absolute
          - align-items: center
    custom_fields:
      animation: |
        [[[
          const patternDefault = [
            { duration: 3, delay: 0.1 },
            { duration: 3, delay: 0.2 },
            { duration: 4, delay: 0.3 },
            { duration: 4, delay: 0.4 },
            { duration: 4, delay: 0.5 },
            { duration: 2, delay: 0.6 },
            { duration: 2, delay: 0.7 },
            { duration: 2, delay: 0.8 }
          ];
          const patternNiagara = [
            { duration: 2, delay: 0.1 },
            { duration: 2, delay: 0.2 },
            { duration: 2, delay: 0.3 },
            { duration: 2, delay: 0.4 },
            { duration: 2, delay: 0.5 },
            { duration: 2, delay: 0.6 },
            { duration: 2, delay: 0.7 },
            { duration: 2, delay: 0.8 }
          ];
          const patternFrozen = [
            { duration: 3, delay: 0.1 },
            { duration: 3, delay: 0.2 },
            { duration: 4, delay: 0.3 },
            { duration: 4, delay: 0.4 },
            { duration: 4, delay: 0.5 },
            { duration: 2, delay: 0.6 },
            { duration: 2, delay: 0.7 },
            { duration: 2, delay: 0.8 }
          ];
          //const customPattern = variables.animation.cascade.custom_pattern;
          const customPatternInput = variables.animation.cascade.custom_pattern;
          let customPattern;
          if (typeof customPatternInput === 'string') {
            try {
              customPattern = JSON.parse(customPatternInput);
              console.log('customPattern json parsed:', customPattern);
            } catch (e) {
              console.error('Failed to parse custom_pattern as JSON:', e);
              customPattern = patternDefault;
            }
          } else if (Array.isArray(customPatternInput)) {
            customPattern = customPatternInput;
          } else {
            customPattern = patternDefault;
          }
          const patternName = variables.animation.cascade.pattern || 'patternDefault';
          const patternMap = {
            default: patternDefault,
            niagara: patternNiagara,
            frozen: patternFrozen,
            custom: customPattern
          };
          const animationSettings = patternMap[patternName] || patternDefault;
          //console.debug("animationSettings: ",animationSettings);
          //console.debug("patternName: ",patternName);
          //const card_height = (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          //const card_width = (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          const card_height = variables.animation.height !== undefined ? parseInt(variables.animation.height) : (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          const card_width = variables.animation.width !== undefined ? parseInt(variables.animation.width) : (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          const align_items = variables.animation.cascade.align_items || 'center';
          const justify_content = variables.animation.cascade.justify_content || 'center';
          //console.debug( `${card_height}`);
          //console.debug( `${card_width}`);
          const font_size = variables.__get_num_with_unit(variables.animation.cascade.text.font_size) || '24px';
          const font_weight = variables.animation.cascade.text.font_weight || '300';
          const row_height = variables.__get_num_with_unit(variables.animation.cascade.grid.row_height) || font_size;
          const column_width = variables.__get_num_with_unit(variables.animation.cascade.grid.column_width) || variables.__get_num_with_unit((parseInt(variables.animation.cascade.text.font_size * 2.5))) ||'80px';
          const grid_gap = variables.__get_num_with_unit(variables.animation.cascade.grid.gap) || '8px';
          const text_color = variables.animation.cascade.color.text || '#000';
          const animation_start_color = variables.animation.cascade.color.animation_start || '#26f';
          const animation_end_color = variables.animation.cascade.color.animation_end || '#def';
          const auto_num_cols =  variables.__calculate_grid_cells((parseInt(card_width) - parseInt(grid_gap)),column_width,grid_gap,12);
          //console.debug(`${auto_num_cols}`);
          //console.debug("row_height: ",row_height);
          //console.debug("grid_gap: ",grid_gap);
          //console.debug("card_height - grid_gap: ",(parseInt(card_height) - parseInt(grid_gap)));
          const auto_num_rows =  variables.__calculate_grid_cells((parseInt(card_height) - parseInt(grid_gap)),row_height,grid_gap,8);
          //console.debug(`${auto_num_rows}`);
          const num_rows = variables.animation.cascade.grid.num_rows || auto_num_rows;
          const num_cols = variables.animation.cascade.grid.num_cols || auto_num_cols;
          // Function to get random color variable from our palette
          function getRandomColor() {
            const colors = [animation_start_color, animation_end_color, text_color];
            return colors[Math.floor(Math.random() * colors.length)];
          }
          // Function to generate random text for cells (digits, floats, or text)
          function getRandomText() {
            const types = ['digit', 'float','digit', 'float', 'text'];
            const type = types[Math.floor(Math.random() * types.length)];
            switch (type) {
              case 'digit':
                return Math.floor(Math.random() * 10000).toString().padStart(4, '0');
              case 'float':
                return (Math.random() * 100).toFixed(2);
              case 'text':
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                return chars.charAt(Math.floor(Math.random() * chars.length)) + chars.charAt(Math.floor(Math.random() * chars.length));
              default:
                return '00';
            }
          }
          let rows = '';
          let keyframes = '';
          for (let i = 1; i <= num_rows; i++) {
            const { duration, delay } = animationSettings[(i - 1) % animationSettings.length];
            const randomColor = getRandomColor();
            keyframes += `
              @keyframes colorchange-frozen-${i} {
                0% {color: ${animation_start_color}}
                25% {color: ${animation_start_color}}
                50% {color: ${animation_start_color}}
                75% {color: ${animation_start_color}}
                80% {color: ${text_color}}
                90% {color: ${text_color}}
                100% {color: ${randomColor}}
              }
            `;
            rows += `
              <div class="row-${i} row">
                ${Array.from({ length: num_cols }, (_, j) => `
                  <div class="cell dc${j + 1}">${getRandomText()}</div>
                `).join('')}
              </div>
            `;
          }
          const isFrozen = patternName === 'frozen';
          const animationIterationCount = isFrozen ? '1' : 'infinite';
          const animationFillMode = isFrozen ? 'forwards' : 'none';
          const keyframesName = isFrozen ? 'colorchange-frozen' : 'colorchange';
          const defaultKeyframes = `
            @keyframes colorchange {
              0% {color: ${animation_start_color}}
              25% {color: ${animation_start_color}}
              50% {color: ${animation_start_color}}
              75% {color: ${animation_start_color}}
              80% {color: ${text_color}}
              90% {color: ${text_color}}
              100% {color: ${animation_end_color}}
            }
          `;
          const customKeyframes = variables.animation.cascade.custom_keyframes || defaultKeyframes;
          return `
            <elt>
              <style>
                ${customKeyframes}
                ${keyframes}
                .cascade-wrapper {
                  flex: 1;
                  padding-right: 1px;
                  display: flex;
                  flex-grow: 1;
                  width: ${card_width};
                  height: ${card_height};
                  align-items: ${align_items};
                  justify-content: ${justify_content};
                }
                .data-cascade {
                  font-size: ${font_size};
                  font-weight: ${font_weight};
                  line-height: 1;
                }
                ${Array.from({ length: num_rows }, (_, i) => `
                  .row-${i + 1} {
                    display: grid;
                    grid-template-columns: repeat(${num_cols}, ${column_width});
                    gap: ${grid_gap};
                    color: ${text_color};
                    animation: ${keyframesName}${isFrozen ? `-${i + 1}` : ''} ${animationSettings[i % animationSettings.length].duration}s ${animationIterationCount};
                    animation-delay: ${animationSettings[i % animationSettings.length].delay}s;
                    animation-fill-mode: ${animationFillMode};
                    margin-bottom: ${grid_gap}; /* Add spacing between rows */
                    height: ${row_height}
                  }
                `).join('')}
                .cell {
                  text-align: right;
                }
              </style>
              <div class="cascade-wrapper">
                <div class="data-cascade" id="default">
                  ${rows}
                </div>
              </div>
            </elt>
          `;
        ]]]
  cb-lcars-animation-pulsewave:
    variables:
      enable_resize_observer: true
      animation:
        pulsewave:
          color:
            line_color: black
            start_color: var(--lcars-ui-tertiary)
            end_color: black
          pattern: default
          line_height: 20
          line_width: 3
          line_width_even: 4
          line_angle: 15
          custom_keyframes: null
          custom_pattern: null
          line_heights: null
          scale_line_heights: true
          align_items: center
    styles:
      label:
        - z-index: 1
    custom_fields:
      animation: |
        [[[
          // Calculate card dimensions
          //const card_height = (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          //const card_width = (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          const card_height = variables.animation.height !== undefined ? parseInt(variables.animation.height) : (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          const card_width = variables.animation.width !== undefined ? parseInt(variables.animation.width) : (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          // Get line properties
          const line_height = (variables.animation.pulsewave.line_height !== undefined ) ? parseInt(variables.animation.pulsewave.line_height) : 20;
          const line_width = (variables.animation.pulsewave.line_width !== undefined ) ? parseInt(variables.animation.pulsewave.line_width) : 3;
          const line_width_even = (variables.animation.pulsewave.line_width_even !== undefined ) ? parseInt(variables.animation.pulsewave.line_width_even) : 4;
          const line_color = variables.animation.pulsewave.color.line_color || '#000';
          const animation_start_color = variables.animation.pulsewave.color.animation_start || 'var(--picard-blue)';
          const animation_end_color = variables.animation.pulsewave.color.animation_end || '#000';
          const line_angle = (variables.animation.pulsewave.line_angle !== undefined) ? variables.animation.pulsewave.line_angle : 17;
          let line_transform = variables.animation.pulsewave.line_transform || `rotate(${line_angle}deg)`;
          const align_items = variables.animation.pulsewave.align_items || 'center';
          const justify_content = variables.animation.pulsewave.justify_content || 'center';
          // Initialize keyframes
          let keyframes = '';
          const pattern_width = line_width + line_width_even;
          const num_lines = variables.animation.pulsewave.num_lines || Math.ceil(card_width / pattern_width) * 2;
          // Use custom keyframes if provided
          const customKeyframes = variables.animation.pulsewave.custom_keyframes;
          if (customKeyframes) {
            keyframes = customKeyframes;
          } else {
            // Use provided original heights if available
            const originalHeights = variables.animation.pulsewave.line_heights || [180, 120, 230, 60, 30];
            const scaleHeights = variables.animation.pulsewave.scale_line_heights ?? true;
            let newHeights;
            if (scaleHeights === false) {
              newHeights = originalHeights;
            } else {
              const maxOriginalHeight = Math.max(...originalHeights);
              const heightRatios = originalHeights.map(height => height / maxOriginalHeight);
              // Calculate new heights based on card_height
              newHeights = heightRatios.map(ratio => Math.round(ratio * card_height));
            }
            // Define keyframes based on new heights
            const animationSettingsDefault = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 0.6 }
            ];
            const animationSettingsSineWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 0.6 }
            ];
            const animationSettingsSquareWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 0.5, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 0.5, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 0.5, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 0.5, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 0.5, delay: 0.6 }
            ];
            const animationSettingsTriangleWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 0.6 }
            ];
            const animationSettingsSawtoothWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 0.6 }
            ];
            const animationSettingsRandomWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.6 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.8 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 1 }
            ];
            const patternName = variables.animation.pulsewave.pattern || 'default';
            const animationSettingsMap = {
              default: animationSettingsDefault,
              sine: animationSettingsSineWave,
              square: animationSettingsSquareWave,
              triangle: animationSettingsTriangleWave,
              sawtooth: animationSettingsSawtoothWave,
              random: animationSettingsRandomWave,
              custom: animationSettingsDefault
            };
            const animationSettings = animationSettingsMap[patternName] || animationSettingsDefault;
            keyframes = '';
            animationSettings.forEach(({ keyframe, height }) => {
              if (patternName === 'sine') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    25% { height: ${height * 0.75}px; }
                    50% { height: ${height / 2}px; }
                    75% { height: ${height * 0.75}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else if (patternName === 'square') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    50% { height: ${height / 2}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else if (patternName === 'triangle') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    50% { height: ${height / 2}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else if (patternName === 'sawtooth') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    25% { height: ${height * 0.75}px; }
                    50% { height: ${height / 2}px; }
                    75% { height: ${height * 0.25}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else if (patternName === 'random') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    50% { height: ${height / 2}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    50% { height: ${height / 2}px; }
                    100% { height: ${height}px; }
                  }
                `;
              }
            });
          }
          let lines = '';
          for (let i = 1; i <= num_lines; i++) {
            lines += `<div class="line line-${i}"></div>`;
          }
          const patternDefault = [
            'animateLine-5 1s 0.2s infinite',
            'animateLine-4 1s 0.3s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-2 1s 0.5s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-3 1s 0.9s infinite',
            'animateLine-3 1s 1s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-2 1s 0.5s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-4 1s 0.3s infinite',
            'animateLine-5 1s 0.2s infinite',
            'animateLine-5 1s 0.2s infinite',
            'animateLine-4 1s 0.3s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-2 1s 0.5s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-3 1s 0.9s infinite',
            'animateLine-3 1s 1s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-2 1s 0.5s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-4 1s 0.3s infinite',
            'animateLine-5 1s 0.2s infinite'
          ];
          const patternNiagara = [
            'animateLine-5 1s 0.1s infinite',
            'animateLine-4 1s 0.2s infinite',
            'animateLine-2 1s 0.3s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-1 1s 0.5s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-3 1s 0.8s infinite',
            'animateLine-3 1s 0.9s infinite',
            'animateLine-1 1s 1s infinite',
            'animateLine-1 1s 1.1s infinite',
            'animateLine-1 1s 1.2s infinite',
            'animateLine-2 1s 1.3s infinite',
            'animateLine-2 1s 1.4s infinite',
            'animateLine-4 1s 1.5s infinite',
            'animateLine-5 1s 1.6s infinite'
          ];
          const patternSineWave = [
            'animateLine-1 1s 0.2s infinite',
            'animateLine-2 1s 0.3s infinite',
            'animateLine-3 1s 0.4s infinite',
            'animateLine-4 1s 0.5s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-4 1s 0.7s infinite',
            'animateLine-3 1s 0.8s infinite',
            'animateLine-2 1s 0.9s infinite',
            'animateLine-1 1s 1s infinite'
          ];
          const patternSquareWave = [
            'animateLine-5 1s 0.2s infinite',
            'animateLine-5 1s 0.2s infinite',
            'animateLine-1 1s 0.4s infinite',
            'animateLine-1 1s 0.4s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-1 1s 0.8s infinite'
          ];
          const patternTriangleWave = [
            'animateLine-1 1s 0.2s infinite',
            'animateLine-2 1s 0.3s infinite',
            'animateLine-3 1s 0.4s infinite',
            'animateLine-4 1s 0.5s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-4 1s 0.7s infinite',
            'animateLine-3 1s 0.8s infinite',
            'animateLine-2 1s 0.9s infinite',
            'animateLine-1 1s 1s infinite'
          ];
          const patternSawtoothWave = [
            'animateLine-1 1s 0.2s infinite',
            'animateLine-2 1s 0.3s infinite',
            'animateLine-3 1s 0.4s infinite',
            'animateLine-4 1s 0.5s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-2 1s 0.8s infinite',
            'animateLine-3 1s 0.9s infinite',
            'animateLine-4 1s 1s infinite'
          ];
          const patternRandomWave = [
            'animateLine-5 1s 0.2s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-4 1s 0.6s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-3 1s 1s infinite',
            'animateLine-2 1s 0.7s infinite',
            'animateLine-5 1s 0.5s infinite',
            'animateLine-1 1s 0.3s infinite',
            'animateLine-4 1s 0.1s infinite'
          ];
          // Determine the pattern to use
          const patternName = variables.animation.pulsewave.pattern || 'default';
          const patternMap = {
            default: patternDefault,
            niagara: patternNiagara,
            sine: patternSineWave,
            square: patternSquareWave,
            triangle: patternTriangleWave,
            sawtooth: patternSawtoothWave,
            random: patternRandomWave,
            custom: variables.animation.pulsewave.custom_pattern ? JSON.parse(variables.animation.pulsewave.custom_pattern) : patternDefault
          };
          const nthChildAnimations = patternMap[patternName] || patternDefault;
          return `
            <elt>
              <style>
                .wrapper {
                  flex: 1;
                  display: flex;
                  flex-grow: 1;
                  align-items: ${align_items};
                  justify-content: ${justify_content};
                  height: ${card_height}px;
                  width: ${card_width}px;
                }
                .line {
                  height: ${line_height}px;
                  width: ${line_width}px;
                  background: linear-gradient( ${line_color}, ${animation_start_color}, ${line_color}, ${animation_end_color});
                  transform: ${line_transform};
                }
                .line:nth-child(even) {
                  width: ${line_width_even}px;
                }
                ${keyframes}
                ${Array.from({ length: num_lines }, (_, i) => `
                  .line:nth-child(${i + 1}) { animation: ${nthChildAnimations[i % nthChildAnimations.length]}; }
                `).join('')}
              </style>
              <div class="wrapper">
                ${lines}
              </div>
            </elt>
          `;
        ]]]
  cb-lcars-animation-bg-grid:
    template:
      - cb-lcars-functions
      - cb-lcars-animation-presets
    variables:
      animation:
        bg_grid:
          direction: left
          speed: 30
          background_pattern: none
          background_effect: auto
          background_speed: null
          background_zoom: {}
          grid_effect: auto
          grid_speed: null
          grid_zoom: {}
          grid:
            preset: rect
            num_major_rows: 3
            num_minor_rows: 3
            num_major_cols: 3
            num_minor_cols: 3
            line_width_major: 4
            line_width_minor: 1
            border_lines: true
            bracket_width: 5
            bracket_radius: 7
            bracket_color: var(--lcars-yellow)
            bracket_gap: 35
            bracket_fill: rgba(128,128,128,0.08)
            bracket_height: 20
          color:
            line: var(--picard-dark-gray)
          stars:
            seed: |
              [[[
                // Generate a random seed for the stars (32-bit unsigned integer)
                return Math.floor(Math.random() * 1e9);
              ]]]
          nebula:
            preset: default
            nebula_effect: true
            base_frequency: 1
            num_octaves: 3
            scale: 40
            seed: 2
            blur: true
            blur_level: 8
            animate: true
            animation_duration: 20
    styles:
      label:
        - z-index: 2
      custom_fields:
        animation:
          - display: flex
          - position: absolute
          - align-items: center
    custom_fields:
      animation: |
        [[[
          const card_height = variables.animation.height !== undefined ? parseInt(variables.animation.height) : (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          const card_width = variables.animation.width !== undefined ? parseInt(variables.animation.width) : (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          const num_major_rows = variables.animation.bg_grid.grid.num_major_rows ?? 3;
          const num_major_cols = variables.animation.bg_grid.grid.num_major_cols ?? 3;
          let num_minor_rows = variables.animation.bg_grid.grid.num_minor_rows ?? 3; // Number of minor rows between major rows
          let num_minor_cols = variables.animation.bg_grid.grid.num_minor_cols ?? 3; // Number of minor columns between major columns
          num_minor_rows = Math.max(0, num_minor_rows - 1);
          num_minor_cols = Math.max(0, num_minor_cols - 1);
          const total_rows = num_major_rows * (num_minor_rows + 1);
          const total_cols = num_major_cols * (num_minor_cols + 1);
          const row_height = card_height / total_rows;
          const column_width = card_width / total_cols;
          const direction = variables.animation.bg_grid.direction ?? 'left';
          const line_width_minor = variables.animation.bg_grid.grid.line_width_minor ?? 1;
          const line_width_major = variables.animation.bg_grid.grid.line_width_major ?? 2;
          const line_color = variables.animation.bg_grid.color.line || 'var(--picard-dark-gray)';
          const border_lines_horizontal = direction === 'up' || direction === 'down';
          const border_lines_vertical = direction === 'left' || direction === 'right';
          const bg_pattern = variables.animation.bg_grid.background_pattern || 'none';
          const global_effect = variables.animation.bg_grid.effect ?? 'scroll';
          const global_speed = variables.animation.bg_grid.speed ?? 10;
          const global_zoom = variables.animation.bg_grid.zoom ?? {};
          /////////////////////////////////////////////
          // Helper functions to resolve local vs global settings
          function resolveEffect(local, global) {
            if (!local || local === 'auto') return global;
            return local;
          }
          // Always prefer local, fallback to speed, then global
          function resolveSpeed(local, global) {
            return (local === null || local === undefined) ? global : local;
          }
          function resolveZoom(local, global) {
            return { ...(global || {}), ...(local || {}) };
          }
          /////////////////////////////////////////////
          // Resolve effects and speeds for background and grid
          const background_effect = resolveEffect(variables.animation.bg_grid.background_effect, global_effect);
          const grid_effect = resolveEffect(variables.animation.bg_grid.grid_effect, global_effect);
          const background_speed = resolveSpeed(variables.animation.bg_grid.background_speed, global_speed);
          const grid_speed = resolveSpeed(variables.animation.bg_grid.grid_speed, global_speed);
          const background_zoom = resolveZoom(variables.animation.bg_grid.background_zoom, global_zoom);
          const grid_zoom = resolveZoom(variables.animation.bg_grid.grid_zoom, global_zoom);
          // Zoom config for background
          const backgroundZoomLayers = background_zoom.layers ?? 3;
          const backgroundZoomScaleFrom = background_zoom.scale_from ?? 1; // NEW: initial scale
          const backgroundZoomScaleTo = background_zoom.scale_to ?? 2;
          const backgroundZoomDuration = background_zoom.speed ?? background_speed;
          const backgroundZoomOpacityFadeIn = background_zoom.opacity_fade_in ?? 10;
          const backgroundZoomOpacityFadeOut = background_zoom.opacity_fade_out ?? 80;
          // Zoom config for grid
          const gridZoomLayers = grid_zoom.layers ?? 1;
          const gridZoomScaleFrom = grid_zoom.scale_from ?? 1; // NEW: initial scale
          const gridZoomScaleTo = grid_zoom.scale_to ?? 2;
          const gridZoomDuration = grid_zoom.speec ?? grid_speed;
          const gridZoomOpacityFadeIn = grid_zoom.opacity_fade_in ?? 10;
          const gridZoomOpacityFadeOut = grid_zoom.opacity_fade_out ?? 80;
          let fill_color = 'transparent';
          if (variables.animation.bg_grid.background_pattern === 'fill') {
            fill_color = variables.animation.bg_grid.color?.fill;
          } else {
            fill_color = 'transparent';
          }
          const pattern_width = total_cols * column_width;
          const pattern_height = total_rows * row_height;
          // Error checking
          if (isNaN(card_height) || isNaN(card_width) || card_height <= 0 || card_width <= 0 ||
              isNaN(total_rows) || isNaN(total_cols) || total_rows <= 0 || total_cols <= 0 ||
              isNaN(row_height) || isNaN(column_width) || row_height <= 0 || column_width <= 0) {
            return '';
          }
          /////////////////////////////////////////////
          // -- not used yet
          // Helper to generate a random seed
          function randomSeed() {
            return Math.floor(Math.random() * 1e9);
          }
          // Seeded random number generator (Mulberry32)
          function mulberry32(seed) {
            return function() {
              let t = seed += 0x6D2B79F5;
              t = Math.imul(t ^ t >>> 15, t | 1);
              t ^= t + Math.imul(t ^ t >>> 7, t | 61);
              return ((t ^ t >>> 14) >>> 0) / 4294967296;
            }
          }
          /////////////////////////////////////////////
          // --- STARS BG PATTERN ---
          //  Randomized, tileable starfield pattern
          //  'animation.bg_grid.stars' options:
          //    - count: number of stars
          //    - min_radius: minimum radius of stars
          //    - max_radius: maximum radius of stars
          //    - min_brightness: minimum brightness of stars
          //    - max_brightness: maximum brightness of stars
          //    - pattern_width: width of the star pattern
          //    - pattern_height: height of the star pattern
          //    - color: color of the stars (supports hex, rgb, rgba, CSS variables)
          //  can use 'variables.bg_grid.color.fill' color for the background
          //  Uses seeded RNG for reproducibility
          //  Supports both scroll and zoom effects
          //
          /////////////////////////////////////////////
          const starSettings = variables.animation.bg_grid.stars ?? {};
          const numStars = starSettings.count ?? 150;
          const starSeed = starSettings.seed ?? 1;
          const starMinRadius = starSettings.min_radius ?? 0.2;
          const starMaxRadius = starSettings.max_radius ?? 0.9;
          const starMinBrightness = starSettings.min_brightness ?? 0.2;
          const starMaxBrightness = starSettings.max_brightness ?? 1.0;
          const starPatternWidth = starSettings.pattern_width ?? 200;
          const starPatternHeight = starSettings.pattern_height ?? 200;
          const starColor = starSettings.color ?? '#fff';
          // Use 'fill' for compatibility
          const userBgColor = variables.animation.bg_grid.color?.fill ?? '#000';
          /////////////////////////////////////////////
          // Generate a tileable star pattern with seeded RNG for reproducibility
          // numStars: number of stars to generate
          // width: width of the pattern
          // height: height of the pattern
          // minR: minimum radius of stars
          // maxR: maximum radius of stars
          // minB: minimum brightness of stars (0-1)
          // maxB: maximum brightness of stars (0-1)
          // seed: seed for the RNG (default: 1)
          // color: color of the stars (supports hex, rgb, rgba, CSS variables)
          // Returns a string of SVG circles representing the stars
          function generateTileableStarsSeeded(numStars, width, height, minR, maxR, minB, maxB, seed, color) {
            let stars = '';
            const rand = mulberry32(seed);
            // Normalize color input to array
            let colorArray;
            if (Array.isArray(color)) {
              colorArray = color.length > 0 ? color : ['#fff'];
            } else {
              colorArray = [color ?? '#fff'];
            }
            for (let i = 0; i < numStars; i++) {
              const cx = rand() * width;
              const cy = rand() * height;
              const r = rand() * (maxR - minR) + minR;
              const brightness = rand() * (maxB - minB) + minB;
              // Pick a color from the array using the seeded RNG
              const pickedColor = colorArray[Math.floor(rand() * colorArray.length)];
              let fill;
              if (pickedColor) {
                if (pickedColor.startsWith('#')) {
                  // Convert hex to rgb
                  const hex = pickedColor.replace('#', '');
                  const bigint = parseInt(hex, 16);
                  const rC = (hex.length === 3 ? (bigint >> 8 & 0xf) * 17 : (bigint >> 16) & 0xff);
                  const gC = (hex.length === 3 ? (bigint >> 4 & 0xf) * 17 : (bigint >> 8) & 0xff);
                  const bC = (hex.length === 3 ? (bigint & 0xf) * 17 : bigint & 0xff);
                  fill = `rgba(${rC},${gC},${bC},${brightness})`;
                } else if (pickedColor.startsWith('rgb')) {
                  // If rgb(a), just replace the alpha
                  fill = pickedColor.replace(/rgba?\(([^)]+)\)/, (m, rgb) => {
                    const parts = rgb.split(',').map(x => x.trim());
                    return `rgba(${parts[0]},${parts[1]},${parts[2]},${brightness})`;
                  });
                } else if (pickedColor.startsWith('var(') || pickedColor.startsWith('--') || /^[a-zA-Z]/.test(pickedColor)) {
                  // Accept CSS variable or named color, just use as fill (no alpha)
                  fill = pickedColor;
                } else {
                  // Fallback to white with brightness
                  fill = `rgba(255,255,255,${brightness})`;
                }
              } else {
                fill = `rgba(255,255,255,${brightness})`;
              }
              for (let dx = -1; dx <= 1; dx++) {
                for (let dy = -1; dy <= 1; dy++) {
                  if (
                    (dx === 0 && dy === 0) ||
                    (dx !== 0 && (cx < r || cx > width - r)) ||
                    (dy !== 0 && (cy < r || cy > height - r))
                  ) {
                    stars += `<circle cx="${cx + dx * width}" cy="${cy + dy * height}" r="${r}" fill="${fill}" />`;
                  }
                }
              }
            }
            return stars;
          }
          ////////////////////////////////////////////////////
          // Generate the def for the star background pattern
          // For zoom, we generate randomized layers later in buildZoomBackgroundSVGs()
          let svg_bg_stars;
          svg_bg_stars = `
            <defs>
              <pattern id="starPattern" width="${starPatternWidth}" height="${starPatternHeight}" patternUnits="userSpaceOnUse">
                ${generateTileableStarsSeeded(numStars, starPatternWidth, starPatternHeight, starMinRadius, starMaxRadius, starMinBrightness, starMaxBrightness, starSeed, starColor)}
              </pattern>
            </defs>
            <rect x="0" y="0" width="100%" height="100%" fill="url(#starPattern)" />
          `;
          /////////////////////////////////////////////
          // --- NEBULA BG PATTERN ---
          //  Nebula effect with customizable layers, colors, and animations
          //  'animation.bg_grid.nebula' options:
          //    - preset: name of the nebula preset to use (from nebula_presets) or 'custom' for custom layers (see nebula_layers)
          //    - nebula_effect: enable/disable the nebula effect (default: true)
          //
          //    Turbulance and Displacement settings:
          //    - base_frequency: base frequency for the turbulence (default: 0.8)
          //    - num_octaves: number of octaves for the turbulence (default: 3)
          //    - scale: scale factor for the displacement map (default: 40)
          //    - seed: seed for the turbulence noise (default: 2)
          //    - animate: enable/disable animation of the turbulence (default: true)
          //    - animation_duration: duration of the animation in seconds (default: 20)
          //
          //    - blur: enable/disable Gaussian blur effect (default: true)
          //    - blur_level: level of the Gaussian blur (default: 8)
          //
          //  'animation.bg_grid.nebula_layers':
          //
          //  Nebula layers presets are provided by default but can be replaced with custom layers.
          //  this is an array of objects, each with:
          //    - color: color of the nebula layer (hex, rgb, rgba, CSS variable)
          //    - cx: x position of the center (0-100%)
          //    - cy: y position of the center (0-100%)
          //    - rx: x radius of the nebula (default: 40% of the pattern width)
          //    - ry: y radius of the nebula (default: 40% of the pattern height)
          //    - opacity_stops: array of opacity stops for the gradient (default: [1, 0.3, 0])
          //      - first stop (0%): full opacity
          //      - second stop (50%): reduced opacity (default 0.3)
          //      - third stop (100%): fully transparent
          //
          //  Example nebula layers:
          //    nebula_layers:
          //      - color: "#FF00FF"
          //        cx: 30
          //        cy: 30
          //        rx: null  # use default 40% of width
          //        ry: null  # use default 40% of height
          //        opacity_stops: [1, 0.3, 0]  # default stops
          //
          /////////////////////////////////////////////
          const nebulaSettings = variables.animation.bg_grid.nebula ?? {};
          const nebulaPresets = variables.animation.bg_grid.nebula_presets ?? {};
          const nebulaPresetName = nebulaSettings.preset;
          const nebulaEffect = nebulaSettings.nebula_effect !== false; // default true
          const nebulaBaseFrequency = nebulaSettings.base_frequency ?? 0.8;
          const nebulaNumOctaves = nebulaSettings.num_octaves ?? 3;
          const nebulaScale = nebulaSettings.scale ?? 40;
          const nebulaSeed = nebulaSettings.seed ?? 2;
          const nebulaAnimate = nebulaSettings.animate !== false; // default true
          const nebulaAnimationDuration = nebulaSettings.animation_duration ?? 20;
          const nebulaBlur = nebulaSettings.blur !== false; // default true
          const nebulaBlurLevel = nebulaSettings.blur_level ?? 8; // default 8 if not set
          let nebulaLayers;
          // Determine which nebula layers to use based on preset or custom layers
          // If a preset is specified, use that; otherwise, use custom layers if available
          // If no preset is specified, use the default layers
          if (
            nebulaPresetName &&
            nebulaPresets !== 'custom' &&
            nebulaPresets[nebulaPresetName] &&
            Array.isArray(nebulaPresets[nebulaPresetName])
          ) {
            nebulaLayers = nebulaPresets[nebulaPresetName];
          } else if (
            nebulaPresetName === 'custom' &&
            Array.isArray(variables.animation.bg_grid.nebula_layers) &&
            variables.animation.bg_grid.nebula_layers.length > 0
          ) {
            nebulaLayers = variables.animation.bg_grid.nebula_layers;
          } else {
            nebulaLayers = [
              { color: "#FF00FF", cx: 40, cy: 40, rx: 28, ry: 22, opacity_stops: [1, 0.3, 0] },
              { color: "#00FFFF", cx: 65, cy: 35, rx: 22, ry: 18, opacity_stops: [1, 0.3, 0] },
              { color: "#FFD700", cx: 55, cy: 65, rx: 18, ry: 15, opacity_stops: [1, 0.3, 0] },
              { color: "#8A2BE2", cx: 50, cy: 55, rx: 12, ry: 10, opacity_stops: [1, 0.3, 0] }
            ];
          }
          // Helper to build a gradient for each nebula layer
          function buildNebulaGradients(layers) {
            let gradients = '';
            layers.forEach((layer, idx) => {
              const gradId = `nebula${idx}`;
              const color = layer.color;
              const cx = layer.cx ?? 50;
              const cy = layer.cy ?? 50;
              const rx = layer.rx ?? 40;
              const ry = layer.ry ?? 40;
              const stops = layer.opacity_stops;
              // Use a fixed r for all gradients
              const r = 50;
              const scaleX = rx / r;
              const scaleY = ry / r;
              // SVG translate uses 0-1, so convert cx/cy from percent to [0,1]
              const tx = cx / 100;
              const ty = cy / 100;
              // Compose the transform: translate to origin, scale, translate back
              const gradientTransform = `
                translate(${tx},${ty})
                scale(${scaleX},${scaleY})
                translate(${-tx},${-ty})
              `.replace(/\s+/g, ' ').trim();
              gradients += `
                <radialGradient id="${gradId}" cx="${cx}%" cy="${cy}%" r="${r}%" gradientTransform="${gradientTransform}">
                  <stop offset="0%" style="stop-color: ${color}; stop-opacity: ${stops?.[0] ?? 1}" />
                  <stop offset="50%" style="stop-color: ${color}; stop-opacity: ${stops?.[1] ?? 0.3}" />
                  <stop offset="100%" style="stop-color: ${color}; stop-opacity: ${stops?.[2] ?? 0}" />
                </radialGradient>
              `;
            });
            return gradients;
          }
          function buildNebulaRects(layers) {
            let rects = '';
            layers.forEach((layer, idx) => {
              const gradId = `nebula${idx}`;
              const cx = layer.cx ?? 50;
              const cy = layer.cy ?? 50;
              rects += `
                <rect x="0" y="0" width="100%" height="100%" fill="url(#${gradId})" />
              `;
            });
            return rects;
          }
          // --- NEBULA BG PATTERN WITH FILTER & ANIMATION ---
          // If all effects are false, render only the basic radial gradients (no filter)
          function allNebulaEffectsOff() {
            return !nebulaEffect && !nebulaBlur && !nebulaAnimate;
          }
          let svg_bg_nebula;
          if (allNebulaEffectsOff()) {
            // Only render the basic radial gradients, no filter, no animation
            svg_bg_nebula = `
              <defs>
                ${buildNebulaGradients(nebulaLayers)}
              </defs>
              <rect x="0" y="0" width="100%" height="100%" fill="${userBgColor}" />
              ${buildNebulaRects(nebulaLayers)}
            `;
          } else {
            // Build up the filter chain based on toggles
            let filterContent = '';
            if (nebulaEffect) {
              filterContent += `<feTurbulence
                type="fractalNoise"
                baseFrequency="${nebulaBaseFrequency}"
                numOctaves="${nebulaNumOctaves}"
                seed="${nebulaSeed}"
                result="turb"
              >${
                nebulaAnimate
                  ? `
                <animate attributeName="baseFrequency" values="${nebulaBaseFrequency};${nebulaBaseFrequency * 1.5};${nebulaBaseFrequency}" dur="${nebulaAnimationDuration}s" repeatCount="indefinite" />
                <animate attributeName="seed" values="${nebulaSeed};${nebulaSeed + 10};${nebulaSeed}" dur="${nebulaAnimationDuration}s" repeatCount="indefinite" />
                `
                  : ''
              }</feTurbulence>
              <feDisplacementMap in2="turb" in="SourceGraphic" scale="${nebulaScale}" xChannelSelector="R" yChannelSelector="G"/>`;
            }
            if (nebulaBlur) {
              filterContent += `<feGaussianBlur stdDeviation="${nebulaBlurLevel}"/>`;
            }
            svg_bg_nebula = `
              <defs>
                <filter id="nebulaCloud" x="0" y="0" width="100%" height="100%">
                  ${filterContent}
                </filter>
                ${buildNebulaGradients(nebulaLayers)}
              </defs>
              <rect x="0" y="0" width="100%" height="100%" fill="${userBgColor}" />
              <g${filterContent ? ' filter="url(#nebulaCloud)"' : ''}>
                ${buildNebulaRects(nebulaLayers)}
              </g>
            `;
          }
          /////////////////////////////////////////////
          // --- SVG Backgrounds for Nebula and Stars ---
          // --- Assign svg_background based on bg_pattern ---
          let svg_background = '';
          if (bg_pattern === 'nebula') {
            svg_background = svg_bg_nebula;
          } else if (bg_pattern === 'stars') {
            svg_background = svg_bg_stars;
          } else {
            svg_background = '';
          }
          /////////////////////////////////////////////
          // --- GRID ---
          //  Main grid pattern builder, optionally includes background SVG.
          //  Used for both scroll and zoom effects.
          function buildGridPattern(withBackground) {
            let svg = `
              <svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">
              <defs>
                <pattern id="gridPattern" x="0" y="0" width="${pattern_width}" height="${pattern_height}" patternUnits="userSpaceOnUse">
            `;
            if (withBackground) svg += svg_background;
            // Create cells within the pattern
            for (let i = 0; i < total_rows; i++) {
              for (let j = 0; j < total_cols; j++) {
                svg += `<rect x="${j * column_width}" y="${i * row_height}" width="${column_width}" height="${row_height}" fill="${fill_color}" stroke="none" />`;
              }
            }
            // Add horizontal lines within the pattern
            for (let i = 0; i <= total_rows; i++) {
              if (border_lines_horizontal || (i > 0 && i < total_rows)) {
                let current_line_width = line_width_minor;
                if (num_minor_rows > 0 && i % (num_minor_rows + 1) === 0) {
                  current_line_width = line_width_major;
                }
                svg += `<line x1="0" y1="${i * row_height}" x2="${pattern_width}" y2="${i * row_height}" stroke="${line_color}" stroke-width="${current_line_width}" />`;
              }
            }
            // Add vertical lines within the pattern
            for (let j = 0; j <= total_cols; j++) {
              if (border_lines_vertical || (j > 0 && j < total_cols)) {
                let current_line_width = line_width_minor;
                if (num_minor_cols > 0 && j % (num_minor_cols + 1) === 0) {
                  current_line_width = line_width_major;
                }
                svg += `<line x1="${j * column_width}" y1="0" x2="${j * column_width}" y2="${pattern_height}" stroke="${line_color}" stroke-width="${current_line_width}" />`;
              }
            }
            svg += `
                  </pattern>
                </defs>
                <rect width="100%" height="100%" fill="url(#gridPattern)" />
              </svg>`;
            return svg;
          }
          // --- Start bulding the SVG pattern for the grid (without background) ---
          let svg_pattern = buildGridPattern(false);
          let animationStyle = '';
          // --- Zoom effect: seamless infinite zoom using multiple layers ---
          if (background_effect === 'zoom') {
            // Build multiple zoom layers for infinite zoom animation
            let zoomPatterns = '';
            for (let i = 0; i < backgroundZoomLayers; i++) {
              const delay = (i * backgroundZoomDuration) / backgroundZoomLayers;
              let layerSvgPattern;
              if (bg_pattern === 'stars') {
                // Each layer gets a unique star pattern and grid lines, with user background color
                const layerStars = `
                  <rect x="0" y="0" width="100%" height="100%" fill="${userBgColor}" />
                  <defs>
                    <pattern id="starPattern${i}" width="${starPatternWidth}" height="${starPatternHeight}" patternUnits="userSpaceOnUse">
                      ${generateTileableStarsSeeded(numStars, starPatternWidth, starPatternHeight, starMinRadius, starMaxRadius, starMinBrightness, starMaxBrightness, 1000 + i, starColor)}
                    </pattern>
                  </defs>
                  <rect x="0" y="0" width="100%" height="100%" fill="url(#starPattern${i})" />
                `;
                layerSvgPattern = `
                  <svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">
                    ${layerStars}
                    <g>
                      ${(() => {
                        let grid = '';
                        // Cells
                        for (let ii = 0; ii < total_rows; ii++) {
                          for (let jj = 0; jj < total_cols; jj++) {
                            grid += `<rect x="${jj * column_width}" y="${ii * row_height}" width="${column_width}" height="${row_height}" fill="${fill_color}" stroke="none" />`;
                          }
                        }
                        // Horizontal lines
                        for (let ii = 0; ii <= total_rows; ii++) {
                          if (border_lines_horizontal || (ii > 0 && ii < total_rows)) {
                            let current_line_width = line_width_minor;
                            if (num_minor_rows > 0 && ii % (num_minor_rows + 1) === 0) {
                              current_line_width = line_width_major;
                            }
                            grid += `<line x1="0" y1="${ii * row_height}" x2="${pattern_width}" y2="${ii * row_height}" stroke="${line_color}" stroke-width="${current_line_width}" />`;
                          }
                        }
                        // Vertical lines
                        for (let jj = 0; jj <= total_cols; jj++) {
                          if (border_lines_vertical || (jj > 0 && jj < total_cols)) {
                            let current_line_width = line_width_minor;
                            if (num_minor_cols > 0 && jj % (num_minor_cols + 1) === 0) {
                              current_line_width = line_width_major;
                            }
                            grid += `<line x1="${jj * column_width}" y1="0" x2="${jj * column_width}" y2="${pattern_height}" stroke="${line_color}" stroke-width="${current_line_width}" />`;
                          }
                        }
                        return grid;
                      })()}
                    </g>
                  </svg>
                `;
              } else {
                // For nebula or other backgrounds, use the grid pattern builder with background
                layerSvgPattern = buildGridPattern(true);
              }
              zoomPatterns += `<div class="zoom-pattern zoom-layer${i}" style="animation-delay: ${delay}s;">${layerSvgPattern}</div>`;
            }
            // --- CSS and HTML for zoom animation container ---
            animationStyle = `
              <style>
                .zoom-container {
                  overflow: hidden;
                  width: ${card_width}px;
                  height: ${card_height}px;
                  position: relative;
                }
                .zoom-pattern {
                  position: absolute;
                  left: 0; top: 0;
                  width: 100%; height: 100%;
                  will-change: transform, opacity;
                  animation: zoom-infinite ${backgroundZoomDuration}s linear infinite;
                  mix-blend-mode: lighten;
                  opacity: 0;
                }
                @keyframes zoom-infinite {
                  0% {
                    transform: scale(1);
                    opacity: 0;
                  }
                  ${backgroundZoomOpacityFadeIn}% {
                    opacity: 1;
                  }
                  ${backgroundZoomOpacityFadeOut}% {
                    opacity: 1;
                  }
                  100% {
                    transform: scale(${backgroundZoomScaleTo});
                    opacity: 0;
                  }
                }
              </style>
              <div class="zoom-container">
                ${zoomPatterns}
              </div>
            `;
          } else {
            // --- Scroll effect: background and grid scroll independently ---
            svg_pattern = buildGridPattern(true);
            // Use independent speeds for scroll as well
            const backgroundScrollSpeed = background_speed;
            const gridScrollSpeed = grid_speed;
            const track_size = direction === 'up' || direction === 'down' ? pattern_height : pattern_width;
            const track_dimension = track_size * 3;
            // --- CSS and HTML for scroll animation container ---
            animationStyle = `
              <style>
                .scroll-container {
                  overflow: hidden;
                  width: ${card_width}px;
                  height: ${card_height}px;
                  position: relative;
                }
                .scroll-track-bg {
                  display: flex;
                  flex-direction: ${direction === 'up' || direction === 'down' ? 'column' : 'row'};
                  width: ${direction === 'up' || direction === 'down' ? card_width : track_dimension}px;
                  height: ${direction === 'up' || direction === 'down' ? track_dimension : pattern_height}px;
                  animation: scroll-${direction}-bg ${backgroundScrollSpeed}s linear infinite;
                }
                .scroll-track-grid {
                  display: flex;
                  flex-direction: ${direction === 'up' || direction === 'down' ? 'column' : 'row'};
                  width: ${direction === 'up' || direction === 'down' ? card_width : track_dimension}px;
                  height: ${direction === 'up' || direction === 'down' ? track_dimension : pattern_height}px;
                  animation: scroll-${direction}-grid ${gridScrollSpeed}s linear infinite;
                }
                .scroll-pattern {
                  flex: 0 0 ${direction === 'up' || direction === 'down' ? pattern_height : pattern_width}px;
                  height: ${pattern_height}px;
                }
                @keyframes scroll-left-bg {
                  0% { transform: translateX(0); }
                  100% { transform: translateX(${-track_dimension + track_size}px); }
                }
                @keyframes scroll-right-bg {
                  0% { transform: translateX(${-track_dimension + track_size}px); }
                  100% { transform: translateX(0); }
                }
                @keyframes scroll-up-bg {
                  0% { transform: translateY(0); }
                  100% { transform: translateY(${-track_dimension + track_size}px); }
                }
                @keyframes scroll-down-bg {
                  0% { transform: translateY(${-track_dimension + track_size}px); }
                  100% { transform: translateY(0); }
                }
                @keyframes scroll-left-grid {
                  0% { transform: translateX(0); }
                  100% { transform: translateX(${-track_dimension + track_size}px); }
                }
                @keyframes scroll-right-grid {
                  0% { transform: translateX(${-track_dimension + track_size}px); }
                  100% { transform: translateX(0); }
                }
                @keyframes scroll-up-grid {
                  0% { transform: translateY(0); }
                  100% { transform: translateY(${-track_dimension + track_size}px); }
                }
                @keyframes scroll-down-grid {
                  0% { transform: translateY(${-track_dimension + track_size}px); }
                  100% { transform: translateY(0); }
                }
              </style>
              <div class="scroll-container">
                <div class="scroll-track-bg" style="animation-name: scroll-${direction}-bg;">
                  <div class="scroll-pattern">${buildBackgroundSVG()}</div>
                  <div class="scroll-pattern">${buildBackgroundSVG()}</div>
                  <div class="scroll-pattern">${buildBackgroundSVG()}</div>
                </div>
                <div class="scroll-track-grid" style="animation-name: scroll-${direction}-grid;">
                  <div class="scroll-pattern">${buildGridSVG()}</div>
                  <div class="scroll-pattern">${buildGridSVG()}</div>
                  <div class="scroll-pattern">${buildGridSVG()}</div>
                </div>
              </div>
            `;
          }
          /////////////////////////////////////////////
          // --- Helper functions for SVG generation ---
          //  buildBackgroundSVG: returns SVG for background (nebula or stars)
          //  buildGridSVG: returns SVG for grid pattern (rect, hex, diagonal, bracket)
          function buildBackgroundSVG() {
            let svg = `<svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">`;
            if (bg_pattern === 'nebula') {
              // Use the new unified nebula rendering logic
              svg += svg_bg_nebula;
            } else if (bg_pattern === 'stars') {
              svg += svg_bg_stars;
            }
            svg += `</svg>`;
            return svg;
          }
          function buildGridSVG() {
            const grid_pattern = variables.animation.bg_grid.grid.preset || 'rect';
            // --- Support for disabling grid ---
            if (grid_pattern === 'none') {
              // Return an empty SVG (transparent, no grid)
              return `<svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg"></svg>`;
            }
            // Rectangular grid (existing logic)
            function drawRectGrid() {
              // Start building the SVG pattern for the grid (with optional background)
              function buildGridPattern(withBackground) {
                let svg = `
                  <svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">
                  <defs>
                    <pattern id="gridPattern" x="0" y="0" width="${pattern_width}" height="${pattern_height}" patternUnits="userSpaceOnUse">
                `;
                if (withBackground) svg += svg_background;
                // Create cells within the pattern
                for (let i = 0; i < total_rows; i++) {
                  for (let j = 0; j < total_cols; j++) {
                    svg += `<rect x="${j * column_width}" y="${i * row_height}" width="${column_width}" height="${row_height}" fill="${fill_color}" stroke="none" />`;
                  }
                }
                // Add horizontal lines within the pattern
                for (let i = 0; i <= total_rows; i++) {
                  if (border_lines_horizontal || (i > 0 && i < total_rows)) {
                    let current_line_width = line_width_minor;
                    if (num_minor_rows > 0 && i % (num_minor_rows + 1) === 0) {
                      current_line_width = line_width_major;
                    }
                    svg += `<line x1="0" y1="${i * row_height}" x2="${pattern_width}" y2="${i * row_height}" stroke="${line_color}" stroke-width="${current_line_width}" />`;
                  }
                }
                // Add vertical lines within the pattern
                for (let j = 0; j <= total_cols; j++) {
                  if (border_lines_vertical || (j > 0 && j < total_cols)) {
                    let current_line_width = line_width_minor;
                    if (num_minor_cols > 0 && j % (num_minor_cols + 1) === 0) {
                      current_line_width = line_width_major;
                    }
                    svg += `<line x1="${j * column_width}" y1="0" x2="${j * column_width}" y2="${pattern_height}" stroke="${line_color}" stroke-width="${current_line_width}" />`;
                  }
                }
                svg += `
                      </pattern>
                    </defs>
                    <rect width="100%" height="100%" fill="url(#gridPattern)" />
                  </svg>`;
                return svg;
              }
              // Start bulding the SVG pattern
              let svg_pattern = buildGridPattern(false);
              return svg_pattern;
            }
            // Hexagonal grid pattern
            function drawHexGrid() {
              // Improved: Robust staggering and major hex logic.
              // Major hexes appear at every (majorColInterval, majorRowInterval), staggered by minor intervals.
              // Tileability: pattern_width and pattern_height should be integer multiples of the hex tile size.
              const userHexRadius = variables.animation.bg_grid.grid.hex_radius;
              const hexRadius = userHexRadius > 0
                ? userHexRadius
                : Math.max(10, Math.min(card_width, card_height) / 12);
              const hexWidth = 2 * hexRadius;
              const hexHeight = Math.sqrt(3) * hexRadius;
              // Calculate how many columns and rows to fill the SVG
              const cols = Math.ceil(pattern_width / (1.5 * hexRadius));
              const rows = Math.ceil(pattern_height / hexHeight) + 1;
              // Major/minor intervals
              const majorColInterval = Math.max(1, variables.animation.bg_grid.grid.num_major_cols ?? 3);
              const majorRowInterval = Math.max(1, variables.animation.bg_grid.grid.num_major_rows ?? 3);
              const minorColInterval = Math.max(0, variables.animation.bg_grid.grid.num_minor_cols ?? 0);
              const minorRowInterval = Math.max(0, variables.animation.bg_grid.grid.num_minor_rows ?? 0);
              const lineWidthMajor = variables.animation.bg_grid.grid.line_width_major ?? 2;
              const lineWidthMinor = variables.animation.bg_grid.grid.line_width_minor ?? 1;
              let svg = `<svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">`;
              if (fill_color !== 'transparent') {
                svg += `<rect x="0" y="0" width="100%" height="100%" fill="${fill_color}" />`;
              }
              // Minor variables currently only affect the phase/offset of the major hexes,
              // not the density or appearance of minor hexes themselves.
              // If you want minor hexes to have a different style or to appear at a different interval,
              // you would need to add logic to draw "minor" hexes at those intervals, e.g.:
              //
              // - Draw all hexes as minor by default (lineWidthMinor)
              // - For every majorColInterval/majorRowInterval (with optional phase/offset from minor vars), draw as major (lineWidthMajor)
              //
              // The current code only uses minorRowInterval to stagger the phase of major hexes in each column.
              // Changing minorRowInterval or minorColInterval will only shift the pattern, not add more minor hexes.
              //
              // If you want minor hexes to be visually grouped or have a different effect, you must add explicit logic for that.
              for (let col = 0; col < cols; col++) {
                let rowPhase = 0;
                if (minorRowInterval > 0) {
                  rowPhase = (col % (minorRowInterval + 1)) * Math.floor(majorRowInterval / (minorRowInterval + 1));
                }
                for (let row = 0; row < rows; row++) {
                  // Offset every other column vertically by half a hex
                  const x = col * 1.5 * hexRadius;
                  const y = row * hexHeight + (col % 2 === 1 ? hexHeight / 2 : 0);
                  // Only draw hexes whose bounding box is inside the SVG area
                  if (
                    x - hexRadius < pattern_width &&
                    y - hexHeight / 2 < pattern_height &&
                    x + hexRadius > 0 &&
                    y + hexHeight / 2 > 0
                  ) {
                    // Major if col and (row + rowPhase) are multiples of interval
                    const isMajor =
                      (col % majorColInterval === 0) &&
                      ((row + rowPhase) % majorRowInterval === 0);
                    const lw = isMajor ? lineWidthMajor : lineWidthMinor;
                    svg += `<polygon points="${
                      Array.from({ length: 6 }).map((_, i) => {
                        const angle = Math.PI / 3 * i;
                        return [
                          x + hexRadius * Math.cos(angle),
                          y + hexRadius * Math.sin(angle)
                        ].join(',');
                      }).join(' ')
                    }" fill="none" stroke="${line_color}" stroke-width="${lw}" />`;
                  }
                }
              }
              svg += `</svg>`;
              return svg;
            }
            // Diagonal/hatched grid pattern
            function drawDiagonalGrid() {
              const spacing = Math.max(column_width, row_height);
              let svg = `<svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">`;
              if (fill_color !== 'transparent') {
                svg += `<rect x="0" y="0" width="100%" height="100%" fill="${fill_color}" />`;
              }
              // Draw diagonal lines (bottom-left to top-right)
              for (let x = -pattern_height; x < pattern_width; x += spacing) {
                svg += `<line x1="${x}" y1="0" x2="${x + pattern_height}" y2="${pattern_height}" stroke="${line_color}" stroke-width="${line_width_minor}" />`;
              }
              // Draw diagonal lines (top-left to bottom-right)
              for (let x = 0; x < pattern_width + pattern_height; x += spacing) {
                svg += `<line x1="${x}" y1="0" x2="${x - pattern_height}" y2="${pattern_height}" stroke="${line_color}" stroke-width="${line_width_minor}" />`;
              }
              svg += `</svg>`;
              return svg;
            }
            // --- NEW: Bracket grid pattern ---
            function drawBracketGrid() {
              // Configurable parameters
              const bracketWidth = variables.animation.bg_grid.grid.bracket_width ?? 16;
              const bracketColor = variables.animation.bg_grid.grid.bracket_color ?? '#FFB300';
              const fillColor = variables.animation.bg_grid.grid.bracket_fill ?? 'none'; // e.g. 'rgba(255,179,0,0.15)'
              const bracketRadius = variables.animation.bg_grid.grid.bracket_radius ?? (pattern_height * 0.12);
              const bracketGapPercent = (variables.animation.bg_grid.grid.bracket_gap/100) ?? 0.12;
              const bracketGap = pattern_width * bracketGapPercent;
              const bracketHeightPercent = (variables.animation.bg_grid.grid?.bracket_height/100) ?? 0.7;
              const bracketHeight = pattern_height * bracketHeightPercent;
              const bracketY = (pattern_height - bracketHeight) / 2;
              // Bracket horizontal position
              const leftX = bracketGap;
              const rightX = pattern_width - bracketGap - bracketWidth;
              // SVG path for a single bracket (left or right)
              function bracketPath(x, y, width, height, radius, side = 'left') {
                // side: 'left' or 'right'
                // Draw from top to bottom, with rounded corners
                if (side === 'left') {
                  return `
                    M ${x + width} ${y}
                    H ${x + radius}
                    Q ${x} ${y} ${x} ${y + radius}
                    V ${y + height - radius}
                    Q ${x} ${y + height} ${x + radius} ${y + height}
                    H ${x + width}
                  `;
                } else {
                  // right
                  return `
                    M ${x} ${y}
                    H ${x + width - radius}
                    Q ${x + width} ${y} ${x + width} ${y + radius}
                    V ${y + height - radius}
                    Q ${x + width} ${y + height} ${x + width - radius} ${y + height}
                    H ${x}
                  `;
                }
              }
              // Optionally fill the space between brackets
              let fillRect = '';
              if (fillColor && fillColor !== 'none' && fillColor !== 'transparent') {
                fillRect = `<rect x="${leftX}" y="${bracketY + (bracketWidth/2)}" width="${rightX - leftX + bracketWidth}" height="${bracketHeight - bracketWidth}" fill="${fillColor}" stroke="none"/>`;
              }
              return `
                <svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">
                  ${fillRect}
                  <path d="${bracketPath(leftX, bracketY, bracketWidth, bracketHeight, bracketRadius, 'left')}"
                        fill="none" stroke="${bracketColor}" stroke-width="${bracketWidth}" stroke-linecap="round"/>
                  <path d="${bracketPath(rightX, bracketY, bracketWidth, bracketHeight, bracketRadius, 'right')}"
                        fill="none" stroke="${bracketColor}" stroke-width="${bracketWidth}" stroke-linecap="round"/>
                </svg>
              `;
            }
            // --- Select grid pattern type ---
            switch (grid_pattern) {
              case 'hex':
                return drawHexGrid();
              case 'diagonal':
                return drawDiagonalGrid();
              case 'bracket':
                return drawBracketGrid();
              case 'rect':
              default:
                return drawRectGrid();
            }
          }
          /////////////////////////////////////////////
          // --- Infinite zoom layers support for background ---
          //  Returns array of SVGs for each zoom layer (background)
          function buildZoomBackgroundSVGs() {
            const arr = [];
            for (let i = 0; i < backgroundZoomLayers; i++) {
              let svg;
              if (bg_pattern === 'stars') {
                const layerStars = `
                  <rect x="0" y="0" width="100%" height="100%" fill="${userBgColor}" />
                  <defs>
                    <pattern id="starPattern${i}" width="${starPatternWidth}" height="${starPatternHeight}" patternUnits="userSpaceOnUse">
                      ${generateTileableStarsSeeded(numStars, starPatternWidth, starPatternHeight, starMinRadius, starMaxRadius, starMinBrightness, starMaxBrightness, 1000 + i, starColor)}
                    </pattern>
                  </defs>
                  <rect x="0" y="0" width="100%" height="100%" fill="url(#starPattern${i})" />
                `;
                svg = `<svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">${layerStars}</svg>`;
              } else if (bg_pattern === 'nebula') {
                // For nebula: use a unique seed per layer for turbulence if enabled
                let layerFilterContent = '';
                let layerSeed = nebulaSeed + i;
                if (nebulaEffect) {
                  layerFilterContent += `<feTurbulence
                    type="fractalNoise"
                    baseFrequency="${nebulaBaseFrequency}"
                    numOctaves="${nebulaNumOctaves}"
                    seed="${layerSeed}"
                    result="turb"
                  >${
                    nebulaAnimate
                      ? `
                    <animate attributeName="baseFrequency" values="${nebulaBaseFrequency};${nebulaBaseFrequency * 1.5};${nebulaBaseFrequency}" dur="${nebulaAnimationDuration}s" repeatCount="indefinite" />
                    <animate attributeName="seed" values="${layerSeed};${layerSeed + 10};${layerSeed}" dur="${nebulaAnimationDuration}s" repeatCount="indefinite" />
                    `
                      : ''
                  }</feTurbulence>
                  <feDisplacementMap in2="turb" in="SourceGraphic" scale="${nebulaScale}" xChannelSelector="R" yChannelSelector="G"/>`;
                }
                if (nebulaBlur) {
                  layerFilterContent += `<feGaussianBlur stdDeviation="${nebulaBlurLevel}"/>`;
                }
                if (!nebulaEffect && !nebulaBlur && !nebulaAnimate) {
                  svg = `<svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                      ${buildNebulaGradients(nebulaLayers)}
                    </defs>
                    <rect x="0" y="0" width="100%" height="100%" fill="${userBgColor}" />
                    ${buildNebulaRects(nebulaLayers)}
                  </svg>`;
                } else {
                  svg = `<svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg">
                    <defs>
                      <filter id="nebulaCloud${i}" x="0" y="0" width="100%" height="100%">
                        ${layerFilterContent}
                      </filter>
                      ${buildNebulaGradients(nebulaLayers)}
                    </defs>
                    <rect x="0" y="0" width="100%" height="100%" fill="${userBgColor}" />
                    <g${layerFilterContent ? ` filter="url(#nebulaCloud${i})"` : ''}>
                      ${buildNebulaRects(nebulaLayers)}
                    </g>
                  </svg>`;
                }
              } else {
                svg = `<svg width="${pattern_width}" height="${pattern_height}" xmlns="http://www.w3.org/2000/svg"></svg>`;
              }
              arr.push(svg);
            }
            return arr;
          }
          /////////////////////////////////////////////
          // --- Infinite zoom layers support for grid ---
          //  Returns array of SVGs for each zoom layer (grid)
          function buildZoomGridSVGs() {
            const arr = [];
            for (let i = 0; i < gridZoomLayers; i++) {
              arr.push(buildGridSVG());
            }
            return arr;
          }
          /////////////////////////////////////////////
          // --- Animation containers for background and grid ---
          //  buildAnimatedLayer: returns HTML/CSS for animated background/grid layer
          function buildAnimatedLayer(contentArr, type, duration, direction, pattern_width, pattern_height, zIndex, pointerEvents, zoomScaleTo, zoomOpacityFadeIn, zoomOpacityFadeOut, zoomScaleFrom = 1) {
            if (type === 'zoom') {
              return `
                <style>
                  .zoom-container-${zIndex} {
                    overflow: hidden;
                    width: ${card_width}px;
                    height: ${card_height}px;
                    position: absolute;
                    left: 0; top: 0;
                    z-index: ${zIndex};
                    ${pointerEvents ? `pointer-events:${pointerEvents};` : ''}
                  }
                  .zoom-content-${zIndex} {
                    position: absolute;
                    left: 0; top: 0;
                    width: 100%; height: 100%;
                    will-change: transform, opacity;
                    animation: zoom-infinite-${zIndex} ${duration}s linear infinite;
                    opacity: 1;
                    mix-blend-mode: lighten;
                  }
                  @keyframes zoom-infinite-${zIndex} {
                    0% { transform: scale(${zoomScaleFrom}); opacity: 0; }
                    ${zoomOpacityFadeIn}% { opacity: 1; }
                    ${zoomOpacityFadeOut}% { opacity: 1; }
                    100% { transform: scale(${zoomScaleTo}); opacity: 0; }
                  }
                </style>
                <div class="zoom-container-${zIndex}">
                  ${contentArr.map((svg, i) => {
                    const delay = (i * duration) / contentArr.length;
                    return `<div class="zoom-content-${zIndex}" style="animation-delay:${delay}s">${svg}</div>`;
                  }).join('')}
                </div>
              `;
            } else if (type === 'scroll') {
              // ...existing code for scroll...
              const content = contentArr[0];
              const track_size = (direction === 'up' || direction === 'down') ? pattern_height : pattern_width;
              const track_dimension = track_size * 3;
              return `
                <style>
                  .scroll-container {
                    overflow: hidden;
                    width: ${card_width}px;
                    height: ${card_height}px;
                    position: absolute;
                    left: 0; top: 0;
                    z-index: ${zIndex};
                    ${pointerEvents ? `pointer-events:${pointerEvents};` : ''}
                  }
                  .scroll-track {
                    display: flex;
                    flex-direction: ${direction === 'up' || direction === 'down' ? 'column' : 'row'};
                    width: ${direction === 'up' || direction === 'down' ? card_width : track_dimension}px;
                    height: ${direction === 'up' || direction === 'down' ? track_dimension : pattern_height}px;
                    animation: scroll-${direction}-${zIndex} ${duration}s linear infinite;
                  }
                  .scroll-pattern {
                    flex: 0 0 ${direction === 'up' || direction === 'down' ? pattern_height : pattern_width}px;
                    height: ${pattern_height}px;
                  }
                  @keyframes scroll-left-${zIndex} {
                    0% { transform: translateX(0); }
                    100% { transform: translateX(${-track_dimension + track_size}px); }
                  }
                  @keyframes scroll-right-${zIndex} {
                    0% { transform: translateX(${-track_dimension + track_size}px); }
                    100% { transform: translateX(0); }
                  }
                  @keyframes scroll-up-${zIndex} {
                    0% { transform: translateY(0); }
                    100% { transform: translateY(${-track_dimension + track_size}px); }
                  }
                  @keyframes scroll-down-${zIndex} {
                    0% { transform: translateY(${-track_dimension + track_size}px); }
                    100% { transform: translateY(0); }
                  }
                </style>
                <div class="scroll-container">
                  <div class="scroll-track" style="animation-name: scroll-${direction}-${zIndex};">
                    <div class="scroll-pattern">${content}</div>
                    <div class="scroll-pattern">${content}</div>
                    <div class="scroll-pattern">${content}</div>
                  </div>
                </div>
              `;
            } else {
              // No animation
              return `
                <div style="position:absolute;left:0;top:0;width:${card_width}px;height:${card_height}px;z-index:${zIndex};${pointerEvents ? `pointer-events:${pointerEvents};` : ''}">
                  ${contentArr[0]}
                </div>
              `;
            }
          }
          /////////////////////////////////////////////
          // --- Compose layers ---
          //  Compose background and grid layers, each with their own animation/effect
          //  Always include scroll CSS if either layer uses scroll
          let backgroundLayer;
          if (background_effect === 'zoom') {
            backgroundLayer = buildAnimatedLayer(
              buildZoomBackgroundSVGs(),
              'zoom',
              backgroundZoomDuration,
              direction,
              pattern_width,
              pattern_height,
              0,
              '',
              backgroundZoomScaleTo,
              backgroundZoomOpacityFadeIn,
              backgroundZoomOpacityFadeOut,
              backgroundZoomScaleFrom // pass initial scale
            );
          } else if (background_effect === 'scroll') {
            backgroundLayer = `
              <div class="scroll-container-bg" style="position:absolute;left:0;top:0;width:${card_width}px;height:${card_height}px;z-index:0;">
                <div class="scroll-track-bg" style="animation-name: scroll-${direction}-bg;">
                  <div class="scroll-pattern">${buildBackgroundSVG()}</div>
                  <div class="scroll-pattern">${buildBackgroundSVG()}</div>
                  <div class="scroll-pattern">${buildBackgroundSVG()}</div>
                </div>
              </div>
            `;
          } else {
            backgroundLayer = buildAnimatedLayer(
              [buildBackgroundSVG()],
              background_effect,
              background_speed,
              direction,
              pattern_width,
              pattern_height,
              0,
              ''
            );
          }
          let gridLayer;
          if (grid_effect === 'zoom') {
            gridLayer = buildAnimatedLayer(
              buildZoomGridSVGs(),
              'zoom',
              gridZoomDuration,
              direction,
              pattern_width,
              pattern_height,
              1,
              'none',
              gridZoomScaleTo,
              gridZoomOpacityFadeIn,
              gridZoomOpacityFadeOut,
              gridZoomScaleFrom // pass initial scale
            );
          } else if (grid_effect === 'scroll') {
            gridLayer = `
              <div class="scroll-container-grid" style="position:absolute;left:0;top:0;width:${card_width}px;height:${card_height}px;z-index:1;pointer-events:none;">
                <div class="scroll-track-grid" style="animation-name: scroll-${direction}-grid;">
                  <div class="scroll-pattern">${buildGridSVG()}</div>
                  <div class="scroll-pattern">${buildGridSVG()}</div>
                  <div class="scroll-pattern">${buildGridSVG()}</div>
                </div>
              </div>
            `;
          } else {
            gridLayer = buildAnimatedLayer(
              [buildGridSVG()],
              grid_effect,
              grid_speed,
              direction,
              pattern_width,
              pattern_height,
              1,
              'none'
            );
          }
          /////////////////////////////////////////////
          // --- Always include scroll CSS if either layer uses scroll ---
          let scrollCSS = '';
          if (background_effect === 'scroll' || grid_effect === 'scroll') {
            scrollCSS = `
              <style>
                .scroll-container-bg, .scroll-container-grid {
                  overflow: hidden;
                  width: ${card_width}px;
                  height: ${card_height}px;
                  position: absolute;
                  left: 0; top: 0;
                }
                .scroll-track-bg, .scroll-track-grid {
                  display: flex;
                  flex-direction: ${direction === 'up' || direction === 'down' ? 'column' : 'row'};
                  width: ${direction === 'up' || direction === 'down' ? card_width : pattern_width * 3}px;
                  height: ${direction === 'up' || direction === 'down' ? pattern_height * 3 : pattern_height}px;
                }
                .scroll-track-bg {
                  animation: scroll-${direction}-bg ${background_speed}s linear infinite;
                }
                .scroll-track-grid {
                  animation: scroll-${direction}-grid ${grid_speed}s linear infinite;
                }
                .scroll-pattern {
                  flex: 0 0 ${direction === 'up' || direction === 'down' ? pattern_height : pattern_width}px;
                  height: ${pattern_height}px;
                }
                @keyframes scroll-left-bg {
                  0% { transform: translateX(0); }
                  100% { transform: translateX(${-pattern_width *  2}px); }
                }
                @keyframes scroll-right-bg {
                  0% { transform: translateX(${-pattern_width * 2}px); }
                  100% { transform: translateX(0); }
                }
                @keyframes scroll-up-bg {
                  0% { transform: translateY(0); }
                  100% { transform: translateY(${-pattern_height * 2}px); }
                }
                @keyframes scroll-down-bg {
                  0% { transform: translateY(${-pattern_height * 2}px); }
                  100% { transform: translateY(0); }
                }
                @keyframes scroll-left-grid {
                  0% { transform: translateX(0); }
                  100% { transform: translateX(${-pattern_width * 2}px); }
                }
                @keyframes scroll-right-grid {
                  0% { transform: translateX(${-pattern_width * 2}px); }
                  100% { transform: translateX(0); }
                }
                @keyframes scroll-up-grid {
                  0% { transform: translateY(0); }
                  100% { transform: translateY(${-pattern_height * 2}px); }
                }
                @keyframes scroll-down-grid {
                  0% { transform: translateY(${-pattern_height * 2}px); }
                  100% { transform: translateY(0); }
                }
              </style>
            `;
          }
          /////////////////////////////////////////////
          // --- Final output: Compose all layers and CSS ---
          return `
            ${scrollCSS}
            <div style="position:relative;width:${card_width}px;height:${card_height}px;">
              ${backgroundLayer}
              ${gridLayer}
            </div>
          `;
        ]]]
  cb-lcars-button-picard-icon:
    template:
      - cb-lcars-button-picard-filled-dense
      - cb-lcars-actions-toggle
    variables:
      card:
        width: 40px
        height: 40px
        min_height: 40px
        border:
          top:
            left_radius: 10px
            right_radius: 10px
          bottom:
            left_radius: 10px
            right_radius: 10px
      icon:
        border:
          left: 0px
          right: 0px
        align-items: center
        justify: center
    styles:
      grid:
        - grid-template-areas: '"i"'
    size: 30px
    show_icon: true
    show_label: false
  cb-lcars-animation-presets:
    variables:
      animation:
        bg_grid:
          nebula_presets:
            orion:
              - color: '#FFB347'
                cx: 50
                cy: 52
                rx: 45
                ry: 38
                opacity_stops:
                  - 0.45
                  - 0.11
                  - 0
              - color: '#FFD700'
                cx: 58
                cy: 48
                rx: 35
                ry: 28
                opacity_stops:
                  - 0.3
                  - 0.08
                  - 0
              - color: '#ADD8E6'
                cx: 42
                cy: 56
                rx: 40
                ry: 35
                opacity_stops:
                  - 0.2
                  - 0.06
                  - 0
              - color: '#FFFFFF'
                cx: 50
                cy: 52
                rx: 15
                ry: 12
                opacity_stops:
                  - 0.15
                  - 0.04
                  - 0
              - color: '#483D8B'
                cx: 35
                cy: 65
                rx: 20
                ry: 15
                opacity_stops:
                  - 0.1
                  - 0.03
                  - 0
              - color: '#8FBC8F'
                cx: 65
                cy: 35
                rx: 18
                ry: 12
                opacity_stops:
                  - 0.18
                  - 0.05
                  - 0
              - color: '#FFC0CB'
                cx: 25
                cy: 30
                rx: 12
                ry: 10
                opacity_stops:
                  - 0.2
                  - 0.05
                  - 0
              - color: '#FAF0E6'
                cx: 75
                cy: 70
                rx: 15
                ry: 12
                opacity_stops:
                  - 0.12
                  - 0.03
                  - 0
              - color: '#C0C0C0'
                cx: 50
                cy: 50
                rx: 20
                ry: 15
                opacity_stops:
                  - 0.08
                  - 0.02
                  - 0
            crab:
              - color: '#DC143C'
                cx: 52
                cy: 48
                rx: 40
                ry: 30
                opacity_stops:
                  - 0.6
                  - 0.15
                  - 0
              - color: '#FFFF00'
                cx: 48
                cy: 52
                rx: 25
                ry: 20
                opacity_stops:
                  - 0.4
                  - 0.1
                  - 0
              - color: '#FFFFFF'
                cx: 55
                cy: 45
                rx: 10
                ry: 8
                opacity_stops:
                  - 0.2
                  - 0.05
                  - 0
              - color: '#4682B4'
                cx: 40
                cy: 60
                rx: 35
                ry: 28
                opacity_stops:
                  - 0.15
                  - 0.04
                  - 0
              - color: '#000000'
                cx: 60
                cy: 35
                rx: 20
                ry: 15
                opacity_stops:
                  - 0.05
                  - 0.01
                  - 0
              - color: '#FFDAB9'
                cx: 30
                cy: 25
                rx: 12
                ry: 10
                opacity_stops:
                  - 0.18
                  - 0.04
                  - 0
              - color: '#800080'
                cx: 70
                cy: 65
                rx: 12
                ry: 10
                opacity_stops:
                  - 0.12
                  - 0.03
                  - 0
              - color: '#00FFFF'
                cx: 20
                cy: 75
                rx: 10
                ry: 8
                opacity_stops:
                  - 0.25
                  - 0.07
                  - 0
            cosmic_embers:
              - color: '#FF4500' # OrangeRed (main ember)
                cx: 42
                cy: 52
                rx: 32
                ry: 32
                opacity_stops:
                  - 0.5
                  - 0.13
                  - 0
              - color: '#FFD700' # Gold (hot core)
                cx: 48
                cy: 48
                rx: 18
                ry: 18
                opacity_stops:
                  - 0.38
                  - 0.11
                  - 0
              - color: '#FF8C00' # DarkOrange (outer glow)
                cx: 60
                cy: 55
                rx: 28
                ry: 22
                opacity_stops:
                  - 0.22
                  - 0.07
                  - 0
              - color: '#8B0000' # DarkRed (deep ember)
                cx: 35
                cy: 60
                rx: 20
                ry: 16
                opacity_stops:
                  - 0.18
                  - 0.06
                  - 0
              - color: '#F08080' # LightCoral (soft edge)
                cx: 65
                cy: 40
                rx: 15
                ry: 12
                opacity_stops:
                  - 0.14
                  - 0.05
                  - 0
              - color: '#FFFFE0' # LightYellow (sparkle)
                cx: 55
                cy: 70
                rx: 10
                ry: 10
                opacity_stops:
                  - 0.12
                  - 0.04
                  - 0
              - color: '#00BFFF' # DeepSkyBlue (cosmic contrast)
                cx: 80
                cy: 30
                rx: 12
                ry: 14
                opacity_stops:
                  - 0.10
                  - 0.03
                  - 0
              - color: '#FFFFFF' # White (hot spot)
                cx: 50
                cy: 50
                rx: 7
                ry: 7
                opacity_stops:
                  - 0.08
                  - 0.02
                  - 0
            iridescent_drift:
              - color: '#40E0D0' # Turquoise
                cx: 30
                cy: 40
                rx: 28
                ry: 22
                opacity_stops:
                  - 0.35
                  - 0.12
                  - 0
              - color: '#8A2BE2' # BlueViolet
                cx: 65
                cy: 35
                rx: 22
                ry: 18
                opacity_stops:
                  - 0.28
                  - 0.09
                  - 0
              - color: '#FFD700' # Gold
                cx: 55
                cy: 65
                rx: 18
                ry: 25
                opacity_stops:
                  - 0.22
                  - 0.08
                  - 0
              - color: '#00FFFF' # Aqua
                cx: 80
                cy: 60
                rx: 14
                ry: 18
                opacity_stops:
                  - 0.18
                  - 0.06
                  - 0
              - color: '#FF69B4' # HotPink
                cx: 20
                cy: 75
                rx: 12
                ry: 16
                opacity_stops:
                  - 0.15
                  - 0.05
                  - 0
              - color: '#FFFFFF'
                cx: 50
                cy: 50
                rx: 10
                ry: 10
                opacity_stops:
                  - 0.12
                  - 0.04
                  - 0
              - color: '#7FFFD4' # Aquamarine
                cx: 70
                cy: 80
                rx: 10
                ry: 12
                opacity_stops:
                  - 0.10
                  - 0.03
                  - 0
            emerald_void:
              - color: '#006400' # DarkGreen
                cx: 50
                cy: 50
                rx: 38
                ry: 38
                opacity_stops:
                  - 0.35
                  - 0.12
                  - 0
              - color: '#00FF7F' # SpringGreen
                cx: 60
                cy: 40
                rx: 28
                ry: 22
                opacity_stops:
                  - 0.28
                  - 0.09
                  - 0
              - color: '#7FFF00' # Chartreuse
                cx: 40
                cy: 65
                rx: 22
                ry: 18
                opacity_stops:
                  - 0.22
                  - 0.08
                  - 0
              - color: '#00CED1' # DarkTurquoise
                cx: 70
                cy: 70
                rx: 16
                ry: 14
                opacity_stops:
                  - 0.18
                  - 0.06
                  - 0
              - color: '#ADFF2F' # GreenYellow
                cx: 30
                cy: 30
                rx: 14
                ry: 12
                opacity_stops:
                  - 0.15
                  - 0.05
                  - 0
              - color: '#90EE90' # LightGreen
                cx: 75
                cy: 25
                rx: 12
                ry: 10
                opacity_stops:
                  - 0.12
                  - 0.04
                  - 0
              - color: '#00FA9A' # MediumSpringGreen
                cx: 20
                cy: 80
                rx: 10
                ry: 10
                opacity_stops:
                  - 0.10
                  - 0.03
                  - 0
              - color: '#E0FFF0' # Pale greenish white
                cx: 55
                cy: 80
                rx: 10
                ry: 10
                opacity_stops:
                  - 0.08
                  - 0.02
                  - 0
            ethereal_drift:
              - color: '#E6E6FA' # Lavender
                cx: 40
                cy: 55
                rx: 38
                ry: 32
                opacity_stops:
                  - 0.28
                  - 0.09
                  - 0
              - color: '#B0E0E6' # PowderBlue
                cx: 60
                cy: 45
                rx: 32
                ry: 28
                opacity_stops:
                  - 0.22
                  - 0.08
                  - 0
              - color: '#FFFACD' # LemonChiffon
                cx: 50
                cy: 70
                rx: 22
                ry: 18
                opacity_stops:
                  - 0.18
                  - 0.07
                  - 0
              - color: '#F8F8FF' # GhostWhite
                cx: 80
                cy: 60
                rx: 16
                ry: 14
                opacity_stops:
                  - 0.15
                  - 0.05
                  - 0
              - color: '#DDA0DD' # Plum
                cx: 20
                cy: 80
                rx: 14
                ry: 12
                opacity_stops:
                  - 0.13
                  - 0.04
                  - 0
              - color: '#FFFFFF'
                cx: 50
                cy: 50
                rx: 10
                ry: 10
                opacity_stops:
                  - 0.10
                  - 0.03
                  - 0
              - color: '#FFDAB9' # PeachPuff
                cx: 75
                cy: 25
                rx: 12
                ry: 10
                opacity_stops:
                  - 0.08
                  - 0.02
                  - 0
              - color: '#FFE4E1' # MistyRose
                cx: 10
                cy: 10
                rx: 10
                ry: 10
                opacity_stops:
                  - 0.05
                  - 0.01
                  - 0
            aurora_nexus:
              - color: '#FF00FF'
                cx: 50
                cy: 50
                rx: 30
                ry: 15
                opacity_stops:
                  - 0.5
                  - 0.1
                  - 0
              - color: '#00FFFF'
                cx: 50
                cy: 50
                rx: 15
                ry: 30
                opacity_stops:
                  - 0.8
                  - 0.15
                  - 0
              - color: '#FFD700'
                cx: 50
                cy: 50
                rx: 25
                ry: 12
                opacity_stops:
                  - 0.7
                  - 0.1
                  - 0
              - color: '#8A2BE2'
                cx: 50
                cy: 50
                rx: 20
                ry: 20
                opacity_stops:
                  - 0.5
                  - 0.08
                  - 0
              - color: '#FF4500'
                cx: 50
                cy: 50
                rx: 12
                ry: 25
                opacity_stops:
                  - 0.6
                  - 0.1
                  - 0
              - color: '#00FF99'
                cx: 50
                cy: 55
                rx: 10
                ry: 20
                opacity_stops:
                  - 0
                  - 0.2
                  - 0
            horsehead:
              - color: '#1a1a2e' # Deep blue-black (background)
                cx: 50
                cy: 60
                rx: 50
                ry: 40
                opacity_stops:
                  - 0.22
                  - 0.07
                  - 0
              - color: '#22223b' # Dark silhouette (horsehead)
                cx: 38
                cy: 72
                rx: 18
                ry: 24
                opacity_stops:
                  - 0.18
                  - 0.06
                  - 0
              - color: '#e94560' # Reddish-pink (nebula glow)
                cx: 62
                cy: 54
                rx: 32
                ry: 20
                opacity_stops:
                  - 0.22
                  - 0.08
                  - 0
              - color: '#f7d6e0' # Soft pink
                cx: 55
                cy: 75
                rx: 12
                ry: 10
                opacity_stops:
                  - 0.13
                  - 0.04
                  - 0
              - color: '#fffbe7' # Pale yellow-white (star glow)
                cx: 70
                cy: 40
                rx: 14
                ry: 12
                opacity_stops:
                  - 0.18
                  - 0.06
                  - 0
              - color: '#f9fafc' # Soft white highlight
                cx: 60
                cy: 30
                rx: 8
                ry: 8
                opacity_stops:
                  - 0.10
                  - 0.03
                  - 0
              - color: '#b5838d' # Muted mauve
                cx: 45
                cy: 80
                rx: 10
                ry: 14
                opacity_stops:
                  - 0.09
                  - 0.02
                  - 0
              - color: '#fbb1b1' # Light pink
                cx: 65
                cy: 65
                rx: 8
                ry: 8
                opacity_stops:
                  - 0.08
                  - 0.02
                  - 0
              - color: '#f6e7cb' # Warm beige
                cx: 80
                cy: 60
                rx: 7
                ry: 7
                opacity_stops:
                  - 0.07
                  - 0.01
                  - 0
            eagle:
              - color: '#0b132b' # Deep blue-black (background)
                cx: 50
                cy: 50
                rx: 50
                ry: 40
                opacity_stops:
                  - 0.22
                  - 0.07
                  - 0
              - color: '#fcbf49' # Golden yellow (pillar highlight)
                cx: 62
                cy: 62
                rx: 26
                ry: 34
                opacity_stops:
                  - 0.18
                  - 0.06
                  - 0
              - color: '#e07a5f' # Orange (pillar base)
                cx: 38
                cy: 72
                rx: 20
                ry: 26
                opacity_stops:
                  - 0.15
                  - 0.05
                  - 0
              - color: '#3a506b' # Blue shadow
                cx: 72
                cy: 38
                rx: 18
                ry: 20
                opacity_stops:
                  - 0.13
                  - 0.04
                  - 0
              - color: '#f4f1de' # Star glow
                cx: 55
                cy: 30
                rx: 12
                ry: 12
                opacity_stops:
                  - 0.10
                  - 0.03
                  - 0
              - color: '#b5ead7' # Pale green
                cx: 65
                cy: 80
                rx: 10
                ry: 10
                opacity_stops:
                  - 0.09
                  - 0.02
                  - 0
              - color: '#f7b267' # Light orange
                cx: 30
                cy: 60
                rx: 12
                ry: 14
                opacity_stops:
                  - 0.08
                  - 0.02
                  - 0
              - color: '#a3cef1' # Pale blue
                cx: 80
                cy: 25
                rx: 8
                ry: 8
                opacity_stops:
                  - 0.07
                  - 0.01
                  - 0
              - color: '#fffbe7' # Soft yellow-white
                cx: 60
                cy: 20
                rx: 7
                ry: 7
                opacity_stops:
                  - 0.06
                  - 0.01
                  - 0
            pillars_of_creation:
              - color: '#1b263b' # Deep blue (background)
                cx: 50
                cy: 60
                rx: 50
                ry: 40
                opacity_stops:
                  - 0.22
                  - 0.07
                  - 0
              - color: '#f9dc5c' # Yellow (pillar highlight)
                cx: 57
                cy: 67
                rx: 22
                ry: 34
                opacity_stops:
                  - 0.18
                  - 0.06
                  - 0
              - color: '#ff6f3c' # Orange (pillar base)
                cx: 43
                cy: 77
                rx: 18
                ry: 26
                opacity_stops:
                  - 0.15
                  - 0.05
                  - 0
              - color: '#5f4b8b' # Purple shadow
                cx: 67
                cy: 52
                rx: 16
                ry: 22
                opacity_stops:
                  - 0.13
                  - 0.04
                  - 0
              - color: '#f4f1bb' # Star glow
                cx: 62
                cy: 37
                rx: 12
                ry: 12
                opacity_stops:
                  - 0.10
                  - 0.03
                  - 0
              - color: '#b5ead7' # Pale green
                cx: 70
                cy: 80
                rx: 10
                ry: 10
                opacity_stops:
                  - 0.09
                  - 0.02
                  - 0
              - color: '#f7b267' # Light orange
                cx: 30
                cy: 60
                rx: 12
                ry: 14
                opacity_stops:
                  - 0.08
                  - 0.02
                  - 0
              - color: '#a3cef1' # Pale blue
                cx: 80
                cy: 25
                rx: 8
                ry: 8
                opacity_stops:
                  - 0.07
                  - 0.01
                  - 0
              - color: '#fffbe7' # Soft yellow-white
                cx: 60
                cy: 20
                rx: 7
                ry: 7
                opacity_stops:
                  - 0.06
                  - 0.01
                  - 0
            veil:
              - color: '#1a237e' # Deep blue (background)
                cx: 50
                cy: 55
                rx: 48
                ry: 38
                opacity_stops:
                  - 0.22
                  - 0.07
                  - 0
              - color: '#00e5ff' # Cyan filament
                cx: 65
                cy: 45
                rx: 32
                ry: 10
                opacity_stops:
                  - 0.18
                  - 0.06
                  - 0
              - color: '#ff1744' # Red filament
                cx: 35
                cy: 65
                rx: 28
                ry: 8
                opacity_stops:
                  - 0.16
                  - 0.05
                  - 0
              - color: '#00ff95' # Green filament
                cx: 60
                cy: 70
                rx: 22
                ry: 7
                opacity_stops:
                  - 0.13
                  - 0.04
                  - 0
              - color: '#fffde7' # Pale yellow highlight
                cx: 40
                cy: 35
                rx: 14
                ry: 6
                opacity_stops:
                  - 0.10
                  - 0.03
                  - 0
              - color: '#b39ddb' # Soft purple
                cx: 75
                cy: 60
                rx: 10
                ry: 5
                opacity_stops:
                  - 0.08
                  - 0.02
                  - 0
              - color: '#ffffff' # White sparkle
                cx: 55
                cy: 50
                rx: 6
                ry: 3
                opacity_stops:
                  - 0.06
                  - 0.01
                  - 0
  cb-lcars-button-capped:
    template: cb-lcars-button-lozenge
    variables:
      card:
        border:
          top:
            right_radius: 0px
          bottom:
            right_radius: 0px
  cb-lcars-button-capped-right:
    template: cb-lcars-button-lozenge-right
    variables:
      card:
        border:
          top:
            left_radius: 0px
          bottom:
            left_radius: 0px
  cb-lcars-base:
    template:
      - cb-lcars-functions
      - cb-lcars-actions-disable
    label: '[[[ return variables.label ]]]'
    entity: '[[[ return variables.entity ]]]'
    variables:
      label: ' '
      text:
        label:
          font_size: 20px
          font_weight: normal
          font_family: '''Antonio'', Arial, sans-serif'
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            active: var(--lcars-ui-secondary)
            inactive: var(--lcars-ui-tertiary)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            unavailable: var(--lcars-card-button-unavailable)
        name:
          font_size: 20px
          font_weight: normal
          font_family: '''Antonio'', Arial, sans-serif'
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            active: var(--lcars-ui-secondary)
            inactive: var(--lcars-ui-tertiary)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            unavailable: var(--lcars-card-button-unavailable)
        state:
          font_size: 20px
          font_weight: normal
          font_family: '''Antonio'', Arial, sans-serif'
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            active: var(--lcars-ui-secondary)
            inactive: var(--lcars-ui-tertiary)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            unavailable: var(--lcars-card-button-unavailable)
      card:
        height: null
        min_height: 10px
        width: null
        color:
          default: var(--lcars-card-top-color, var(--picard-dark-gray))
          active: var(--lcars-ui-secondary)
          inactive: var(--lcars-ui-tertiary)
          zero: var(--lcars-green)
          non_zero: var(--lcars-blue)
          hvac_heat: var(--lcars-orange)
          hvac_cool: var(--lcars-blue)
          unavailable: var(--lcars-card-button-unavailable)
          background:
            default: var(--lcars-card-top-color, var(--picard-dark-gray))
            active: var(--lcars-ui-secondary)
            inactive: var(--lcars-ui-tertiary)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            unavailable: var(--lcars-card-button-unavailable)
        border:
          top:
            left_radius: 0px
            right_radius: 0px
            size: 0px
          bottom:
            left_radius: 0px
            right_radius: 0px
            size: 0px
          left:
            size: 0px
          right:
            size: 0px
          inner:
            factor: 2
            min_radius: 30px
            width: 35px
      icon:
        box_size: 35px
        size: 24px
        justify: left
        color:
          default: black
          active: null
          inactive: null
          unavailable: null
          background:
            active: null
            inactive: null
      animation:
        justify_content: center
        align_items: center
        transform_origin: center
    show_label: false
    show_state: false
    show_units: true
    show_icon: false
    show_name: false
    state_display: |
      [[[
        if (!entity) {
          return 'n/a';
        }
        // use the custom button card helper to set state to an attribute if provided (arrays/objects are filtered out on the form)
        return helpers.localize(entity, entity.attributes[variables.attribute],'card',this._config.show_units,this._config.units);
      ]]]
    styles:
      img_cell:
        - justify-content: '[[[ return variables.icon.justify ]]]'
      card:
        - height: |
            [[[
              if (variables.card.height) {
                return variables.__get_num_with_unit(variables.card.height);
              } else {
                return "100%";
              }
            ]]]
        - min-height: |
            [[[
              if (variables.card.min_height) {
                  return variables.__get_num_with_unit(variables.card.min_height);
              }
            ]]]
        - width: |
            [[[
              if (variables.card.width) {
                return variables.__get_num_with_unit(variables.card.width);
              }
            ]]]
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + (variables.card.border.top.color || variables.card.border.color || variables.card.color.default);
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + (variables.card.border.left.color || variables.card.border.color || variables.card.color.default);
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + (variables.card.border.right.color || variables.card.border.color || variables.card.color.default);
            ]]]
        - border-bottom: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + (variables.card.border.bottom.color || variables.card.border.color || variables.card.color.default);
            ]]]
        - background-color: '[[[ return variables.card.color.background.default ]]]'
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
        - position: relative
      label:
        - z-index: 1
        - display: flex
        - justify-content: '[[[ return variables.text.label.justify ]]]'
        - align-items: '[[[ return variables.text.label.align_items ]]]'
        - text-transform: '[[[ return variables.text.label.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"; ]]]
        - height: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.label.padding.top) + " - " + variables.__get_num_with_unit(variables.text.label.padding.bottom) + ")"; ]]]
        - color: '[[[ return variables.text.label.color.default ]]]'
        - font-size: |
            [[[
              return variables.__get_num_with_unit(variables.text.label.font_size);
            ]]]
        - font-weight: '[[[ return variables.text.label.font_weight ]]]'
        - font-family: '[[[ return variables.text.label.font_family ]]]'
        - justify-self: start
        - text-align: '[[[ return variables.text.label.align ]]]'
        - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.top) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.left) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.right) ]]]'
        - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.bottom) ]]]'
        - outline: >-
            [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + (variables.card.border.color || variables.card.color.default); ]]]
      state:
        - display: flex
        - justify-content: '[[[ return variables.text.state.justify ]]]'
        - align-items: '[[[ return variables.text.state.align_items ]]]'
        - text-transform: '[[[ return variables.text.state.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.state.padding.left) + " - " + variables.__get_num_with_unit(variables.text.state.padding.right) + ")"; ]]]
        - height: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.state.padding.top) + " - " + variables.__get_num_with_unit(variables.text.state.padding.bottom) + ")"; ]]]
        - color: '[[[ return variables.text.state.color.default ]]]'
        - font-size: |
            [[[
              return variables.__get_num_with_unit(variables.text.state.font_size);
            ]]]
        - font-weight: '[[[ return variables.text.state.font_weight ]]]'
        - font-family: '[[[ return variables.text.state.font_family ]]]'
        - justify-self: start
        - text-align: '[[[ return variables.text.state.align ]]]'
        - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.top) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.left) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.right) ]]]'
        - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.bottom) ]]]'
        - outline: >-
            [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + (variables.card.border.color || variables.card.color.default); ]]]
      name:
        - display: flex
        - justify-content: '[[[ return variables.text.name.justify ]]]'
        - align-items: '[[[ return variables.text.name.align_items ]]]'
        - text-transform: '[[[ return variables.text.name.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.name.padding.left) + " - " + variables.__get_num_with_unit(variables.text.name.padding.right) + ")"; ]]]
        - height: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.name.padding.top) + " - " + variables.__get_num_with_unit(variables.text.name.padding.bottom) + ")"; ]]]
        - color: '[[[ return variables.text.name.color.default ]]]'
        - font-size: |
            [[[
                return variables.__get_num_with_unit(variables.text.name.font_size);
            ]]]
        - font-weight: '[[[ return variables.text.name.font_weight ]]]'
        - font-family: '[[[ return variables.text.name.font_family ]]]'
        - justify-self: start
        - text-align: '[[[ return variables.text.name.align ]]]'
        - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.top) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.left) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.right) ]]]'
        - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.bottom) ]]]'
        - outline: >-
            [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + (variables.card.border.color || variables.card.color.default); ]]]
      custom_fields:
        animation:
          - display: flex
          - position: absolute
          - align-items: |
              [[[
                return variables.animation.align_items || 'center';
              ]]]
          - justify-content: |
              [[[
                return variables.animation.justify_content || 'center';
              ]]]
          - transform: |
              [[[
                if (variables.animation?.transform?.advanced) {
                  return variables.animation.transform.advanced;
                }
                const transform = variables.animation.transform || {};
                const transforms = [];
                if (transform.scale !== undefined) transforms.push(`scale(${transform.scale})`);
                if (transform.scale_x !== undefined) transforms.push(`scaleX(${transform.scale_x})`);
                if (transform.scale_y !== undefined) transforms.push(`scaleY(${transform.scale_y})`);
                if (transform.scale_z !== undefined) transforms.push(`scaleZ(${transform.scale_z})`);
                if (transform.rotate !== undefined) transforms.push(`rotate(${transform.rotate}deg)`);
                if (transform.translate_x !== undefined) transforms.push(`translateX(${transform.translate_x}%)`);
                if (transform.translate_y !== undefined) transforms.push(`translateY(${transform.translate_y}%)`);
                if (transform.translate_z !== undefined) transforms.push(`translateZ(${transform.translate_z}px)`);
                if (transform.skew !== undefined) transforms.push(`skew(${transform.skew}deg)`);
                if (transform.perspective !== undefined) transforms.push(`perspective(${transform.perspective}px)`);
                if (transform.rotate_x !== undefined) transforms.push(`rotateX(${transform.rotate_x}deg)`);
                if (transform.rotate_y !== undefined) transforms.push(`rotateY(${transform.rotate_y}deg)`);
                if (transform.rotate_z !== undefined) transforms.push(`rotateZ(${transform.rotate_z}deg)`);
                return transforms.length > 0 ? transforms.join(' ') : 'none';
              ]]]
          - transform-origin: |
              [[[
                  return (variables.animation?.transform_origin) ? variables.animation.transform_origin : 'center';
              ]]]
          - filter: |
              [[[
                if (variables.animation?.filter?.advanced) {
                  return variables.animation.filter.advanced;
                }
                const filter = variables.animation.filter || {};
                const filters = [];
                if (filter.blur !== undefined) filters.push(`blur(${filter.blur}px)`);
                if (filter.brightness !== undefined) filters.push(`brightness(${filter.brightness}%)`);
                if (filter.saturate !== undefined) filters.push(`saturate(${filter.saturate}%)`);
                if (filter.invert !== undefined) filters.push(`invert(${filter.invert}%)`);
                if (filter.sepia !== undefined) filters.push(`sepia(${filter.sepia}%)`);
                if (filter.grayscale !== undefined) filters.push(`grayscale(${filter.grayscale}%)`);
                if (filter.hue_rotate !== undefined) filters.push(`hue-rotate(${filter.hue_rotate}deg)`);
                if (filter.contrast !== undefined) filters.push(`contrast(${filter.contrast}%)`);
                if (filter.opacity !== undefined) filters.push(`opacity(${filter.opacity}%)`);
                return filters.length > 0 ? filters.join(' ') : 'none';
              ]]]
          - height: |
              [[[
                return "calc( " + variables.__get_num_with_unit(variables.card.height) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.top.size) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size)
              ]]]
          - width: |
              [[[
                return "calc( " + variables.__get_num_with_unit(variables.card.width) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.left.size) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.right.size)
              ]]]
    state:
      - id: state_on
        operator: template
        value: |
          [[[
            return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - cblcars_matched_state: |
                [[[
                  this._config.cblcars_matched_state = 'active'
                  return 'state_on'
                ]]]
            - transition: all 0.4s ease-in
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.active;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.active;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.active;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.active;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.active ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
          label:
            - color: '[[[ return variables.text.label.color.active ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
          name:
            - color: '[[[ return variables.text.name.color.active ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.active || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.active || variables.card.color.background.active ]]]
      - id: state_off
        operator: template
        value: |
          [[[
            return entity !== undefined && ['off', 'closed', 'unlocked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - cblcars_matched_state: |
                [[[
                  this._config.cblcars_matched_state = 'inactive'
                  return 'state_off'
                ]]]
            - transition: all 0.4s ease-out
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.inactive;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.inactive;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.inactive;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.inactive;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.inactive ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
          label:
            - color: '[[[ return variables.text.label.color.inactive ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
          name:
            - color: '[[[ return variables.text.name.color.inactive ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive || variables.card.color.background.inactive ]]]
      - id: state_heat
        value: heat
        styles:
          card:
            - cblcars_matched_state: |
                [[[
                  this._config.cblcars_matched_state = 'heat'
                  return 'state_heat'
                ]]]
            - transition: all 0.4s ease-out
            - background-color: '[[[ return variables.card.color.background.hvac_heat ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.hvac_heat;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.hvac_heat;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.hvac_heat;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.hvac_heat;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.hvac_heat ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_heat; ]]]
          label:
            - color: '[[[ return variables.text.label.color.hvac_heat ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_heat; ]]]
          name:
            - color: '[[[ return variables.text.name.color.hvac_heat ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_heat; ]]]
      - id: state_cool
        value: cool
        styles:
          card:
            - cblcars_matched_state: |
                [[[
                  this._config.cblcars_matched_state = 'cool'
                  return 'state_cool'
                ]]]
            - transition: all 0.4s ease-out
            - background-color: '[[[ return variables.card.color.background.hvac_cool ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.hvac_cool;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.hvac_cool;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.hvac_cool;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.hvac_cool;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.hvac_cool ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_cool; ]]]
          label:
            - color: '[[[ return variables.text.label.color.hvac_cool ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_cool; ]]]
          name:
            - color: '[[[ return variables.text.name.color.hvac_cool ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_cool; ]]]
      - id: state_unavailable
        operator: template
        value: |
          [[[
            return entity !== undefined && ['unknown', 'unavailable'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - cblcars_matched_state: |
                [[[
                  this._config.cblcars_matched_state = 'unavailable'
                  return 'state_unavailable'
                ]]]
            - background-color: '[[[ return variables.card.color.background.unavailable ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.unavailable;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.unavailable;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.unavailable;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.unavailable;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.unavailable ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.unavailable; ]]]
          label:
            - color: '[[[ return variables.text.label.color.unavailable ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.unavailable; ]]]
          name:
            - color: '[[[ return variables.text.name.color.unavailable ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.unavailable; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.unavailable || variables.icon.color.inactive || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.unavailable || variables.card.color.background.unavailable || variables.icon.color.background.inactive || variables.card.color.background.inactive ]]]
      - id: state_zero
        operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            const val = Number(states[entity.entity_id].state);
            return entity !== undefined && !isNaN(val) && val === 0;
          ]]]
        styles:
          card:
            - cblcars_matched_state: |
                [[[
                  this._config.cblcars_matched_state = 'zero'
                  return 'state_zero'
                ]]]
            - background-color: '[[[ return variables.card.color.background.zero ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.zero;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.zero;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.zero;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.zero;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.zero; ]]]
          label:
            - color: '[[[ return variables.text.label.color.zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.zero; ]]]
          name:
            - color: '[[[ return variables.text.name.color.zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.zero; ]]]
      - id: state_nonzero
        operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            const val = Number(states[entity.entity_id].state);
            return entity !== undefined && !isNaN(val) && val !== 0;
          ]]]
        styles:
          card:
            - cblcars_matched_state: |
                [[[
                  this._config.cblcars_matched_state = 'non_zero'
                  return 'state_nonzero'
                ]]]
            - background-color: '[[[ return variables.card.color.background.non_zero ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.non_zero;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.non_zero;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.non_zero;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.non_zero;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.non_zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.non_zero; ]]]
          label:
            - color: '[[[ return variables.text.label.color.non_zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.non_zero; ]]]
          name:
            - color: '[[[ return variables.text.name.color.non_zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.non_zero; ]]]
      - id: state_default
        operator: default
        styles:
          card:
            - cblcars_matched_state: |
                [[[
                  this._config.cblcars_matched_state = 'default'
                  return 'state_default'
                ]]]
            - background-color: '[[[ return variables.card.color.background.default ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.default;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.default;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.default;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.default;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.default ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.default; ]]]
          label:
            - color: '[[[ return variables.text.label.color.default ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.default; ]]]
          name:
            - color: '[[[ return variables.text.name.color.default ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.default; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.default || variables.card.color.background.inactive ]]]
  cb-lcars-symbiont:
    template:
      - cb-lcars-functions
    variables:
      enable_resize_observer: true
      symbiont:
        enabled: false
        imprint_host: false
        text:
          imprint_from: label
        card:
          padding:
            left: 10
            right: 10
            top: 10
            bottom: 0
          border:
            top:
              right_radius: 34
            bottom:
              left_radius: 34
              right_radius: 34
    styles:
      custom_fields:
        symbiont:
          - z-index: 3
          - visibility: |
              [[[
                return (variables.symbiont.enabled) ? 'visible' : 'hidden';
              ]]]
          - display: block
          - position: absolute
          - margin-top: >-
              [[[ return
              variables.__get_num_with_unit(variables.symbiont.card.padding.top) ]]]
          - margin-bottom: >-
              [[[ return
              variables.__get_num_with_unit(variables.symbiont.card.padding.bottom)
              ]]]
          - margin-left: >-
              [[[ return
              variables.__get_num_with_unit(variables.symbiont.card.padding.left)
              ]]]
          - margin-right: >-
              [[[ return
              variables.__get_num_with_unit(variables.symbiont.card.padding.right)
              ]]]
          - align-items: |
              [[[
                return variables.symbiont.align_items || 'center';
              ]]]
          - justify-content: |
              [[[
                return variables.symbiont.justify_content || 'center';
              ]]]
          - height: |
              [[[
                return (variables.symbiont?.card?.height) ? variables.symbiont.card.height :
                "calc( " + variables.__get_num_with_unit(variables.card.height) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size) +
                  " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size) +
                  " - " +
                  variables.__get_num_with_unit(variables.symbiont.card.padding.top) +
                  " - " +
                  variables.__get_num_with_unit(variables.symbiont.card.padding.bottom) +
                  " )";
              ]]]
          - width: |
              [[[
                return (variables.symbiont?.card?.width) ? variables.symbiont.card.width :
                "calc( " + variables.__get_num_with_unit(variables.card.width) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.left.size) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.right.size) +
                " - " +
                variables.__get_num_with_unit(variables.symbiont.card.padding.left) +
                " - " +
                variables.__get_num_with_unit(variables.symbiont.card.padding.right) +
                " )";
              ]]]
          - border-top-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.symbiont.card.border.top.left_radius) + " !important";
              ]]]
          - border-top-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.symbiont.card.border.top.right_radius) + " !important";
              ]]]
          - border-bottom-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.symbiont.card.border.bottom.left_radius) + " !important";
              ]]]
          - border-bottom-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.symbiont.card.border.bottom.right_radius) + " !important";
              ]]]
    custom_fields:
      symbiont:
        card:
          type: markdown
          content: |
            <ha-alert alert-type="error" title="Symbiont Missing">Please add your symbiont card configuration in order to join with host.  Please refer to the documentation.</ha-alert>
          entity: "[[[ return variables?.entity; ]]]"
          variables: "[[[ return variables ]]]"
          card_mod:
            style: |
              [[[
                // cblcars_matched_state == current state used for style matching
                // variables.symbiont.
                //   enabled == enable child card function
                //   imprint_host == apply host card style to child card (along with symbiont_user_style)
                //   symbiont_user_style == user-supplied style to apply to symbiont card
                //console.log("Symbiont Card Mod cblcars_matched_state: ", this._config.cblcars_matched_state);
                let cblcars_state = this._config.cblcars_matched_state;
                let cardBackgroundColor = variables.card.color.background[cblcars_state]; //|| variables.card.color.background.default;
                let cardColor = variables.card.color[cblcars_state] || variables.card.color.default;
                //let labelColor = variables.text.label.color[cblcars_state] || variables.text.label.color.default;
                //let stateColor = variables.text.state.color[cblcars_state] || variables.text.state.color.default;
                //let nameColor = variables.text.name.color[cblcars_state] || variables.text.name.color.default;
                let textHostStyle = variables.symbiont.text.imprint_from || 'label';
                let textColor = variables.text[textHostStyle].color[cblcars_state] || variables.text[textHostStyle].color.default;
                let fontSize = variables.text[textHostStyle].font_size;
                let fontFamily = variables.text[textHostStyle].font_family;
                //console.log("cardBackgroundColor: ", cardBackgroundColor);
                //console.log("cardColor: ", cardColor);
                //console.log("labelColor: ", labelColor);
                //console.log("stateColor: ", stateColor);
                //console.log("nameColor: ", nameColor);
                //console.log("textColor: ", textColor);
                //console.log("fontSize: ", fontSize);
                //console.log("fontFamily: ", fontFamily);
                let symbiont_style = "";
                let symbiont_user_style = variables.symbiont?.symbiont_user_style || "";
                let base_style = `
                  ha-card, hui-entities-card {
                    border-bottom-left-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.bottom.left_radius) } !important;
                    border-bottom-right-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.bottom.right_radius) } !important;
                    border-top-right-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.top.right_radius) } !important;
                    border-top-left-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.top.left_radius) } !important;
                  }
                `;
                let host_style = `
                  ha-card, hui-entities-card {
                    background: ${variables.symbiont?.card?.color?.background?.default || 'none'} !important;
                    border-bottom-left-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.bottom.left_radius) } !important;
                    border-bottom-right-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.bottom.right_radius) } !important;
                    border-top-right-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.top.right_radius) } !important;
                    border-top-left-radius: ${ variables.__get_num_with_unit(variables.symbiont.card.border.top.left_radius) } !important;
                    color: ${textColor} !important;
                    font-size: ${fontSize} !important;
                    font-family: ${fontFamily} !important;
                  }
                  .header, .footer, .name, .state, .label {
                    color: ${textColor} !important;
                    font-size: ${fontSize} !important;
                    font-family: ${fontFamily} !important;
                  }
                  ha-card > ha-gauge {
                    --primary-text-color: ${textColor} !important;
                  }
                `;
                symbiont_style = base_style + (variables.symbiont?.imprint_host ? host_style : '') + symbiont_user_style;
                return symbiont_style;
              ]]]
  cb-lcars-header-picard-base:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
    show_label: false
    variables:
      card:
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
            zero: transparent
            non_zero: transparent
            hvac_heat: transparent
            hvac_cool: transparent
            unavailable: transparent
      text:
        label:
          justify: flex-start
          align_items: flex-start
          padding:
            top: |
              [[[
                return "calc("+variables.__get_num_with_unit(variables.lcars.border.top.size+15)+")";
              ]]]
            left: |
              [[[
                return "calc("+variables.__get_num_with_unit(variables.lcars.border.left.size+15)+")";
              ]]]
            bottom: |
              [[[
                return "calc("+variables.__get_num_with_unit(variables.lcars.border.bottom.size+15)+")";
              ]]]
            right: |
              [[[
                return "calc("+variables.__get_num_with_unit(variables.lcars.border.right.size+15)+")";
              ]]]
  cb-lcars-header-picard:
    template:
      - cb-lcars-header-picard-base
    variables:
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
        border:
          top:
            left_radius: var(--ha-card-border-radius)
            right_radius: 0px !important
          bottom:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: " "
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 20
          left:
            size: 180
          bottom:
            size: 0
          right:
            size: 0
      lcars_outer:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
      lcars_inner:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              left_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.top.left_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: "[[[ return variables.__get_num_with_unit(variables.card.height); ]]]"
        - width: "[[[ return variables.__get_num_with_unit(variables.card.width); ]]]"
        - border: 0
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - top: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - left: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-header
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_outer.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                top:
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.top.left_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size);
                    ]]]
                  right_radius: 0px
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size);
                    ]]]
                inner:
                  factor: "[[[ return variables.card.border.inner.factor; ]]]"
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
      lcars_inner:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-header
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_inner.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.left.size);
                    ]]]
                top:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.size);
                    ]]]
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.left_radius);
                    ]]]
                  right_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-header-picard-right:
    template:
      - cb-lcars-header-picard-base
    variables:
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
        border:
          top:
            left_radius: 0px !important
            right_radius: var(--ha-card-border-radius)
          bottom:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: " "
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 20
          left:
            size: 0
          bottom:
            size: 0
          right:
            size: 180
      lcars_outer:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
      lcars_inner:
        card:
          border:
            right:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              right_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.top.right_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: "[[[ return variables.__get_num_with_unit(variables.card.height); ]]]"
        - width: "[[[ return variables.__get_num_with_unit(variables.card.width); ]]]"
        - border: 0
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - right: 0
        lcars_inner:
          - position: absolute
          - top: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - right: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-header-right
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_outer.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                top:
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.top.right_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size);
                    ]]]
                  left_radius: 0px
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size);
                    ]]]
                inner:
                  factor: "[[[ return variables.card.border.inner.factor; ]]]"
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
      lcars_inner:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-header-right
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_inner.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.right.size);
                    ]]]
                top:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.size);
                    ]]]
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.right_radius);
                    ]]]
                  left_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-functions:
    variables:
      ___debug: false
      ___debug_hass: false
      ___debug_extras: null
      __cblcarsLog: |
        [[[
          return function styledLog(level, message) {
            let styles = [
                'color: white',
                'padding: 2px 4px',
                'border-radius: 15px'
            ];
            switch (level) {
                case 'info':
                    styles.push('background-color: #37a6d1'); // Blue
                    console.log(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
                case 'warn':
                    styles.push('background-color: #ff6753'); // Orange
                    console.warn(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
                case 'error':
                    styles.push('background-color: #ef1d10'); // Red
                    console.error(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
                case 'debug':
                    if(variables.___debug == true) {
                      styles.push('background-color: #8e44ad'); // Purple
                      console.debug(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    }
                    break;
                default:
                    styles.push('background-color: #6d748c'); // Gray for unknown levels
                    console.log(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
              }
          }
        ]]]
      __calculcate_grid_cell_dimension: |
        [[[
          return function calculcate_grid_cell_dimension(cardDimension, gridCells, gridGap, defaultButtonCardDimension) {
            let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
            let grid_cells = gridCells ? parseInt(gridCells) : 0;
            let grid_gap = gridGap ? parseInt(gridGap) : 0;
            //console.debug("... card_dimension: " + card_dimension);
            //console.debug("... grid_cells: " + grid_cells);
            //console.debug("... grid_gap: " + grid_gap);
            // If card_dimension is not defined or is 0, return defaultButtonCardDimension (default or user overrides this)
            if (card_dimension === 0) {
              //console.debug("...returning defaultButtonCardDimension: " + defaultButtonCardDimension);
              return defaultButtonCardDimension;
            }
            // Calculate the button card dimension that would fit the given number of grid cells
            //let button_card_dimension = Math.floor((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);
            let button_card_dimension = ((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);
            //console.debug("...button_card_dimension calulated: " + button_card_dimension);
            return (button_card_dimension +"px");
          }
        ]]]
      __calculate_grid_cells: |
        [[[
            return function calculate_grid_cells(cardDimension, buttonCardDimension, gridGap, defaultGridCells) {
            let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
            let button_card_dimension = buttonCardDimension ? parseInt(buttonCardDimension) : 0;
            let grid_gap = gridGap ? parseInt(gridGap) : 0;
            //console.debug("... card_dimension: " + card_dimension);
            //console.debug("... grid_gap: " + grid_gap);
            //console.debug("... defaultGridCells: " + defaultGridCells);
            // If card_dimension is not defined or is 0, return defaultGridCells (default or user overrides this)
            if (card_dimension === 0) {
              //console.debug("...returning defaultGridCells!");
              return defaultGridCells;
            }
            // Calculate the number of grid cells that would fit
            let grid_dimension = Math.floor((card_dimension + grid_gap) / (button_card_dimension + grid_gap));
            //console.debug("...returing calc. grid_dimension: " + grid_dimension);
            return grid_dimension;
          }
        ]]]
      __deepMerge: |
        [[[
          return function deepMerge(object1, object2) {
            if (Array.isArray(object1) && Array.isArray(object2)) {
              return [...object1, ...object2];
            } else if (typeof object1 === 'object' && typeof object2 === 'object') {
              return Object.entries(object2).reduce((acc, [key, value]) => {
                if (Object.keys(acc).includes(key) && typeof value === 'object') {
                  acc = { ...acc, [key]: deepMerge(acc[key], value) };
                } else {
                  acc = { ...acc, [key]: value };
                }
                return acc;
              }, { ...object1 });
            } else {
              return object2;
            }
          }
        ]]]
      __get_num_with_unit: |
        [[[
          return function getSizeWithUnit(size, unit = 'px') {
            return isNaN(size) ? size : size + unit;
          }
        ]]]
      __get_random_entity: |
        [[[
            return function get_random_entity(domain) {
              const entityList = Object.keys(hass.states).filter(e => e.startsWith(domain + '.'));
              if (domain === 'light') {
                  // Filter entities that are powered on
                  const poweredOnLights = entityList.filter(e => hass.states[e].state === 'on');
                  if (poweredOnLights.length === 0) {
                      // If no lights are powered on, return a random light entity
                      return entityList[Math.floor(Math.random() * entityList.length)];
                  }
                  // Sort powered on lights by brightness in descending order
                  poweredOnLights.sort((a, b) => {
                      const brightnessA = hass.states[a].attributes.brightness || 0;
                      const brightnessB = hass.states[b].attributes.brightness || 0;
                      return brightnessB - brightnessA;
                  });
                  // Return the brightest powered on light
                  return poweredOnLights[0];
              }
              // For other domains, return a random entity
              return entityList[Math.floor(Math.random() * entityList.length)];
            }
        ]]]
      __get_random_css_color: |
        [[[
            return function get_random_css_color() {
              var letters = '0123456789ABCDEF';
              var color = '#';
              for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
              }
              return color;
            }
        ]]]
      __parse_color: |
        [[[
          // Parses a css colour string and returns it in the specified format.
          // It returns the colour in the specified format: 'rgb' (array), 'rgba' (string), 'hex' (string)
          // Defaults to 'rgb' (array)
          // create an element to use for colour parsing.  Set on window so it can be reused
          if (!window._cbLcarsColorParser) {
            const el = document.createElement('div');
            el.style.display = 'none';
            document.body.appendChild(el);
            window._cbLcarsColorParser = el;
          }
          const defaultEl = window._cbLcarsColorParser;
          // Accepts: color string, format ('rgb'|'rgba'|'hex'), optional context element (ie. 'this' in a template)
          return function(color, format = 'rgb', contextEl = null) {
            const el = contextEl || defaultEl;
            el.style.color = color;
            let computedColor = getComputedStyle(el).color;
            if (color === 'transparent') {
              if (format === 'hex') return '#000000';
              if (format === 'rgba') return 'rgba(0,0,0,0)';
              return [0, 0, 0, 0];
            }
            const rgba = computedColor.match(/\d+/g).map(Number);
            const [r, g, b, a = 1] = rgba.length === 4 ? rgba : [...rgba.slice(0, 3), 1];
            if (format === 'hex') {
              const toHex = v => v.toString(16).padStart(2, '0');
              return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
            }
            if (format === 'rgba') {
              return `rgba(${r},${g},${b},${a})`;
            }
            // Default: return array
            return [r, g, b, a];
          }
        ]]]
      __extract_color_channel: |
        [[[
          return function extract_color_channel(color, channel) {
            // Convert the channel to lowercase
            channel = channel.toLowerCase();
            // Determine if the input is rgb or rgba
            let isRGBA = color.startsWith('rgba');
            // Split the color string into an array of numbers
            let numbers = color.slice(isRGBA ? 5 : 4, -1).split(',').map(Number);
            // Define the color channels
            let channels = {r: 0, g: 1, b: 2, a: 3};
            // Check if the specified channel exists
            if (channel in channels) {
              // If the input is rgb and the channel is 'a', return undefined
              if (!isRGBA && channel === 'a') {
                return undefined;
              }
              // Return the decimal value of the specified color channel
              return numbers[channels[channel]];
            } else {
              throw new Error('Invalid color channel. Please specify "r", "g", "b", or "a".');
            }
          }
        ]]]
      __interpolated_rgb: |
        [[[
          return function interpolated_rgb(start_rgb, end_rgb, step, total_steps) {
            let start_r = variables.__extract_color_channel(start_rgb, 'r');
            let start_g = variables.__extract_color_channel(start_rgb, 'g');
            let start_b = variables.__extract_color_channel(start_rgb, 'b');
            let end_r = variables.__extract_color_channel(end_rgb, 'r');
            let end_g = variables.__extract_color_channel(end_rgb, 'g');
            let end_b = variables.__extract_color_channel(end_rgb, 'b');
            let interpolated_r = Math.round(start_r + step * (end_r - start_r) / total_steps);
            let interpolated_g = Math.round(start_g + step * (end_g - start_g) / total_steps);
            let interpolated_b = Math.round(start_b + step * (end_b - start_b) / total_steps);
            //console.log("in function r="+interpolated_r + ",g=" +interpolated_g+ ",b=" + interpolated_b);
            return `rgb(${interpolated_r}, ${interpolated_g}, ${interpolated_b})`;
          }
        ]]]
    custom_fields:
      debugger: |
        [[[
          if (!variables.___debug) return
          const o = {
            variables: variables,
            entity: entity ? entity : {},
            bc: this
          }
          if (variables.___debug_hass) {
            o.hass = hass
          }
          if (variables.___debug_extras) {
            o.extras = variables.___debug_extras
          }
          variables.__cblcarsLog("debug", o)
        ]]]
    styles:
      custom_fields:
        debugger:
          - height: 0
          - width: 0
          - visibility: hidden
  cb-lcars-button-square:
    template: cb-lcars-button-base
    show_icon: false
  cb-lcars-button-picard:
    template: cb-lcars-button-base
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.card.color.default ]]]'
            active: '[[[ return variables.card.color.active ]]]'
            inactive: '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.zero ]]]'
            non_zero: '[[[ return variables.card.color.non_zero ]]]'
            hvac_heat: '[[[ return variables.card.color.hvac_heat ]]]'
            hvac_cool: '[[[ return variables.card.color.hvac_cool ]]]'
            unavailable: '[[[ return variables.card.color.unavailable ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.card.color.default ]]]'
            active: '[[[ return variables.card.color.active ]]]'
            inactive: '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.zero ]]]'
            non_zero: '[[[ return variables.card.color.non_zero ]]]'
            hvac_heat: '[[[ return variables.card.color.hvac_heat ]]]'
            hvac_cool: '[[[ return variables.card.color.hvac_cool ]]]'
            unavailable: '[[[ return variables.card.color.unavailable ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.card.color.default ]]]'
            active: '[[[ return variables.card.color.active ]]]'
            inactive: '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.zero ]]]'
            non_zero: '[[[ return variables.card.color.non_zero ]]]'
            hvac_heat: '[[[ return variables.card.color.hvac_heat ]]]'
            hvac_cool: '[[[ return variables.card.color.hvac_cool ]]]'
            unavailable: '[[[ return variables.card.color.unavailable ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
      icon:
        color:
          default: null
          active: '[[[ return variables.card.color.active ]]]'
          inactive: '[[[ return variables.card.color.inactive ]]]'
          unavailable: '[[[ return variables.card.color.unavailable ]]]'
      card:
        border:
          top:
            size: 4px
          left:
            size: 4px
          right:
            size: 4px
          bottom:
            size: 4px
        color:
          background:
            default: transparent
            active: transparent
            zero: transparent
            non_zero: transparent
            hvac_heat: transparent
            hvac_cool: transparent
            inactive: transparent
            unavailable: transparent
  cb-lcars-button-picard-dense:
    template: cb-lcars-button-picard
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-right:
    template: cb-lcars-button-picard
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        justify: right
        border:
          left:
            color: black
          right:
            color: transparent
  cb-lcars-button-picard-dense-right:
    template: cb-lcars-button-picard-right
    variables:
      card:
        height: 50px
  cb-lcars-callout-base:
    variables:
      card:
        border:
          top:
            left_radius: 0
            right_radius: 0
          bottom:
            left_radius: 0
            right_radius: 0
    styles:
      label:
        - border-top-right-radius: 0px
        - border-top-left-radius: 0px
        - border-bottom-right-radius: 0px
        - border-bottom-left-radius: 0px
  cb-lcars-header-callout:
    template:
      - cb-lcars-header
      - cb-lcars-callout-base
    variables:
      card:
        border:
          top:
            size: 10px
          left:
            size: 10px
  cb-lcars-header-callout-right:
    template:
      - cb-lcars-header-right
      - cb-lcars-callout-base
    variables:
      card:
        border:
          top:
            size: 10px
          right:
            size: 10px
  cb-lcars-footer-callout:
    template:
      - cb-lcars-footer
      - cb-lcars-callout-base
    variables:
      card:
        border:
          bottom:
            size: 10px
          left:
            size: 10px
  cb-lcars-footer-callout-right:
    template:
      - cb-lcars-footer-right
      - cb-lcars-callout-base
    variables:
      card:
        border:
          bottom:
            size: 10px
          right:
            size: 10px
  cb-lcars-animate-press:
    variables:
      animations:
        ripple:
          ripple_color: var(--lcars-card-top-color)
          ripple_opacity: 0.5
    styles:
      card:
        - '--mdc-ripple-color': '[[[ return variables.animations.ripple.ripple_color; ]]]'
        - '--mdc-ripple-press-opacity': '[[[ return variables.animations.ripple.ripple_opacity; ]]]'
  cb-lcars-animation-alert:
    template:
      - cb-lcars-functions
    variables:
      animation:
        alert:
          size: default
          alert_text: "alert"
          sub_text: "condition"
          preset: default
          text:
            alert_text:
              font_size: 14
              font_weight: 500
              font_family: "cb-lcars_microgramma,cb-lcars_jeffries,cb-lcars_antonio,Antonio,Arial,sans-serif"
              align: center
              transform: uppercase
              stretch: true
              color:
                default: var(--error-color)
            sub_text:
              font_size: 6
              font_weight: 200
              font_family: "cb-lcars_microgramma,cb-lcars_jeffries,cb-lcars_antonio,Antonio,Arial,sans-serif"
              align: center
              transform: uppercase
              stretch: true
              color:
                default: var(--primary-text-color)
          color:
            bars:
              default: var(--lcars-ui-primary)
              animation_base: var(--lcars-ui-quaternary)
              animation_flash: var(--lcars-alert-blue)
            shape:
              default: var(--lcars-ui-primary)
          enable_bar_animation: true
          animation_duration: 2
          enable_blink: true
          blink_duration: 4
          blink_delay: 2
          custom_alert_presets:
            my_condition:
              alert_text: my custom alert
              animation_duration: 1.5
          alert_presets:
            condition_red:
              alert_text: Alert
              sub_text: "condition: red"
              color:
                bars:
                  default: var(--lcars-alert-red)
                  animation_base: var(--lcars-alert-red)
                  animation_flash: var(--picard-lightest-orange)
                shape:
                  default: var(--lcars-alert-red)
              text:
                alert_text:
                  stretch: true
                  color:
                    default: var(--lcars-alert-red)
                sub_text:
                  stretch: true
                  color:
                    default: var(--lcars-alert-red)
            condition_blue:
              alert_text: Alert
              sub_text: "condition: blue"
              color:
                bars:
                  default: var(--lcars-alert-blue)
                  animation_base: var(--lcars-alert-blue)
                  animation_flash: var(--picard-light-blue)
                shape:
                  default: var(--lcars-alert-blue)
              text:
                alert_text:
                  stretch: true
                  color:
                    default: var(--lcars-alert-blue)
                sub_text:
                  stretch: true
                  color:
                    default: var(--lcars-alert-blue)
            condition_green:
              alert_text: Alert
              sub_text: "condition: green"
              color:
                bars:
                  default: var(--picard-green)
                  animation_base: var(--picard-green)
                  animation_flash: var(--picard-light-green)
                shape:
                  default: var(--picard-green)
              text:
                alert_text:
                  stretch: true
                  color:
                    default: var(--picard-green)
                sub_text:
                  stretch: true
                  color:
                    default: var(--picard-green)
            condition_yellow:
              alert_text: Alert
              sub_text: "condition: yellow"
              color:
                bars:
                  default: var(--lcars-alert-yellow)
                  animation_base: var(--lcars-alert-yellow)
                  animation_flash: var(--picard-yellow)
                shape:
                  default: var(--lcars-alert-yellow)
              text:
                alert_text:
                  stretch: true
                  color:
                    default: var(--lcars-alert-yellow)
                sub_text:
                  stretch: true
                  color:
                    default: var(--lcars-alert-yellow)
            condition_grey:
              alert_text: Alert
              sub_text: "condition: grey"
              color:
                bars:
                  default: var(--picard-grey)
                  animation_base: var(--picard-darkest-gray)
                  animation_flash: var(--picard-medium-light-gray)
                shape:
                  default: var(--picard-dark-gray)
              text:
                alert_text:
                  stretch: true
                  color:
                    default: var(--picard-dark-gray)
                sub_text:
                  stretch: true
                  color:
                    default: var(--picard-dark-gray)
            condition_black:
              alert_text: Alert
              sub_text: "condition: black"
              color:
                bars:
                  default: var(--picard-lightest-blue)
                  animation_base: var(--picard-lightest-blue)
                  animation_flash: black
                shape:
                  default: var(--picard-lightest-blue)
              text:
                alert_text:
                  stretch: true
                  color:
                    default: var(--picard-lightest-blue)
                sub_text:
                  stretch: true
                  color:
                    default: var(--picard-lightest-blue)
          range:
            enabled: false
            ranges:
              - from: 0
                to: 50
                preset: condition_green
              - from: 50
                to: 80
                preset: condition_yellow
              - from: 80
                to: 100
                preset: condition_red
          black_box_x: 18
          black_box_y: 27
          black_box_width: 64
          black_box_height: 22
          alert_text_box_height: 12
          sub_text_box_height: 8
          text_box_gap: 0
          padding:
            top: 5
            left: 5
            right: 5
            bottom: 5
    custom_fields:
      animation: |
        [[[
          // --- Deep merge utility for merging settings objects
          // Recursively merges source objects into the target, with later sources overriding earlier ones
          function deepMerge(target, ...sources) {
            if (!sources.length) return target;
            const source = sources.shift();
            if (typeof target !== 'object' || target === null) target = {};
            if (typeof source !== 'object' || source === null) return target;
            for (const key in source) {
              if (
                source[key] &&
                typeof source[key] === 'object' &&
                !Array.isArray(source[key])
              ) {
                target[key] = deepMerge(target[key], source[key]);
              } else {
                target[key] = source[key];
              }
            }
            return deepMerge(target, ...sources);
          }
          const cblcarsLog = variables.__cblcarsLog;
          // --- Pull in alert settings from variables ---
          const alertSettings = variables.animation.alert ?? {};
          //////////////////////////////////////////////////////////////////////////////
          // CONDITIONAL PRESET SELECTION BASED ON ENTITY/ATTRIBUTE VALUE
          // Supports dynamic preset selection based on entity state or attribute value
          //////////////////////////////////////////////////////////////////////////////
          let selectedPreset = null;
          const rangeSettings = alertSettings.range;
          if (rangeSettings && rangeSettings.enabled && Array.isArray(rangeSettings.ranges)) {
            let value = null;
            const attribute = variables.attribute;
            if (entity) {
              if (attribute) {
                value = entity.attributes?.[attribute];
                // Special handling for brightness: convert 0-255 to 0-100 percentage
                if (attribute === 'brightness' && value !== undefined && value !== null && !isNaN(parseFloat(value))) {
                  value = (parseFloat(value) / 256) * 100;
                }
              } else {
                value = entity.state;
              }
              //cblcarsLog('debug',`value: ${value}`)
            } else {
              //cblcarsLog("debug","no entity selected");
            }
            let numericValue = value;
            if (typeof value === "string" && !isNaN(Number(value))) {
              numericValue = Number(value);
            }
            for (const entry of rangeSettings.ranges) {
              if ("equals" in entry && entry.equals !== undefined) {
                // Accept non-numeric values for equals, use loose equality for flexibility
                if (value == entry.equals) {
                  selectedPreset = entry.preset;
                  break;
                }
              } else if ("from" in entry && "to" in entry) {
                // Only check numeric values for from/to
                if (typeof numericValue === "number" && !isNaN(numericValue)) {
                  if (numericValue >= entry.from && numericValue <= entry.to) {
                    selectedPreset = entry.preset;
                    break;
                  }
                }
              }
            }
          }
          //cblcarsLog('debug',`selectedPreset: ${selectedPreset}`)
          const card_height = variables.animation.height !== undefined ? parseInt(variables.animation.height) : (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          const card_width = variables.animation.width !== undefined ? parseInt(variables.animation.width) : (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          //////////////////////////////////////////////////////////////////////////////
          // ALERT PRESET MERGING
          // Merge built-in and user presets, with user presets taking precedence
          //////////////////////////////////////////////////////////////////////////////
          const builtInPresets = alertSettings.alert_presets ?? {};
          const userPresets = alertSettings.custom_alert_presets ?? {}; // <-- user can supply this
          //const alertPresetName = alertSettings.preset;
          let alertPresetName = alertSettings.preset;
          if (selectedPreset) {
            alertPresetName = selectedPreset;
          }
          //cblcarsLog("debug",`alertPresetName: ${alertPresetName}`)
          // Merge built-in and user presets (user wins on conflicts)
          const mergedPresets = deepMerge({}, builtInPresets, userPresets);
          // Remove meta keys from alertSettings to get only the base/defaults
          const { alert_presets, custom_alert_presets, preset, ...alertDefaults } = alertSettings;
          // Get preset settings if specified
          const presetSettings =
            alertPresetName &&
            mergedPresets[alertPresetName] &&
            typeof mergedPresets[alertPresetName] === 'object'
              ? mergedPresets[alertPresetName]
              : {};
          // Merge: defaults <- preset <- top-level overrides
          const alertStyleSettings = deepMerge(
            {},
            alertDefaults,
            presetSettings
          );
          //cblcarsLog("debug",alertStyleSettings);
          //////////////////////////////////////////////////////////////////////////////
          // COLOR AND ANIMATION SETTINGS
          //////////////////////////////////////////////////////////////////////////////
          const shape_color = alertStyleSettings.color.shape?.default || '#FF0000';
          const bar_color = alertStyleSettings.color.bars?.default || '#FF0000';
          const animation_base_color = alertStyleSettings.color.bars?.animation_base || '#FF0000';
          const animation_flash_color = alertStyleSettings.color.bars?.animation_flash || '#FFFFFF';
          const animation_duration = alertStyleSettings.animation_duration || 1;
          const enable_bar_animation = (alertStyleSettings.animation_duration != 0 && alertStyleSettings.enable_bar_animation) ?? 'true';
          const blink_duration = alertStyleSettings.blink_duration || 4;
          const blink_delay = alertStyleSettings.blink_delay || 2;
          const enable_blink = (alertStyleSettings.blink_duration != 0 && alertStyleSettings.enable_blink) ?? true;
          // Calculate animation delays for bar spread effect
          const delays = [
            0,
            0.0833 * animation_duration,
            0.1667 * animation_duration,
            0.25 * animation_duration,
            0.3333 * animation_duration,
            0.4167 * animation_duration
          ];
          //////////////////////////////////////////////////////////////////////////////
          // PADDING AND VIEWBOX
          //////////////////////////////////////////////////////////////////////////////
          // Padding for SVG (object with top, right, bottom, left)
          const pad = variables.animation.alert.padding || {};
          const padTop = pad.top !== undefined ? parseInt(pad.top) : 0;
          const padRight = pad.right !== undefined ? parseInt(pad.right) : 0;
          const padBottom = pad.bottom !== undefined ? parseInt(pad.bottom) : 0;
          const padLeft = pad.left !== undefined ? parseInt(pad.left) : 0;
          // Adjusted viewBox for SVG
          const vb_x = 0 - padLeft;
          const vb_y = 0 - padTop;
          const vb_w = 100 + padLeft + padRight;
          const vb_h = 73.56 + padTop + padBottom;
          //////////////////////////////////////////////////////////////////////////////
          // SVG PATHS FOR ALERT SHAPE
          // Condensed and standard SVG paths for the main alert shape
          //////////////////////////////////////////////////////////////////////////////
          // Condensed version based on svg provided by sparkyvision
          const condensed_path = `
            <path id="raShape" fill-rule="evenodd" clip-rule="evenodd" d="
            M23.108 25.389
            L15.402 17.558
            C18.473 14.316 23.222 10.239 28.118 8.950
            L31.047 8.950 L31.047 23.210
            L68.953 23.210 L68.953 8.950
            L71.882 8.950
            C76.776 10.239 81.524 14.314 84.594 17.555
            L76.885 25.389 L23.108 25.389Z
            M8.889 36.834
            C8.889 33.512 9.541 30.602 10.197 28.093
            L16.885 28.093 L16.885 45.659
            L10.214 45.659
            C9.547 43.090 8.889 40.180 8.889 36.834Z
            M91.111 36.834
            C91.111 40.180 90.453 43.090 89.786 45.659
            L83.176 45.659 L83.176 28.093
            L89.803 28.093
            C90.459 30.602 91.111 33.512 91.111 36.834Z
            M15.399 56.090
            C18.470 59.349 23.220 63.435 28.118 64.697
            L31.047 64.697 L31.047 50.490
            L68.953 50.490 L68.953 64.697
            L71.882 64.697
            C76.778 63.436 81.527 59.351 84.600 56.094
            L76.953 48.347 L23.040 48.347 L15.399 56.090Z
            " fill="${shape_color}"/>
            `;
          // Standard version based on svg provided by Panter (recalculated and baselined with condensed)
          const std_path = `
            <path id="raShape" fill-rule="evenodd" clip-rule="evenodd" d="
              M30.40 0
              V21.00
              C30.40 21.84 31.06 22.50 31.89 22.50
              H68.08
              C68.91 22.50 69.57 21.84 69.57 21.00
              V0
              C77.94 2.90 85.08 7.63 90.35 13.59
              L75.92 25.26
              H24.08
              L9.29 13.59
              C14.62 7.63 22.01 2.90 30.40 0
              ZM1.08 28.36
              C0.37 31.07 0 33.84 0 36.63
              C0 39.42 0.37 42.19 1.08 44.90
              H15.10
              V28.36
              H1.08
              ZM9.29 60.03
              C14.62 65.90 22.01 70.62 30.40 73.56
              V52.54
              C30.40 51.70 31.06 51.04 31.89 51.04
              H68.08
              C68.91 51.04 69.57 51.70 69.57 52.54
              V73.56
              C77.94 70.62 85.08 65.90 90.35 60.03
              L75.92 48.37
              H24.08
              L9.29 60.03
              ZM98.67 44.90
              C99.38 42.19 99.76 39.42 99.76 36.63
              C99.76 33.84 99.38 31.07 98.67 28.36
              H84.77
              V44.90
              H98.67Z
            " fill="${shape_color}"></path>
          `;
          //////////////////////////////////////////////////////////////////////////////
          // BAR ANIMATION LINES
          // Define y-coordinates for condensed and standard versions
          //////////////////////////////////////////////////////////////////////////////
          const condensedLines1 = [
            [8.950, 10.176],
            [11.213, 12.439],
            [13.476, 14.702],
            [15.739, 16.965],
            [17.996, 19.222],
            [20.259, 21.485]
          ];
          const condensedLines2 = [
            [52.105, 53.331],
            [54.372, 55.598],
            [56.635, 57.861],
            [58.898, 60.124],
            [61.161, 62.387],
            [63.425, 64.651]
          ];
          // SVG height for condensed and standard
          const condensedHeight = 64.697 - 8.950; // 55.747
          const standardHeight = 85.56;
          // Select path based on size variable
          const alert_size = variables.animation.alert.size || "standard";
          const selected_path = alert_size === "condensed" ? condensed_path : std_path;
          // Helper to scale y-coordinates for standard size
          function scaleLines(lines, fromHeight, toHeight, yOffsetFrom, yOffsetTo) {
            const scale = toHeight / fromHeight;
            const offset = yOffsetTo - yOffsetFrom * scale;
            return lines.map(([y1, y2]) => [
              y1 * scale + offset,
              y2 * scale + offset
            ]);
          }
          // Select lines based on size
          let lines1, lines2;
          if (alert_size === "condensed") {
            lines1 = condensedLines1;
            lines2 = condensedLines2;
          } else {
            // Scale condensed lines to standard height
            lines1 = scaleLines(condensedLines1, condensedHeight, standardHeight, 8.95, 0);
            lines2 = scaleLines(condensedLines2, condensedHeight, standardHeight, 8.95, -12);
          }
          // Generate SVG line elements for bar animation
          function linesToSVG(lines, group) {
            return lines.map(
              ([y1, y2], i) =>
                `<line id="raLines${group}_${i + 1}" x1="50.0" y1="${y1.toFixed(3)}" x2="50.0" y2="${y2.toFixed(3)}" stroke="${bar_color}" stroke-width="33.33" />`
            ).join('\n');
          }
          const svgLines =
            linesToSVG(lines2, 2) + '\n' +
            linesToSVG(lines1, 1);
          //////////////////////////////////////////////////////////////////////////////
          // TEXT CONFIGURATION
          //////////////////////////////////////////////////////////////////////////////
          // Black box dimensions and position (user-configurable)
          // - black_box_x: left edge of black box (default: 18)
          // - black_box_y: top edge of black box (default: 37)
          // - black_box_width: width of black box (default: 64)
          // - black_box_height: height of black box (default: 32)
          const black_box_x = alertSettings.black_box_x !== undefined ? alertSettings.black_box_x : 18;
          const black_box_y = alertSettings.black_box_y !== undefined ? alertSettings.black_box_y : 37;
          const black_box_width = alertSettings.black_box_width !== undefined ? alertSettings.black_box_width : 64;
          const black_box_height = alertSettings.black_box_height !== undefined ? alertSettings.black_box_height : 32;
          // Text box heights and gap (user-configurable)
          const alert_text_box_height = alertSettings.alert_text_box_height !== undefined ? alertSettings.alert_text_box_height : 18;
          const sub_text_box_height = alertSettings.sub_text_box_height !== undefined ? alertSettings.sub_text_box_height : 14;
          const text_box_gap = alertSettings.text_box_gap !== undefined ? alertSettings.text_box_gap : 4;
          // Calculate total text height
          const total_text_height = alert_text_box_height + text_box_gap + sub_text_box_height;
          // Center the text group vertically in the black box
          const text_group_top = black_box_y + (black_box_height - total_text_height) / 2;
          // Y positions for each line (centered in their respective boxes)
          const alert_text_y = text_group_top + alert_text_box_height / 2;
          const sub_text_y = text_group_top + alert_text_box_height + text_box_gap + sub_text_box_height / 2;
          // Get text content and style for alert_text and sub_text
          const alert_text_content = alertStyleSettings.alert_text ?? '';
          const sub_text_content = alertStyleSettings.sub_text ?? '';
          const alert_text_style = (alertStyleSettings.text && alertStyleSettings.text.alert_text) || {};
          const sub_text_style = (alertStyleSettings.text && alertStyleSettings.text.sub_text) || {};
          // Helper to get style value with fallback, fail gracefully if styleObj is missing or not an object
          function getTextStyle(styleObj, key, fallback) {
            if (!styleObj || typeof styleObj !== 'object') return fallback;
            return styleObj[key] !== undefined ? styleObj[key] : fallback;
          }
          // Font and alignment for alert_text
          const alert_font_size = getTextStyle(alert_text_style, 'font_size', 14);
          const alert_font_weight = getTextStyle(alert_text_style, 'font_weight', 500);
          const alert_font_family = getTextStyle(alert_text_style, 'font_family', "cb-lcars_microgramma,cb-lcars_jeffries,cb-lcars_antonio,Antonio,Arial,sans-serif");
          const alert_fill = getTextStyle(alert_text_style, 'color', {default: 'var(--primary-text-color)'}).default;
          const alert_text_anchor = getTextStyle(alert_text_style, 'align', 'center') === 'left' ? 'start' :
                                  getTextStyle(alert_text_style, 'align', 'center') === 'right' ? 'end' : 'middle';
          const alert_text_transform = getTextStyle(alert_text_style, 'transform', '').toLowerCase() === 'uppercase' ? 'uppercase' : 'none';
          const alert_dominant_baseline = getTextStyle(alert_text_style, 'dominant_baseline', 'middle');
          const alert_stretch = getTextStyle(alert_text_style, 'stretch', false);
          // Font and alignment for sub_text
          const sub_font_size = getTextStyle(sub_text_style, 'font_size', 6);
          const sub_font_weight = getTextStyle(sub_text_style, 'font_weight', 200);
          const sub_font_family = getTextStyle(sub_text_style, 'font_family', "cb-lcars_microgramma,cb-lcars_jeffries,cb-lcars_antonio,Antonio,Arial,sans-serif");
          const sub_fill = getTextStyle(sub_text_style, 'color', {default: 'var(--primary-text-color)'}).default;
          const sub_text_anchor = getTextStyle(sub_text_style, 'align', 'center') === 'left' ? 'start' :
                                getTextStyle(sub_text_style, 'align', 'center') === 'right' ? 'end' : 'middle';
          const sub_text_transform = getTextStyle(sub_text_style, 'transform', '').toLowerCase() === 'uppercase' ? 'uppercase' : 'none';
          const sub_dominant_baseline = getTextStyle(sub_text_style, 'dominant_baseline', 'middle');
          const sub_stretch = getTextStyle(sub_text_style, 'stretch', false);
          // Calculate text x position based on anchor
          function getTextX(anchor) {
            if (anchor === 'start') return black_box_x;
            if (anchor === 'end') return black_box_x + black_box_width;
            return black_box_x + black_box_width / 2;
          }
          // SVG text elements for both lines
          const svgTextElements = `
            <text
              x="${getTextX(alert_text_anchor)}"
              y="${alert_text_y}"
              font-size="${alert_font_size}"
              font-weight="${alert_font_weight}"
              font-family=${alert_font_family}
              fill="${alert_fill}"
              text-anchor="${alert_text_anchor}"
              dominant-baseline="${alert_dominant_baseline}"
              ${alert_stretch ? `textLength="${black_box_width}" lengthAdjust="spacingAndGlyphs"` : ''}
              class="redAlertBlink"
              style="text-transform:${alert_text_transform};"
            >${alert_text_transform === 'uppercase' ? (alert_text_content + '').toUpperCase() : alert_text_content}</text>
            <text
              x="${getTextX(sub_text_anchor)}"
              y="${sub_text_y}"
              font-size="${sub_font_size}"
              font-weight="${sub_font_weight}"
              font-family=${sub_font_family}
              fill="${sub_fill}"
              text-anchor="${sub_text_anchor}"
              dominant-baseline="${sub_dominant_baseline}"
              ${sub_stretch ? `textLength="${black_box_width}" lengthAdjust="spacingAndGlyphs"` : ''}
              class="redAlertBlink"
              style="text-transform:${sub_text_transform};"
            >${sub_text_transform === 'uppercase' ? (sub_text_content + '').toUpperCase() : sub_text_content}</text>
          `;
          //////////////////////////////////////////////////////////////////////////////
          // FINAL OUTPUT: Compose SVG and CSS for alert animation
          //////////////////////////////////////////////////////////////////////////////
          return `
            <elt>
              <style>
                .svgContainer{
                    padding:0px;
                    border-radius:10px;
                    display:flex;
                    align-items:center;
                }
                /* RED ALERT -- overall blinking */
                .redAlertBlink {
                    ${enable_blink ? `
                    animation-delay: ${blink_delay}s;
                    animation-duration: ${blink_duration}s;
                    animation-iteration-count: infinite;
                    animation-direction: normal;
                    animation-timing-function: ease-in-out;
                    animation-name: redAlertBlink;
                    ` : ''};
                }
                div.svgContainer svg {
                    width:100%;
                    height:100%;
                }
                @keyframes redAlertBlink {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.25; }
                }
                @keyframes flashLine {
                    0% {
                        stroke: ${animation_flash_color};
                        opacity: 1;
                    }
                    20% {
                        stroke: ${animation_base_color};
                        opacity: 1;
                    }
                    100% {
                        stroke: ${animation_base_color};
                        opacity: 0.25;
                    }
                }
                /* Spread animation for raLines */
                [id^="raLines1_"], [id^="raLines2_"] {
                    ${enable_bar_animation ? `
                    animation-name: flashLine;
                    animation-duration: ${animation_duration}s;
                    animation-timing-function: ease-in-out;
                    animation-iteration-count: infinite;
                    animation-fill-mode: both;
                    ` : ''};
                }
                /* Group 1: Top to bottom */
                #raLines1_1 { animation-delay: ${delays[0]}s; }
                #raLines1_2 { animation-delay: ${delays[1]}s; }
                #raLines1_3 { animation-delay: ${delays[2]}s; }
                #raLines1_4 { animation-delay: ${delays[3]}s; }
                #raLines1_5 { animation-delay: ${delays[4]}s; }
                #raLines1_6 { animation-delay: ${delays[5]}s; }
                /* Group 2: Bottom to top */
                #raLines2_6 { animation-delay: ${delays[0]}s; }
                #raLines2_5 { animation-delay: ${delays[1]}s; }
                #raLines2_4 { animation-delay: ${delays[2]}s; }
                #raLines2_3 { animation-delay: ${delays[3]}s; }
                #raLines2_2 { animation-delay: ${delays[4]}s; }
                #raLines2_1 { animation-delay: ${delays[5]}s; }
              </style>
              <div class="svgContainer">
                  <svg
                    width="${card_width}"
                    height="${card_height}"
                    viewBox="${vb_x} ${vb_y} ${vb_w} ${vb_h}"
                    fill="none"
                  >
                  <g id="redAlertSymbol">
                  ${selected_path}
                  ${svgLines}
                  ${svgTextElements}
                  </g>
                  </svg>
              </div>
            </elt>
          `;
          ]]]
  cb-lcars-dpad:
    template:
      - cb-lcars-functions
      - cb-lcars-base
    variables:
      enable_resize_observer: true
      __defs_dpad:
        color:
          background:
            active: |
              [[[
                const lcarsColor = getComputedStyle(document.documentElement).getPropertyValue('--lcars-ui-tertiary').trim();
                return lcarsColor ? lcarsColor : 'var(--picard-medium-dark-orange)';
              ]]]
            inactive: |
              [[[
                const lcarsColor = getComputedStyle(document.documentElement).getPropertyValue('--lcars-ui-secondary').trim();
                return lcarsColor ? lcarsColor : 'var(--picard-medium-light-gray)';
              ]]]
          overlay:
            default: transparent
            active: transparent
            inactive: transparent
      dpad:
        size: |
          [[[
            let size = (parseInt(variables.card.height) < parseInt(variables.card.width)) ? variables.__get_num_with_unit(variables.card.height) : variables.__get_num_with_unit(variables.card.width) || '300px';
            return size;
          ]]]
        color:
          background: "#1111ee"
        button:
          scale: 6.5
          min_height: 10px
          color:
            ripple: var(--state-color)
        up:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay: |
              [[[ return variables.__defs_dpad.color.overlay ]]]
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: "on"
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        down:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay: |
              [[[ return variables.__defs_dpad.color.overlay ]]]
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: "on"
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        left:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay: |
              [[[ return variables.__defs_dpad.color.overlay ]]]
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: "on"
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        right:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay: |
              [[[ return variables.__defs_dpad.color.overlay ]]]
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: "on"
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        center:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay: |
              [[[ return variables.__defs_dpad.color.overlay ]]]
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: "on"
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        up_left:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay: |
              [[[ return variables.__defs_dpad.color.overlay ]]]
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: "on"
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        up_right:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay: |
              [[[ return variables.__defs_dpad.color.overlay ]]]
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: "on"
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        down_left:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay: |
              [[[ return variables.__defs_dpad.color.overlay ]]]
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: "on"
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        down_right:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay: |
              [[[ return variables.__defs_dpad.color.overlay ]]]
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: "on"
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
    triggers_update:
      - "[[[ return variables.dpad.up.entity; ]]]"
      - "[[[ return variables.dpad.down.entity; ]]]"
      - "[[[ return variables.dpad.left.entity; ]]]"
      - "[[[ return variables.dpad.right.entity; ]]]"
      - "[[[ return variables.dpad.center.entity; ]]]"
      - "[[[ return variables.dpad.up_left.entity; ]]]"
      - "[[[ return variables.dpad.up_right.entity; ]]]"
      - "[[[ return variables.dpad.down_left.entity; ]]]"
      - "[[[ return variables.dpad.down_right.entity; ]]]"
    styles:
      card:
        - background: |
            [[[
              // Function to resolve CSS variables to their hex color values
              function resolveCssVariable(variable) {
                if (variable.startsWith('var(')) {
                  const cssVarName = variable.slice(4, -1).trim();
                  return getComputedStyle(document.documentElement).getPropertyValue(cssVarName).trim();
                }
                return variable;
              }
              let button_ripple_color = resolveCssVariable(variables.dpad.button.color.ripple);
              let svg_dpad_up_bg = (variables.dpad.up.entity && states[variables.dpad.up.entity] && states[variables.dpad.up.entity].state === variables.dpad.up.active_state) ? resolveCssVariable(variables.dpad.up.color.background.active) : resolveCssVariable(variables.dpad.up.color.background.inactive);
              let svg_dpad_down_bg = (variables.dpad.down.entity && states[variables.dpad.down.entity] && states[variables.dpad.down.entity].state === variables.dpad.down.active_state) ? resolveCssVariable(variables.dpad.down.color.background.active) : resolveCssVariable(variables.dpad.down.color.background.inactive);
              let svg_dpad_left_bg = (variables.dpad.left.entity && states[variables.dpad.left.entity] && states[variables.dpad.left.entity].state === variables.dpad.left.active_state) ? resolveCssVariable(variables.dpad.left.color.background.active) : resolveCssVariable(variables.dpad.left.color.background.inactive);
              let svg_dpad_right_bg = (variables.dpad.right.entity && states[variables.dpad.right.entity] && states[variables.dpad.right.entity].state === variables.dpad.right.active_state) ? resolveCssVariable(variables.dpad.right.color.background.active) : resolveCssVariable(variables.dpad.right.color.background.inactive);
              let svg_dpad_center_bg = (variables.dpad.center.entity && states[variables.dpad.center.entity] && states[variables.dpad.center.entity].state === variables.dpad.center.active_state) ? resolveCssVariable(variables.dpad.center.color.background.active) : resolveCssVariable(variables.dpad.center.color.background.inactive);
              let svg_dpad_up_left_bg = (variables.dpad.up_left.entity && states[variables.dpad.up_left.entity] && states[variables.dpad.up_left.entity].state === variables.dpad.up_left.active_state) ? resolveCssVariable(variables.dpad.up_left.color.background.active) : resolveCssVariable(variables.dpad.up_left.color.background.inactive);
              let svg_dpad_up_right_bg = (variables.dpad.up_right.entity && states[variables.dpad.up_right.entity] && states[variables.dpad.up_right.entity].state === variables.dpad.up_right.active_state) ? resolveCssVariable(variables.dpad.up_right.color.background.active) : resolveCssVariable(variables.dpad.up_right.color.background.inactive);
              let svg_dpad_down_left_bg = (variables.dpad.down_left.entity && states[variables.dpad.down_left.entity] && states[variables.dpad.down_left.entity].state === variables.dpad.down_left.active_state) ? resolveCssVariable(variables.dpad.down_left.color.background.active) : resolveCssVariable(variables.dpad.down_left.color.background.inactive);
              let svg_dpad_down_right_bg = (variables.dpad.down_right.entity && states[variables.dpad.down_right.entity] && states[variables.dpad.down_right.entity].state === variables.dpad.down_right.active_state) ? resolveCssVariable(variables.dpad.down_right.color.background.active) : resolveCssVariable(variables.dpad.down_right.color.background.inactive);
              let svg_background_color = resolveCssVariable(variables.dpad.color.background);
              let svgString = `<?xml version="1.0" encoding="UTF-8"?>
              <svg width="80mm" height="80mm" version="1.1" viewBox="0 0 80 80" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xlink="http://www.w3.org/1999/xlink">
                <metadata>
                <rdf:RDF>
                  <cc:Work rdf:about="">
                  <dc:format>image/svg+xml</dc:format>
                  <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
                  <dc:title/>
                  </cc:Work>
                </rdf:RDF>
                </metadata>
                <defs>
                  <style type="text/css"><![CDATA[
                  .lcars-svg-bg {
                  fill: ${svg_background_color};
                  }
                  .lcars-d-pad-bg {
                  fill: ${button_ripple_color};
                  }
                  .lcars-dpad-left-bg {
                  fill: ${svg_dpad_left_bg};
                  }
                  .lcars-dpad-right-bg {
                  fill: ${svg_dpad_right_bg};
                  }
                  .lcars-dpad-up-bg {
                  fill: ${svg_dpad_up_bg};
                  }
                  .lcars-dpad-down-bg {
                  fill: ${svg_dpad_down_bg};
                  }
                  .lcars-dpad-center-bg {
                  fill: ${svg_dpad_center_bg};
                  }
                  .lcars-dpad-up-left-bg {
                  fill: ${svg_dpad_up_left_bg};
                  }
                  .lcars-dpad-up-right-bg {
                  fill: ${svg_dpad_up_right_bg};
                  }
                  .lcars-dpad-down-left-bg {
                  fill: ${svg_dpad_down_left_bg};
                  }
                  .lcars-dpad-down-right-bg {
                  fill: ${svg_dpad_down_right_bg};
                  }
                  ]]></style>
                </defs>
                <g transform="translate(0,-217)">
                <path id="path892" d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-up-left-bg"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-up-right-bg" transform="matrix(-1, 0, 0, 1, 80, 0.0000019179001355951186)"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-down-left-bg" transform="matrix(1, 0, 0, -1, -8.208900226236437e-8, 514)"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-down-right-bg" transform="matrix(-1, 0, 0, -1, 80, 514)"></path>
                <path d="m34 227h12v-9.5c-3.8785-0.47437-8.044-0.4824-12 0z" class="lcars-dpad-up-bg"/>
                <path d="m44.2 219.2v5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m10 263v-12h-9.5c-0.47437 3.8785-0.4824 8.044 0 12z" class="lcars-dpad-left-bg"/>
                <path d="m2.199 252.8h5.0271" style="fill:none;opacity:.889;stroke-width:1.2;stroke:#000"/>
                <path d="m70 251v12h9.5c0.47437-3.8785 0.4824-8.044 0-12z" class="lcars-dpad-right-bg"/>
                <path d="m77.801 261.2h-5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m46 287h-12v9.5c3.8785 0.47437 8.044 0.4824 12 0z" class="lcars-dpad-down-bg"/>
                <path d="m35.8 294.8v-5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m11 251v12h23v23h12v-23h23v-12h-23v-23h-12v23z" class="lcars-dpad-center-bg"/>
                <path d="m34 230.49h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 233.2h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 236.48h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 244.9h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 276h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                </g>
              </svg>`;
              let encodedSvgString = encodeURIComponent(svgString);
              let backgroundImage = `url('data:image/svg+xml,${encodedSvgString}')`;
              return backgroundImage;
            ]]]
        - background-position: center
        - background-size: "[[[ return variables.__get_num_with_unit(variables.dpad.size) ]]]"
        - background-color: transparent
        - background-repeat: no-repeat
      custom_fields:
        dpad_up_button:
          - position: absolute
          - top: |
              [[[
                return "calc((" +
                variables.__get_num_with_unit(variables.card.height) + "/2) - (" +
                variables.__get_num_with_unit(variables.dpad.size) + " /2 ";
              ]]]
          - left: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.width) + "/2) - (" +
              variables.__get_num_with_unit(variables.dpad.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_down_button:
          - position: absolute
          - bottom: |
              [[[
                return "calc((" +
                variables.__get_num_with_unit(variables.card.height) + "/2) - (" +
                variables.__get_num_with_unit(variables.dpad.size) + " /2 ";
              ]]]
          - left: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.width) + "/2) - (" +
              variables.__get_num_with_unit(variables.dpad.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_left_button:
          - position: absolute
          - left: |
              [[[
                return "calc((" +
                variables.__get_num_with_unit(variables.card.width) + "/2) - (" +
                variables.__get_num_with_unit(variables.dpad.size) + " /2)";
              ]]]
          - top: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.height) + "/2) - (" +
              variables.__get_num_with_unit(variables.dpad.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_right_button:
          - position: absolute
          - right: |
              [[[
                return "calc((" +
                variables.__get_num_with_unit(variables.card.width) + "/2) - (" +
                variables.__get_num_with_unit(variables.dpad.size) + " /2)";
              ]]]
          - top: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.height) + "/2) - (" +
              variables.__get_num_with_unit(variables.dpad.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_center_button:
          - position: absolute
          - left: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.width) + "/2) - (" +
              variables.__get_num_with_unit(variables.dpad.size) + " /4) " ]]]
          - top: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.height) + "/2) - (" +
              variables.__get_num_with_unit(variables.dpad.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_up_left_button:
          - position: absolute
          - top: |
              [[[
                return "calc((" +
                variables.__get_num_with_unit(variables.card.height) + "/2) - (" +
                variables.__get_num_with_unit(variables.dpad.size) + " /2 ";
              ]]]
          - right: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.width) + "/2)"; ]]]
          - z-index: 99
        dpad_up_right_button:
          - position: absolute
          - top: |
              [[[
                return "calc((" +
                variables.__get_num_with_unit(variables.card.height) + "/2) - (" +
                variables.__get_num_with_unit(variables.dpad.size) + " /2 ";
              ]]]
          - left: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.width) + "/2)"; ]]]
          - z-index: 99
        dpad_down_left_button:
          - position: absolute
          - bottom: |
              [[[
                return "calc((" +
                variables.__get_num_with_unit(variables.card.height) + "/2) - (" +
                variables.__get_num_with_unit(variables.dpad.size) + " /2 ";
              ]]]
          - right: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.width) + "/2)"; ]]]
          - z-index: 99
        dpad_down_right_button:
          - position: absolute
          - bottom: |
              [[[
                return "calc((" +
                variables.__get_num_with_unit(variables.card.height) + "/2) - (" +
                variables.__get_num_with_unit(variables.dpad.size) + " /2 ";
              ]]]
          - left: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.width) + "/2)"; ]]]
          - z-index: 99
    custom_fields:
      dpad_center_button:
        card:
          type: custom:cblcars-button-card
          entity: "[[[ return variables.dpad.center.entity; ]]]"
          label: "[[[ return variables.dpad.center.label ]]]"
          template:
            - cb-lcars-button-square
          variables:
            ripple_color: "[[[ return variables.dpad.button.color.ripple; ]]]"
            card:
              min_height: "[[[ return variables.dpad.button.min_height; ]]]"
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " /2 )";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / " +
                variables.dpad.button.scale + " )";]]]
              color:
                background:
                  default: "[[[ return variables.dpad.center.color.overlay.default ]]]"
                  active: "[[[ return variables.dpad.center.color.overlay.active ]]]"
                  inactive: "[[[ return variables.dpad.center.color.overlay.inactive ]]]"
          tap_action: "[[[ return variables.dpad.center.tap_action ]]]"
          double_tap_action: "[[[ return variables.dpad.center.double_tap_action ]]]"
          hold_action: "[[[ return variables.dpad.center.hold_action ]]]"
      dpad_up_button:
        card:
          type: custom:cblcars-button-card
          entity: "[[[ return variables.dpad.up.entity; ]]]"
          label: "[[[ return variables.dpad.up.label ]]]"
          template:
            - cb-lcars-button-square
          variables:
            ripple_color: "[[[ return variables.dpad.button.color.ripple; ]]]"
            card:
              min_height: "[[[ return variables.dpad.button.min_height; ]]]"
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: "[[[ return variables.dpad.up.color.overlay.default ]]]"
                  active: "[[[ return variables.dpad.up.color.overlay.active ]]]"
                  inactive: "[[[ return variables.dpad.up.color.overlay.inactive ]]]"
          tap_action: "[[[ return variables.dpad.up.tap_action ]]]"
          double_tap_action: "[[[ return variables.dpad.up.double_tap_action ]]]"
          hold_action: "[[[ return variables.dpad.up.hold_action ]]]"
      dpad_down_button:
        card:
          type: custom:cblcars-button-card
          entity: "[[[ return variables.dpad.down.entity; ]]]"
          label: "[[[ return variables.dpad.down.label ]]]"
          template:
            - cb-lcars-button-square
          variables:
            ripple_color: "[[[ return variables.dpad.button.color.ripple; ]]]"
            card:
              min_height: "[[[ return variables.dpad.button.min_height; ]]]"
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: "[[[ return variables.dpad.down.color.overlay.default ]]]"
                  active: "[[[ return variables.dpad.down.color.overlay.active ]]]"
                  inactive: "[[[ return variables.dpad.down.color.overlay.inactive ]]]"
          tap_action: "[[[ return variables.dpad.down.tap_action ]]]"
          double_tap_action: "[[[ return variables.dpad.down.double_tap_action ]]]"
          hold_action: "[[[ return variables.dpad.down.hold_action ]]]"
      dpad_left_button:
        card:
          type: custom:cblcars-button-card
          entity: "[[[ return variables.dpad.left.entity; ]]]"
          label: "[[[ return variables.dpad.left.label ]]]"
          template:
            - cb-lcars-button-square
          variables:
            ripple_color: "[[[ return variables.dpad.button.color.ripple; ]]]"
            card:
              min_height: "[[[ return variables.dpad.button.min_height; ]]]"
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: "[[[ return variables.dpad.left.color.overlay.default ]]]"
                  active: "[[[ return variables.dpad.left.color.overlay.active ]]]"
                  inactive: "[[[ return variables.dpad.left.color.overlay.inactive ]]]"
          tap_action: "[[[ return variables.dpad.left.tap_action ]]]"
          double_tap_action: "[[[ return variables.dpad.left.double_tap_action ]]]"
          hold_action: "[[[ return variables.dpad.left.hold_action ]]]"
      dpad_right_button:
        card:
          type: custom:cblcars-button-card
          entity: "[[[ return variables.dpad.right.entity; ]]]"
          label: "[[[ return variables.dpad.right.label ]]]"
          template:
            - cb-lcars-button-square
          variables:
            ripple_color: "[[[ return variables.dpad.button.color.ripple; ]]]"
            card:
              min_height: "[[[ return variables.dpad.button.min_height; ]]]"
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: "[[[ return variables.dpad.right.color.overlay.default ]]]"
                  active: "[[[ return variables.dpad.right.color.overlay.active ]]]"
                  inactive: "[[[ return variables.dpad.right.color.overlay.inactive ]]]"
          tap_action: "[[[ return variables.dpad.right.tap_action ]]]"
          double_tap_action: "[[[ return variables.dpad.right.double_tap_action ]]]"
          hold_action: "[[[ return variables.dpad.right.hold_action ]]]"
      dpad_up_left_button:
        card:
          type: custom:cblcars-button-card
          entity: "[[[ return variables.dpad.up_left.entity; ]]]"
          template:
            - cb-lcars-base
          variables:
            ripple_color: "[[[ return variables.dpad.button.color.ripple; ]]]"
            card:
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
              color:
                background:
                  default: "[[[ return variables.dpad.up_left.color.overlay.default ]]]"
                  active: "[[[ return variables.dpad.up_left.color.overlay.active ]]]"
                  inactive: "[[[ return variables.dpad.up_left.color.overlay.inactive ]]]"
              border:
                top:
                  left_radius: >
                    [[[ return "calc(" +
                    variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
          label: "[[[ return variables.dpad.up_left.label ]]]"
          show_name: "[[[ return variables.dpad.up_left.show_name ]]]"
          show_label: "[[[ return variables.dpad.up_left.show_label]]]"
          show_state: "[[[ return variables.dpad.up_left.show_state ]]]"
          tap_action: "[[[ return variables.dpad.up_left.tap_action ]]]"
          double_tap_action: "[[[ return variables.dpad.up_left.double_tap_action ]]]"
          hold_action: "[[[ return variables.dpad.up_left.hold_action ]]]"
      dpad_up_right_button:
        card:
          type: custom:cblcars-button-card
          entity: "[[[ return variables.dpad.up_right.entity; ]]]"
          template:
            - cb-lcars-base
          variables:
            ripple_color: "[[[ return variables.dpad.button.color.ripple; ]]]"
            card:
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
              color:
                background:
                  default: "[[[ return variables.dpad.up_right.color.overlay.default ]]]"
                  active: "[[[ return variables.dpad.up_right.color.overlay.active ]]]"
                  inactive: "[[[ return variables.dpad.up_right.color.overlay.inactive ]]]"
              border:
                top:
                  right_radius: >
                    [[[ return "calc(" +
                    variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
          label: "[[[ return variables.dpad.up_right.label ]]]"
          show_name: "[[[ return variables.dpad.up_right.show_name ]]]"
          show_label: "[[[ return variables.dpad.up_right.show_label]]]"
          show_state: "[[[ return variables.dpad.up_right.show_state ]]]"
          tap_action: "[[[ return variables.dpad.up_right.tap_action ]]]"
          double_tap_action: "[[[ return variables.dpad.up_right.double_tap_action ]]]"
          hold_action: "[[[ return variables.dpad.up_right.hold_action ]]]"
      dpad_down_left_button:
        card:
          type: custom:cblcars-button-card
          entity: "[[[ return variables.dpad.down_left.entity; ]]]"
          template:
            - cb-lcars-base
          variables:
            ripple_color: "[[[ return variables.dpad.button.color.ripple; ]]]"
            card:
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
              color:
                background:
                  default: "[[[ return variables.dpad.down_left.color.overlay.default ]]]"
                  active: "[[[ return variables.dpad.down_left.color.overlay.active ]]]"
                  inactive: "[[[ return variables.dpad.down_left.color.overlay.inactive ]]]"
              border:
                bottom:
                  left_radius: >
                    [[[ return "calc(" +
                    variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
          label: "[[[ return variables.dpad.down_left.label ]]]"
          show_name: "[[[ return variables.dpad.down_left.show_name ]]]"
          show_label: "[[[ return variables.dpad.down_left.show_label]]]"
          show_state: "[[[ return variables.dpad.down_left.show_state ]]]"
          tap_action: "[[[ return variables.dpad.down_left.tap_action ]]]"
          double_tap_action: "[[[ return variables.dpad.down_left.double_tap_action ]]]"
          hold_action: "[[[ return variables.dpad.down_left.hold_action ]]]"
      dpad_down_right_button:
        card:
          type: custom:cblcars-button-card
          entity: "[[[ return variables.dpad.down_right.entity; ]]]"
          template:
            - cb-lcars-base
          variables:
            ripple_color: "[[[ return variables.dpad.button.color.ripple; ]]]"
            card:
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
              color:
                background:
                  default: "[[[ return variables.dpad.down_right.color.overlay.default ]]]"
                  active: "[[[ return variables.dpad.down_right.color.overlay.active ]]]"
                  inactive: "[[[ return variables.dpad.down_right.color.overlay.inactive ]]]"
              border:
                bottom:
                  right_radius: >
                    [[[ return "calc(" +
                    variables.__get_num_with_unit(variables.dpad.size) + " / 2)";]]]
          label: "[[[ return variables.dpad.down_right.label ]]]"
          show_name: "[[[ return variables.dpad.down_right.show_name ]]]"
          show_label: "[[[ return variables.dpad.down_right.show_label]]]"
          show_state: "[[[ return variables.dpad.down_right.show_state ]]]"
          tap_action: "[[[ return variables.dpad.down_right.tap_action ]]]"
          double_tap_action: "[[[ return variables.dpad.down_right.double_tap_action ]]]"
          hold_action: "[[[ return variables.dpad.down_right.hold_action ]]]"
  cb-lcars-animation-geo-array:
    template:
      - cb-lcars-functions
    variables:
      enable_resize_observer: true
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
      animation:
        geo_array:
          animation_axis: row
          grid:
            num_cols: null
            gap: 8
            num_rows: null
          color:
            base: var(--picard-dark-blue)
            animation_start: var(--picard-blue)
            animation_end: transparent
            animation_end2: var(--picard-moonlight)
          shape:
            type: square
            size: 12
    styles:
      label:
        - z-index: 2
      custom_fields:
        animation:
          - display: flex
          - position: absolute
          - align-items: center
    custom_fields:
      animation: |
        [[[
          const patternDefault = [
              { duration: 3, delay: 0.1 },
              { duration: 3, delay: 0.2 },
              { duration: 4, delay: 0.3 },
              { duration: 4, delay: 0.4 },
              { duration: 4, delay: 0.5 },
              { duration: 2, delay: 0.6 },
              { duration: 2, delay: 0.7 },
              { duration: 2, delay: 0.8 }
            ];
            const patternNiagara = [
              { duration: 2, delay: 0.1 },
              { duration: 2, delay: 0.2 },
              { duration: 2, delay: 0.3 },
              { duration: 2, delay: 0.4 },
              { duration: 2, delay: 0.5 },
              { duration: 2, delay: 0.6 },
              { duration: 2, delay: 0.7 },
              { duration: 2, delay: 0.8 }
            ];
            const patternFrozen = [
              { duration: 3, delay: 0.1 },
              { duration: 3, delay: 0.2 },
              { duration: 4, delay: 0.3 },
              { duration: 4, delay: 0.4 },
              { duration: 4, delay: 0.5 },
              { duration: 2, delay: 0.6 },
              { duration: 2, delay: 0.7 },
              { duration: 2, delay: 0.8 }
            ];
            const customPatternInput = variables.animation.geo_array.custom_pattern;
            let customPattern;
            if (typeof customPatternInput === 'string') {
              try {
              customPattern = JSON.parse(customPatternInput);
              } catch (e) {
              variables.__cblcarsLog('error','Failed to parse custom_pattern as JSON:', e);
              customPattern = patternDefault;
              }
            } else if (Array.isArray(customPatternInput)) {
              customPattern = customPatternInput;
            } else {
              customPattern = patternDefault;
            }
            const patternName = variables.animation.geo_array.pattern || 'patternDefault';
            const patternMap = {
              default: patternDefault,
              niagara: patternNiagara,
              frozen: patternFrozen,
              custom: customPattern
            };
            const animationSettings = patternMap[patternName] || patternDefault;
            const card_height = variables.animation.height !== undefined ? parseInt(variables.animation.height) : (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
            const card_width = variables.animation.width !== undefined ? parseInt(variables.animation.width) : (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
            const align_items = variables.animation.geo_array.align_items || 'center';
            const justify_content = variables.animation.geo_array.justify_content || 'center';
            const shape_size = variables.animation.geo_array.shape.size || 12;
            const shape_type = variables.animation.geo_array.shape.type || 'square';
            const base_color = variables.animation.geo_array.color.base || '#000';
            const animation_start_color = variables.animation.geo_array.color.animation_start || '#26f';
            const animation_end_color = variables.animation.geo_array.color.animation_end || '#def';
            const row_height = variables.__get_num_with_unit(variables.animation.geo_array.grid.row_height) || `${shape_size}px`;
            const column_width = variables.__get_num_with_unit(variables.animation.geo_array.grid.column_width) || `${shape_size}px`;
            const grid_gap = variables.__get_num_with_unit(variables.animation.geo_array.grid.gap) || '8px';
            const animation_axis = variables.animation.geo_array.animation_axis || 'row'; // Get animation_axis, default to 'row'
            const isRowAnimation = animation_axis === 'row'; // Boolean to check if it's row animation
            const auto_num_cols = variables.__calculate_grid_cells((parseInt(card_width) - parseInt(grid_gap)),column_width,grid_gap,12);
            const auto_num_rows = variables.__calculate_grid_cells((parseInt(card_height) - parseInt(grid_gap)),row_height,grid_gap,8);
            const num_rows = variables.animation.geo_array.grid.num_rows || auto_num_rows;
            const num_cols = variables.animation.geo_array.grid.num_cols || auto_num_cols;
            const isFrozen = patternName === 'frozen';
            const animationIterationCount = isFrozen ? '1' : 'infinite';
            const animationFillMode = isFrozen ? 'forwards' : 'forwards';
            const keyframesName = isFrozen ? 'colorchange-frozen' : 'colorchange';
            function getShapeSVG(color) {
              switch (shape_type) {
                case 'circle':
                  return `<circle cx="${shape_size / 2}" cy="${shape_size / 2}" r="${shape_size / 2}" fill="${color}" />`;
                case 'triangle':
                  return `<polygon points="${shape_size / 2},0 ${shape_size},${shape_size} 0,${shape_size}" fill="${color}" />`;
                case 'diamond':
                  return `<polygon points="${shape_size / 2},0 ${shape_size},${shape_size / 2} ${shape_size / 2},${shape_size} 0,${shape_size / 2}" fill="${color}" />`;
                case 'star':
                  // 5-pointed star
                  const c = shape_size / 2, r = c, r2 = r * 0.5;
                  let star = '';
                  for (let i = 0; i < 5; i++) {
                    let angle = (18 + i * 72) * Math.PI / 180;
                    let x = c + r * Math.cos(angle);
                    let y = c - r * Math.sin(angle);
                    star += `${x},${y} `;
                    angle += 36 * Math.PI / 180;
                    x = c + r2 * Math.cos(angle);
                    y = c - r2 * Math.sin(angle);
                    star += `${x},${y} `;
                  }
                  return `<polygon points="${star.trim()}" fill="${color}" />`;
                case 'pentagon':
                  let pent = '';
                  for (let i = 0; i < 5; i++) {
                    let angle = (54 + i * 72) * Math.PI / 180;
                    let x = shape_size / 2 + (shape_size / 2) * Math.cos(angle);
                    let y = shape_size / 2 - (shape_size / 2) * Math.sin(angle);
                    pent += `${x},${y} `;
                  }
                  return `<polygon points="${pent.trim()}" fill="${color}" />`;
                case 'hexagon':
                  // Centered regular hexagon, fits inside the square
                  const cx = shape_size / 2;
                  const cy = shape_size / 2;
                  const r_hex = shape_size / 2 * 0.95; // 0.95 to add a small margin
                  let hex = '';
                  for (let i = 0; i < 6; i++) {
                    let angle = Math.PI / 6 + i * Math.PI / 3; // Start at 30deg
                    let x = cx + r_hex * Math.cos(angle);
                    let y = cy + r_hex * Math.sin(angle);
                    hex += `${x},${y} `;
                  }
                  return `<polygon points="${hex.trim()}" fill="${color}" />`;
                case 'octagon':
                  let oct = '';
                  for (let i = 0; i < 8; i++) {
                    let angle = (22.5 + i * 45) * Math.PI / 180;
                    let x = shape_size / 2 + (shape_size / 2) * Math.cos(angle);
                    let y = shape_size / 2 - (shape_size / 2) * Math.sin(angle);
                    oct += `${x},${y} `;
                  }
                  return `<polygon points="${oct.trim()}" fill="${color}" />`;
                case 'ellipse':
                  return `<ellipse cx="${shape_size / 2}" cy="${shape_size / 2}" rx="${shape_size / 2}" ry="${shape_size / 3}" fill="${color}" />`;
                case 'cross':
                  const t = shape_size / 3;
                  return `<rect x="${t}" y="0" width="${t}" height="${shape_size}" fill="${color}" />
                          <rect x="0" y="${t}" width="${shape_size}" height="${t}" fill="${color}" />`;
                case 'square':
                default:
                  return `<rect width="${shape_size}" height="${shape_size}" fill="${color}" />`;
              }
            }
            function getShapeSVGOrig(color) {
              if (shape_type === 'circle') {
              return `<circle cx="${shape_size / 2}" cy="${shape_size / 2}" r="${shape_size / 2}" fill="${color}" />`;
              } else {
              return `<rect width="${shape_size}" height="${shape_size}" fill="${color}" />`;
              }
            }
            let rows = '';
            let keyframes = '';
            let animationCSSRule = ''; // Initialize animationCSSRule
            if (isRowAnimation) { // ROW ANIMATION LOGIC
                for (let i = 1; i <= num_rows; i++) {
                  const { duration, delay } = animationSettings[(i - 1) % animationSettings.length];
                  const randomColor = [animation_start_color, animation_end_color, base_color][Math.floor(Math.random() * 3)];
                  const animationName = isFrozen ? `colorchange-frozen-${i}` : 'colorchange'; // Determine keyframe name
                  if (isFrozen) { // Generate frozen keyframes - only if frozen pattern is selected
                    keyframes += `
                      @keyframes colorchange-frozen-${i} {
                      0% {fill: ${animation_start_color}}
                      25% {fill: ${animation_start_color}}
                      50% {fill: ${animation_start_color}}
                      75% {fill: ${animation_start_color}}
                      80% {fill: ${base_color}}
                      90% {fill: ${base_color}}
                      100% {fill: ${randomColor}}
                      }
                    `;
                  }
                  animationCSSRule += `
                  svg.cell.row-anim-${i} > * {
                    animation-name: ${animationName};
                    animation-duration: ${duration}s;
                    animation-delay: ${delay}s;
                    animation-iteration-count: ${animationIterationCount};
                    animation-fill-mode: ${animationFillMode};
                  }
                  `;
                  rows += `
                  <div class="row-${i} row">
                    ${Array.from({ length: num_cols }, (_, j) => `
                    <svg class="cell dc${j + 1} row-anim-${i}" width="${shape_size}" height="${shape_size}">
                      ${getShapeSVG(randomColor)}
                    </svg>
                    `).join('')}
                  </div>
                  `;
                }
              } else { // COLUMN ANIMATION LOGIC (animation_axis === 'column')
                let cols = ''; // Use 'cols' instead of 'rows' for column-based structure
                for (let j = 1; j <= num_cols; j++) { // Loop through columns
                  const { duration, delay } = animationSettings[(j - 1) % animationSettings.length]; // Re-use animationSettings, but index by column
                  const randomColor = [animation_start_color, animation_end_color, base_color][Math.floor(Math.random() * 3)];
                  const animationName = isFrozen ? `colorchange-frozen-col-${j}` : 'colorchange'; // Unique keyframe name for columns
                  if (isFrozen) { // Generate frozen keyframes for columns
                    keyframes += `
                      @keyframes colorchange-frozen-col-${j} {
                      0% {fill: ${animation_start_color}}
                      25% {fill: ${animation_start_color}}
                      50% {fill: ${animation_start_color}}
                      75% {fill: ${animation_start_color}}
                      80% {fill: ${base_color}}
                      90% {fill: ${base_color}}
                      100% {fill: ${randomColor}}
                      }
                    `;
                  }
                  animationCSSRule += `
                  svg.cell.col-anim-${j} > * {
                    animation-name: ${animationName};
                    animation-duration: ${duration}s;
                    animation-delay: ${delay}s;
                    animation-iteration-count: ${animationIterationCount};
                    animation-fill-mode: ${animationFillMode};
                  }
                  `;
                  cols += `
                  <div class="col-${j} col">
                    ${Array.from({ length: num_rows }, (_, i) => `
                    <svg class="cell row-${i + 1} col-anim-${j} dc${j}" width="${shape_size}" height="${shape_size}">  /* ADD col-anim-${j} CLASS */
                      ${getShapeSVG(randomColor)}
                    </svg>
                    `).join('')}
                  </div>
                  `;
                }
                rows = cols; // For column animation, effectively 'rows' becomes 'columns' in output structure
              }
              const defaultKeyframes = `
                @keyframes colorchange {
                0% {fill: ${animation_start_color}}
                25% {fill: ${animation_start_color}}
                50% {fill: ${animation_start_color}}
                75% {fill: ${animation_start_color}}
                80% {fill: ${base_color}}
                90% {fill: ${base_color}}
                100% {fill: ${animation_end_color}}
                }
              `;
              const customKeyframes = variables.animation.geo_array.custom_keyframes || defaultKeyframes;
                  let styleContent = `
                  ${customKeyframes}
                  ${isFrozen ? keyframes : ''}
                  ${animationCSSRule}
                  .geo-array-wrapper {
                  flex: 1;
                  padding-right: 1px;
                  display: flex;
                  flex-grow: 1;
                  width: ${card_width};
                  height: ${card_height};
                  align-items: ${align_items};
                  justify-content: ${justify_content};
                  }
                  .geo-array {
                  line-height: 1;
                  display: flex; /* Make .geo-array a flex container for columns */
                  flex-direction: ${isRowAnimation ? 'column' : 'row'}; /* Column direction for rows, row direction for columns */
                  }
                  ${isRowAnimation ?
                    Array.from({ length: num_rows }, (_, i) => `
                    .row-${i + 1} {
                      display: grid;
                      grid-template-columns: repeat(${num_cols}, ${column_width});
                      gap: ${grid_gap};
                      margin-bottom: ${grid_gap}; /* Add spacing between rows */
                      height: ${row_height}
                    }
                    `).join('')
                  :
                    Array.from({ length: num_cols }, (_, j) => `  /* COLUMN LAYOUT CSS */
                    .col-${j + 1} {
                      display: flex; /* Use flexbox for columns */
                      flex-direction: column; /* Stack items vertically in columns */
                      gap: ${grid_gap};
                      margin-right: ${grid_gap}; /* Spacing between columns */
                      width: ${column_width};
                      align-items: center; /* Center items horizontally in columns */
                    }
                    `).join('')
                  }
                  .geo-array .row:last-child {
                    margin-bottom: 0; /* Remove margin-bottom from the last row */
                  }
                  .geo-array .col:last-child {
                    margin-right: 0; /* Remove margin-right from the last column */
                  }
                  .cell {
                  text-align: right;
                  }
                `;
              return `
                <elt>
                <style>
                  ${styleContent.trim().replace(/\n\s*\n/g, '\n')}
                </style>
                <div class="geo-array-wrapper">
                  <div class="geo-array" id="default">
                  ${rows}
                  </div>
                </div>
                </elt>
              `;
          ]]]
