cblcars:
  version: 2025.01.2-alpha.3
  manage_config: true
cblcars_card_templates:
  cb-lcars-button-capped:
    template: cb-lcars-button-lozenge
    variables:
      card:
        border:
          top:
            right_radius: 0px
          bottom:
            right_radius: 0px
  cb-lcars-button-capped-right:
    template: cb-lcars-button-lozenge-right
    variables:
      card:
        border:
          top:
            left_radius: 0px
          bottom:
            left_radius: 0px
  cb-lcars-button-lozenge:
    template: cb-lcars-button-base
    variables:
      card:
        border:
          top:
            left_radius: null
            right_radius: null
          bottom:
            left_radius: null
            right_radius: null
  cb-lcars-button-lozenge-right:
    template: cb-lcars-button-lozenge
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        justify: right
        border:
          left:
            size: 6px
            color: black
            padding: 1.0%
            margin: 0
          right:
            size: 6px
            color: transparent
            padding: 1.0%
            margin: null
  cb-lcars-card-base:
    template:
      - cb-lcars-functions
      - cb-lcars-actions-disable
    show_icon: false
    show_label: false
    show_name: false
    show_state: false
    styles:
      card:
        - background-color: |
            [[[
              if (states['input_boolean.lcars_ui_debug'] && states['input_boolean.lcars_ui_debug'].state === 'on') {
                return variables.__get_random_css_color();
              } else {
                return 'transparent';
              }
            ]]]
  cb-lcars-functions:
    variables:
      ___debug: false
      ___debug_hass: false
      ___debug_extras: null
      __cblcarsLog: |
        [[[
          return function styledLog(level, message) {
            let styles = [
                'color: white',
                'padding: 2px 4px',
                'border-radius: 15px'
            ];
            switch (level) {
                case 'info':
                    styles.push('background-color: #37a6d1'); // Blue
                    console.log(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
                case 'warn':
                    styles.push('background-color: #ff6753'); // Orange
                    console.warn(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
                case 'error':
                    styles.push('background-color: #ef1d10'); // Red
                    console.error(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
                case 'debug':
                    if(variables.___debug == true) {
                      styles.push('background-color: #8e44ad'); // Purple
                      console.debug(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    }
                    break;
                default:
                    styles.push('background-color: #6d748c'); // Gray for unknown levels
                    console.log(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
              }
          }
        ]]]
      __getParentDimension: |
        [[[
          return function(thisObj, dimension, units, fallbackDimensions) {
            // Function to get the CSS variable value
            function getCSSVariableValue(variable) {
              return getComputedStyle(thisObj).getPropertyValue(variable).trim();
            }
            // Determine the CSS variable based on the dimension
            let cssVariable;
            if (dimension === 'width') {
              cssVariable = '--button-card-width';
            } else if (dimension === 'height') {
              cssVariable = '--button-card-height';
            } else {
              console.error("Invalid dimension specified. Use 'width' or 'height'.");
              return null;
            }
            // Try to get the value from the CSS variable
            let parentDimension = parseFloat(getCSSVariableValue(cssVariable));
            // If the CSS variable is not defined or not reasonable, fall back to parent element's dimension
            if (isNaN(parentDimension) || parentDimension <= 0) {
              if (dimension === 'width') {
                parentDimension = thisObj.parentElement ? thisObj.parentElement.offsetWidth : 0;
              } else if (dimension === 'height') {
                parentDimension = thisObj.parentElement ? thisObj.parentElement.offsetHeight : 0;
              }
            }
            // Function to check if the dimension is reasonable
            function isReasonableSize(size) {
              return size > 0; // Adjust this condition based on what's 'reasonable'
            }
            // If dimension is not reasonable, use fallback
            if (!isReasonableSize(parentDimension)) {
              if (fallbackDimensions && fallbackDimensions[dimension]) {
                parentDimension = parseFloat(fallbackDimensions[dimension]);
              } else {
                parentDimension = dimension === 'width' ? window.innerWidth : window.innerHeight;
              }
            }
            // Return the dimension with units if provided
            if (units) {
              return parentDimension + units;
            } else {
              return parentDimension;
            }
          }
        ]]]
      __calculcate_grid_cell_dimension: |
        [[[
          return function calculcate_grid_cell_dimension(cardDimension, gridCells, gridGap, defaultButtonCardDimension) {
            let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
            let grid_cells = gridCells ? parseInt(gridCells) : 0;
            let grid_gap = gridGap ? parseInt(gridGap) : 0;
            //console.debug("... card_dimension: " + card_dimension);
            //console.debug("... grid_cells: " + grid_cells);
            //console.debug("... grid_gap: " + grid_gap);
            // If card_dimension is not defined or is 0, return defaultButtonCardDimension (default or user overrides this)
            if (card_dimension === 0) {
              //console.debug("...returning defaultButtonCardDimension: " + defaultButtonCardDimension);
              return defaultButtonCardDimension;
            }
            // Calculate the button card dimension that would fit the given number of grid cells
            //let button_card_dimension = Math.floor((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);
            let button_card_dimension = ((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);
            //console.debug("...button_card_dimension calulated: " + button_card_dimension);
            return (button_card_dimension +"px");
          }
        ]]]
      __calculate_grid_cells: |
        [[[
            return function calculate_grid_cells(cardDimension, buttonCardDimension, gridGap, defaultGridCells) {
            let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
            let button_card_dimension = buttonCardDimension ? parseInt(buttonCardDimension) : 0;
            let grid_gap = gridGap ? parseInt(gridGap) : 0;
            //console.debug("... card_dimension: " + card_dimension);
            //console.debug("... grid_gap: " + grid_gap);
            //console.debug("... defaultGridCells: " + defaultGridCells);
            // If card_dimension is not defined or is 0, return defaultGridCells (default or user overrides this)
            if (card_dimension === 0) {
              //console.debug("...returning defaultGridCells!");
              return defaultGridCells;
            }
            // Calculate the number of grid cells that would fit
            let grid_dimension = Math.floor((card_dimension + grid_gap) / (button_card_dimension + grid_gap));
            //console.debug("...returing calc. grid_dimension: " + grid_dimension);
            return grid_dimension;
          }
        ]]]
      __deepMerge: |
        [[[
          return function deepMerge(object1, object2) {
            if (Array.isArray(object1) && Array.isArray(object2)) {
              return [...object1, ...object2];
            } else if (typeof object1 === 'object' && typeof object2 === 'object') {
              return Object.entries(object2).reduce((acc, [key, value]) => {
                if (Object.keys(acc).includes(key) && typeof value === 'object') {
                  acc = { ...acc, [key]: deepMerge(acc[key], value) };
                } else {
                  acc = { ...acc, [key]: value };
                }
                return acc;
              }, { ...object1 });
            } else {
              return object2;
            }
          }
        ]]]
      __get_num_with_unit: |
        [[[
          return function getSizeWithUnit(size, unit = 'px') {
            return isNaN(size) ? size : size + unit;
          }
        ]]]
      __get_random_entity: |
        [[[
            return function get_random_entity(domain) {
              const entityList = Object.keys(hass.states).filter(e => e.startsWith(domain + '.'));
              if (domain === 'light') {
                  // Filter entities that are powered on
                  const poweredOnLights = entityList.filter(e => hass.states[e].state === 'on');
                  if (poweredOnLights.length === 0) {
                      // If no lights are powered on, return a random light entity
                      return entityList[Math.floor(Math.random() * entityList.length)];
                  }
                  // Sort powered on lights by brightness in descending order
                  poweredOnLights.sort((a, b) => {
                      const brightnessA = hass.states[a].attributes.brightness || 0;
                      const brightnessB = hass.states[b].attributes.brightness || 0;
                      return brightnessB - brightnessA;
                  });
                  // Return the brightest powered on light
                  return poweredOnLights[0];
              }
              // For other domains, return a random entity
              return entityList[Math.floor(Math.random() * entityList.length)];
            }
        ]]]
      __get_random_css_color: |
        [[[
            return function get_random_css_color() {
              var letters = '0123456789ABCDEF';
              var color = '#';
              for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
              }
              return color;
            }
        ]]]
      __get_light_css_color_old: |
        [[[
          return function get_light_css_color(entity) {
            let css_color = 'var(--lcars-ui-secondary)';
            let lightEntity = states[entity];
            if (lightEntity && lightEntity.attributes.rgb_color) {
              const light_color = lightEntity.attributes.rgb_color;
              css_color = `rgb(${light_color.join(', ')})`;
            }
            return css_color;
          }
        ]]]
      __get_light_css_color: |
        [[[
          return function get_light_css_color(entity) {
            let css_color = 'var(--lcars-ui-secondary)';
            const buttonCardLightColor = getComputedStyle(document.documentElement).getPropertyValue('--button-card-light-color').trim();
            if (buttonCardLightColor.startsWith('rgb')) {
              return buttonCardLightColor;
            }
            let lightEntity = states[entity];
            if (lightEntity && lightEntity.attributes.rgb_color) {
              const light_color = lightEntity.attributes.rgb_color;
              css_color = `rgb(${light_color.join(', ')})`;
            }
            return css_color;
          }
        ]]]
      __hex_to_rgba: |
        [[[
          return function hex_to_rgba(input, alpha = 1) {
            // Ensure alpha is between 0 and 1, or convert if between 1 and 255
            if (alpha > 1 && alpha <= 255) {
              alpha = alpha / 255;
            } else if (alpha < 0 || alpha > 1) {
              alpha = 1;
            }
            if (input.startsWith('rgba')) {
              // If the input starts with 'rgb', return the input as is
              return input;
            }
            if (input.startsWith('rgb(')) {
              // If the input starts with 'rgb(', add the alpha channel and return
              return input.replace('rgb(', 'rgba(').replace(')', `, ${alpha})`);
            }
            let hex;
            if (input.startsWith('var(--')) {
                // If the input is a CSS variable in the format "var(--color)", extract the color variable
                hex = getComputedStyle(document.documentElement)
                    .getPropertyValue(input.slice(4, -1))
                    .trim();
            } else if (input.startsWith('--')) {
                // If the input is a CSS variable, get its value
                hex = getComputedStyle(document.documentElement)
                    .getPropertyValue(input)
                    .trim();
            } else {
                hex = input;
            }
            let r, g, b, a = alpha;
            if (hex.length === 9) { // #RRGGBBAA
                r = parseInt(hex.slice(1, 3), 16);
                g = parseInt(hex.slice(3, 5), 16);
                b = parseInt(hex.slice(5, 7), 16);
                a = parseInt(hex.slice(7, 9), 16) / 255;
            } else if (hex.length === 7) {  // #RRGGBB
                r = parseInt(hex.slice(1, 3), 16);
                g = parseInt(hex.slice(3, 5), 16);
                b = parseInt(hex.slice(5, 7), 16);
            } else if (hex.length === 4) {  // #RGB
                r = parseInt(hex[1] + hex[1], 16);
                g = parseInt(hex[2] + hex[2], 16);
                b = parseInt(hex[3] + hex[3], 16);
            } else {
                throw new Error(`Invalid HEX color: ${input}`);
            }
            return `rgba(${r}, ${g}, ${b}, ${a})`;
          }
        ]]]
      __extract_color_channel: |
        [[[
          return function extract_color_channel(color, channel) {
            // Convert the channel to lowercase
            channel = channel.toLowerCase();
            // Determine if the input is rgb or rgba
            let isRGBA = color.startsWith('rgba');
            // Split the color string into an array of numbers
            let numbers = color.slice(isRGBA ? 5 : 4, -1).split(',').map(Number);
            // Define the color channels
            let channels = {r: 0, g: 1, b: 2, a: 3};
            // Check if the specified channel exists
            if (channel in channels) {
              // If the input is rgb and the channel is 'a', return undefined
              if (!isRGBA && channel === 'a') {
                return undefined;
              }
              // Return the decimal value of the specified color channel
              return numbers[channels[channel]];
            } else {
              throw new Error('Invalid color channel. Please specify "r", "g", "b", or "a".');
            }
          }
        ]]]
      __interpolated_rgb: |
        [[[
          return function interpolated_rgb(start_rgb, end_rgb, step, total_steps) {
            let start_r = variables.__extract_color_channel(start_rgb, 'r');
            let start_g = variables.__extract_color_channel(start_rgb, 'g');
            let start_b = variables.__extract_color_channel(start_rgb, 'b');
            let end_r = variables.__extract_color_channel(end_rgb, 'r');
            let end_g = variables.__extract_color_channel(end_rgb, 'g');
            let end_b = variables.__extract_color_channel(end_rgb, 'b');
            let interpolated_r = Math.round(start_r + step * (end_r - start_r) / total_steps);
            let interpolated_g = Math.round(start_g + step * (end_g - start_g) / total_steps);
            let interpolated_b = Math.round(start_b + step * (end_b - start_b) / total_steps);
            //console.log("in function r="+interpolated_r + ",g=" +interpolated_g+ ",b=" + interpolated_b);
            return `rgb(${interpolated_r}, ${interpolated_g}, ${interpolated_b})`;
          }
        ]]]
    custom_fields:
      debugger: |
        [[[
          if (!variables.___debug) return
          const o = {
            variables: variables,
            entity: entity ? entity : {},
            bc: this
          }
          if (variables.___debug_hass) {
            o.hass = hass
          }
          if (variables.___debug_extras) {
            o.extras = variables.___debug_extras
          }
          variables.__cblcarsLog("debug", o)
        ]]]
    styles:
      custom_fields:
        debugger:
          - height: 0
          - width: 0
          - visibility: hidden
  cb-lcars-label-picard:
    template:
      - cb-lcars-label
    show_label: true
    variables:
      label: LCARS LABEL
      text:
        label:
          font_size: 52
          font_weight: 100
          color:
            default: var(--picard-yellow)
          justify: right
          padding:
            right: 15
            bottom: 8
      card:
        border:
          left:
            size: 60
          right:
            size: 40
          color: var(--picard-medium-dark-gray)
  cb-lcars-animation-pulsewave:
    variables:
      enable_resize_observer: true
      animation:
        pulsewave:
          color:
            line_color: black
            start_color: var(--lcars-ui-tertiary)
            end_color: black
          pattern: default
          line_height: 20
          line_width: 3
          line_width_even: 4
          line_angle: 15
          custom_keyframes: null
          custom_pattern: null
          line_heights: null
          scale_line_heights: true
          align_items: center
    styles:
      label:
        - z-index: 1
    custom_fields:
      animation: |
        [[[
          // Calculate card dimensions
          //const card_height = (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          //const card_width = (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          const card_height = variables.animation.height !== undefined ? parseInt(variables.animation.height) : (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          const card_width = variables.animation.width !== undefined ? parseInt(variables.animation.width) : (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          // Get line properties
          const line_height = (variables.animation.pulsewave.line_height !== undefined ) ? parseInt(variables.animation.pulsewave.line_height) : 20;
          const line_width = (variables.animation.pulsewave.line_width !== undefined ) ? parseInt(variables.animation.pulsewave.line_width) : 3;
          const line_width_even = (variables.animation.pulsewave.line_width_even !== undefined ) ? parseInt(variables.animation.pulsewave.line_width_even) : 4;
          const line_color = variables.animation.pulsewave.color.line_color || '#000';
          const animation_start_color = variables.animation.pulsewave.color.animation_start || 'var(--picard-blue)';
          const animation_end_color = variables.animation.pulsewave.color.animation_end || '#000';
          const line_angle = (variables.animation.pulsewave.line_angle !== undefined) ? variables.animation.pulsewave.line_angle : 17;
          let line_transform = variables.animation.pulsewave.line_transform || `rotate(${line_angle}deg)`;
          const align_items = variables.animation.pulsewave.align_items || 'center';
          const justify_content = variables.animation.pulsewave.justify_content || 'center';
          // Initialize keyframes
          let keyframes = '';
          const pattern_width = line_width + line_width_even;
          const num_lines = variables.animation.pulsewave.num_lines || Math.ceil(card_width / pattern_width) * 2;
          // Use custom keyframes if provided
          const customKeyframes = variables.animation.pulsewave.custom_keyframes;
          if (customKeyframes) {
            keyframes = customKeyframes;
          } else {
            // Use provided original heights if available
            const originalHeights = variables.animation.pulsewave.line_heights || [180, 120, 230, 60, 30];
            const scaleHeights = variables.animation.pulsewave.scale_line_heights ?? true;
            let newHeights;
            if (scaleHeights === false) {
              newHeights = originalHeights;
            } else {
              const maxOriginalHeight = Math.max(...originalHeights);
              const heightRatios = originalHeights.map(height => height / maxOriginalHeight);
              // Calculate new heights based on card_height
              newHeights = heightRatios.map(ratio => Math.round(ratio * card_height));
            }
            // Define keyframes based on new heights
            const animationSettingsDefault = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 0.6 }
            ];
            const animationSettingsSineWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 0.6 }
            ];
            const animationSettingsSquareWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 0.5, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 0.5, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 0.5, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 0.5, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 0.5, delay: 0.6 }
            ];
            const animationSettingsTriangleWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 0.6 }
            ];
            const animationSettingsSawtoothWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.3 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.5 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 0.6 }
            ];
            const animationSettingsRandomWave = [
              { keyframe: 'animateLine-1', height: newHeights[0], duration: 1, delay: 0.2 },
              { keyframe: 'animateLine-2', height: newHeights[1], duration: 1, delay: 0.4 },
              { keyframe: 'animateLine-3', height: newHeights[2], duration: 1, delay: 0.6 },
              { keyframe: 'animateLine-4', height: newHeights[3], duration: 1, delay: 0.8 },
              { keyframe: 'animateLine-5', height: newHeights[4], duration: 1, delay: 1 }
            ];
            const patternName = variables.animation.pulsewave.pattern || 'default';
            const animationSettingsMap = {
              default: animationSettingsDefault,
              sine: animationSettingsSineWave,
              square: animationSettingsSquareWave,
              triangle: animationSettingsTriangleWave,
              sawtooth: animationSettingsSawtoothWave,
              random: animationSettingsRandomWave,
              custom: animationSettingsDefault
            };
            const animationSettings = animationSettingsMap[patternName] || animationSettingsDefault;
            keyframes = '';
            animationSettings.forEach(({ keyframe, height }) => {
              if (patternName === 'sine') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    25% { height: ${height * 0.75}px; }
                    50% { height: ${height / 2}px; }
                    75% { height: ${height * 0.75}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else if (patternName === 'square') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    50% { height: ${height / 2}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else if (patternName === 'triangle') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    50% { height: ${height / 2}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else if (patternName === 'sawtooth') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    25% { height: ${height * 0.75}px; }
                    50% { height: ${height / 2}px; }
                    75% { height: ${height * 0.25}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else if (patternName === 'random') {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    50% { height: ${height / 2}px; }
                    100% { height: ${height}px; }
                  }
                `;
              } else {
                keyframes += `
                  @keyframes ${keyframe} {
                    0% { height: ${height}px; }
                    50% { height: ${height / 2}px; }
                    100% { height: ${height}px; }
                  }
                `;
              }
            });
          }
          let lines = '';
          for (let i = 1; i <= num_lines; i++) {
            lines += `<div class="line line-${i}"></div>`;
          }
          const patternDefault = [
            'animateLine-5 1s 0.2s infinite',
            'animateLine-4 1s 0.3s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-2 1s 0.5s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-3 1s 0.9s infinite',
            'animateLine-3 1s 1s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-2 1s 0.5s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-4 1s 0.3s infinite',
            'animateLine-5 1s 0.2s infinite',
            'animateLine-5 1s 0.2s infinite',
            'animateLine-4 1s 0.3s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-2 1s 0.5s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-3 1s 0.9s infinite',
            'animateLine-3 1s 1s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-2 1s 0.5s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-4 1s 0.3s infinite',
            'animateLine-5 1s 0.2s infinite'
          ];
          const patternNiagara = [
            'animateLine-5 1s 0.1s infinite',
            'animateLine-4 1s 0.2s infinite',
            'animateLine-2 1s 0.3s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-1 1s 0.5s infinite',
            'animateLine-1 1s 0.6s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-3 1s 0.8s infinite',
            'animateLine-3 1s 0.9s infinite',
            'animateLine-1 1s 1s infinite',
            'animateLine-1 1s 1.1s infinite',
            'animateLine-1 1s 1.2s infinite',
            'animateLine-2 1s 1.3s infinite',
            'animateLine-2 1s 1.4s infinite',
            'animateLine-4 1s 1.5s infinite',
            'animateLine-5 1s 1.6s infinite'
          ];
          const patternSineWave = [
            'animateLine-1 1s 0.2s infinite',
            'animateLine-2 1s 0.3s infinite',
            'animateLine-3 1s 0.4s infinite',
            'animateLine-4 1s 0.5s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-4 1s 0.7s infinite',
            'animateLine-3 1s 0.8s infinite',
            'animateLine-2 1s 0.9s infinite',
            'animateLine-1 1s 1s infinite'
          ];
          const patternSquareWave = [
            'animateLine-5 1s 0.2s infinite',
            'animateLine-5 1s 0.2s infinite',
            'animateLine-1 1s 0.4s infinite',
            'animateLine-1 1s 0.4s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-1 1s 0.8s infinite'
          ];
          const patternTriangleWave = [
            'animateLine-1 1s 0.2s infinite',
            'animateLine-2 1s 0.3s infinite',
            'animateLine-3 1s 0.4s infinite',
            'animateLine-4 1s 0.5s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-4 1s 0.7s infinite',
            'animateLine-3 1s 0.8s infinite',
            'animateLine-2 1s 0.9s infinite',
            'animateLine-1 1s 1s infinite'
          ];
          const patternSawtoothWave = [
            'animateLine-1 1s 0.2s infinite',
            'animateLine-2 1s 0.3s infinite',
            'animateLine-3 1s 0.4s infinite',
            'animateLine-4 1s 0.5s infinite',
            'animateLine-5 1s 0.6s infinite',
            'animateLine-1 1s 0.7s infinite',
            'animateLine-2 1s 0.8s infinite',
            'animateLine-3 1s 0.9s infinite',
            'animateLine-4 1s 1s infinite'
          ];
          const patternRandomWave = [
            'animateLine-5 1s 0.2s infinite',
            'animateLine-2 1s 0.4s infinite',
            'animateLine-4 1s 0.6s infinite',
            'animateLine-1 1s 0.8s infinite',
            'animateLine-3 1s 1s infinite',
            'animateLine-2 1s 0.7s infinite',
            'animateLine-5 1s 0.5s infinite',
            'animateLine-1 1s 0.3s infinite',
            'animateLine-4 1s 0.1s infinite'
          ];
          // Determine the pattern to use
          const patternName = variables.animation.pulsewave.pattern || 'default';
          const patternMap = {
            default: patternDefault,
            niagara: patternNiagara,
            sine: patternSineWave,
            square: patternSquareWave,
            triangle: patternTriangleWave,
            sawtooth: patternSawtoothWave,
            random: patternRandomWave,
            custom: variables.animation.pulsewave.custom_pattern ? JSON.parse(variables.animation.pulsewave.custom_pattern) : patternDefault
          };
          const nthChildAnimations = patternMap[patternName] || patternDefault;
          return `
            <elt>
              <style>
                .wrapper {
                  flex: 1;
                  display: flex;
                  flex-grow: 1;
                  align-items: ${align_items};
                  justify-content: ${justify_content};
                  height: ${card_height}px;
                  width: ${card_width}px;
                }
                .line {
                  height: ${line_height}px;
                  width: ${line_width}px;
                  background: linear-gradient( ${line_color}, ${animation_start_color}, ${line_color}, ${animation_end_color});
                  transform: ${line_transform};
                }
                .line:nth-child(even) {
                  width: ${line_width_even}px;
                }
                ${keyframes}
                ${Array.from({ length: num_lines }, (_, i) => `
                  .line:nth-child(${i + 1}) { animation: ${nthChildAnimations[i % nthChildAnimations.length]}; }
                `).join('')}
              </style>
              <div class="wrapper">
                ${lines}
              </div>
            </elt>
          `;
        ]]]
  cb-lcars-theme:
    template:
        - cb-lcars-functions
        - cb-lcars-defs
    triggers_update:
      - '[[[ return variables.___helpers.alert_condition ]]]'
    custom_fields:
      colors: |
        [[[
          const themes = variables.__defs.themes;
          let alertCondition = 'green'; // Default to 'green'
          if (variables.___helpers && variables.___helpers.alert_condition) {
            const entityState = states[variables.___helpers.alert_condition];
            if (entityState) {
              alertCondition = entityState.state.toLowerCase();
            } else {
              variables.__cblcarsLog('error', `Entity ${variables.___helpers.alert_condition} does not exist - defaulting to condition ${alertCondition}!`);
            }
          }
          const selectedTheme = themes[`${alertCondition}_alert`];
          //console.debug(variables.__defs.debug_title,'Setting alert condition ${alertCondition}'); 
          variables.__cblcarsLog('info',`Setting alert condition ${alertCondition}`);
          const colors = selectedTheme.colors;
          for (const [colorGroup, colorValues] of Object.entries(colors)) {
            for (const [colorName, colorValue] of Object.entries(colorValues)) {
              const cssVarName = `--${colorName}`;
              //if (getComputedStyle(document.documentElement).getPropertyValue(cssVarName).trim()) {
                //console.debug(variables.__defs.debug_title,`Setting ${cssVarName}=${colorValue}`);
                variables.__cblcarsLog('debug',`Setting ${cssVarName}=${colorValue}`);
                document.documentElement.style.setProperty(cssVarName, colorValue);
              //}
            }
          }
        ]]]
      font: |
        [[[
          variables.__cblcarsLog('debug', `Adding link to font from: ${variables.__defs.font_url}`);
          const existingLink = document.querySelector(`link[href="${variables.__defs.font_url}"]`);
          if (!existingLink) {
            const link = document.createElement('link'); 
            link.href = variables.__defs.font_url; 
            link.rel = 'stylesheet'; 
            document.head.appendChild(link);
            variables.__cblcarsLog('debug', `Added link to font from: ${variables.__defs.font_url}`);
          } else {
            variables.__cblcarsLog('debug', `Font link already exists: ${variables.__defs.font_url}`);
          } 
        ]]]
    styles:
      custom_fields:
        colors:
          - height: 0
          - width: 0
          - visibility: hidden
        font:
          - height: 0
          - width: 0
          - visibility: hidden 
  cb-lcars-header-picard-base:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
    show_label: false
    variables:
      card:
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
            zero: transparent
            non_zero: transparent
            hvac_heat: transparent
            hvac_cool: transparent
            unavailable: transparent
      text:
        label:
          justify: flex-start
          align_items: flex-start
          padding:
            top: |
              [[[
                return "calc("+variables.__get_num_with_unit(variables.lcars.border.top.size+15)+")";
              ]]]
            left: |
              [[[
                return "calc("+variables.__get_num_with_unit(variables.lcars.border.left.size+15)+")";
              ]]]
            bottom: |
              [[[
                return "calc("+variables.__get_num_with_unit(variables.lcars.border.bottom.size+15)+")";
              ]]]
            right: |
              [[[
                return "calc("+variables.__get_num_with_unit(variables.lcars.border.right.size+15)+")";
              ]]]
  cb-lcars-header-picard:
    template:
      - cb-lcars-header-picard-base
    variables:
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
        border:
          top:
            left_radius: var(--ha-card-border-radius)
            right_radius: 0px !important
          bottom:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: " "
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 20
          left:
            size: 180
          bottom:
            size: 0
          right:
            size: 0
      lcars_outer:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
      lcars_inner:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              left_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.top.left_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: "[[[ return variables.__get_num_with_unit(variables.card.height); ]]]"
        - width: "[[[ return variables.__get_num_with_unit(variables.card.width); ]]]"
        - border: 0
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - top: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - left: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-header
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_outer.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                top:
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.top.left_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size);
                    ]]]
                  right_radius: 0px
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size);
                    ]]]
                inner:
                  factor: "[[[ return variables.card.border.inner.factor; ]]]"
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
      lcars_inner:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-header
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_inner.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.left.size);
                    ]]]
                top:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.size);
                    ]]]
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.left_radius);
                    ]]]
                  right_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-header-picard-right:
    template:
      - cb-lcars-header-picard-base
    variables:
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
        border:
          top:
            left_radius: 0px !important
            right_radius: var(--ha-card-border-radius)
          bottom:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: " "
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 20
          left:
            size: 0
          bottom:
            size: 0
          right:
            size: 180
      lcars_outer:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
      lcars_inner:
        card:
          border:
            right:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              right_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.top.right_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: "[[[ return variables.__get_num_with_unit(variables.card.height); ]]]"
        - width: "[[[ return variables.__get_num_with_unit(variables.card.width); ]]]"
        - border: 0
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - right: 0
        lcars_inner:
          - position: absolute
          - top: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - right: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-header-right
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_outer.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                top:
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.top.right_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size);
                    ]]]
                  left_radius: 0px
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size);
                    ]]]
                inner:
                  factor: "[[[ return variables.card.border.inner.factor; ]]]"
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
      lcars_inner:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-header-right
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_inner.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.right.size);
                    ]]]
                top:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.size);
                    ]]]
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.right_radius);
                    ]]]
                  left_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-defs:
    template:
        - cb-lcars-functions
    variables:
      ___helpers:
        alert_condition: input_select.lcars_ui_alert_condition
        lcars_ui_debug: input_boolean.lcars_ui_debug
        ha_lcars:
          lcars_sound: input_boolean.lcars_sound
          lcars_texture: input_boolean.lcars_texture
      __defs:
        font_url: >-
          https://fonts.googleapis.com/css2?family=Antonio:wght@100..700&display=swap
        themes:
          green_alert:
            colors:
              oranges:
                picard-darkest-orange: '#d91604'
                picard-dark-orange: '#ef1d10'
                picard-medium-dark-orange: '#e7442a'
                picard-orange: '#ff6753'
                picard-medium-light-orange: '#ff8470'
                picard-light-orange: '#ff977b'
                picard-lightest-orange: '#ffb399'
              grays:
                picard-darkest-gray: '#1e2229'
                picard-dark-gray: '#2f3749'
                picard-medium-dark-gray: '#52596e'
                picard-gray: '#6d748c'
                picard-medium-light-gray: '#9ea5ba'
                picard-light-gray: '#d2d5df'
                picard-lightest-gray: '#f3f4f7'
                picard-moonlight: '#dfe1e8'
              blues:
                picard-darkest-blue: '#002241'
                picard-dark-blue: '#1c3c55'
                picard-medium-dark-blue: '#2a7193'
                picard-blue: '#37a6d1'
                picard-medium-light-blue: '#67caf0'
                picard-light-blue: '#93e1ff'
                picard-lightest-blue: '#00eeee'
              greens:
                picard-darkest-green: '#0c2a15'
                picard-dark-green: '#083717'
                picard-medium-dark-green: '#095320'
                picard-green: '#266239'
                picard-medium-light-green: '#458359'
                picard-light-green: '#80bb93'
                picard-lightest-green: '#b8e0c1'
              yellows:
                picard-darkest-yellow: '#70602c'
                picard-dark-yellow: '#ac943b'
                picard-medium-dark-yellow: '#d2bf50'
                picard-yellow: '#f9ef97'
                picard-medium-light-yellow: '#fffac9'
                picard-light-yellow: '#e7e6de'
                picard-lightest-yellow: '#f5f5dc'
          red_alert:
            colors:
              oranges:
                picard-darkest-orange: '#8b0000'
                picard-dark-orange: '#a52a2a'
                picard-medium-dark-orange: '#b22222'
                picard-orange: '#dc143c'
                picard-medium-light-orange: '#ff0000'
                picard-light-orange: '#ff4500'
                picard-lightest-orange: '#ff6347'
              grays:
                picard-darkest-gray: '#8b0000'
                picard-dark-gray: '#a52a2a'
                picard-medium-dark-gray: '#b22222'
                picard-gray: '#dc143c'
                picard-medium-light-gray: '#ff0000'
                picard-light-gray: '#ff4500'
                picard-lightest-gray: '#ff7f50'
              blues:
                picard-darkest-blue: '#cd5c5c'
                picard-dark-blue: '#f08080'
                picard-medium-dark-blue: '#e9967a'
                picard-blue: '#fa8072'
                picard-medium-light-blue: '#ffa07a'
                picard-light-blue: '#ff6347'
                picard-lightest-blue: '#ff4500'
              greens:
                picard-darkest-green: '#dc143c'
                picard-dark-green: '#b22222'
                picard-medium-dark-green: '#a52a2a'
                picard-green: '#8b0000'
                picard-medium-light-green: '#ff0000'
                picard-light-green: '#ff4500'
                picard-lightest-green: '#ff6347'
              yellows:
                picard-darkest-yellow: '#8b0000'
                picard-dark-yellow: '#a52a2a'
                picard-medium-dark-yellow: '#b22222'
                picard-yellow: '#dc143c'
                picard-medium-light-yellow: '#ff0000'
                picard-light-yellow: '#ff4500'
                picard-lightest-yellow: '#ff6347'
          blue_alert:
            colors:
              oranges:
                picard-darkest-orange: '#00008b'
                picard-dark-orange: '#0000cd'
                picard-medium-dark-orange: '#4169e1'
                picard-orange: '#4682b4'
                picard-medium-light-orange: '#5f9ea0'
                picard-light-orange: '#87ceeb'
                picard-lightest-orange: '#b0e0e6'
              grays:
                picard-darkest-gray: '#1c1c3c'
                picard-dark-gray: '#2a2a5a'
                picard-medium-dark-gray: '#3a3a7a'
                picard-gray: '#4a4a9a'
                picard-medium-light-gray: '#5a5ab4'
                picard-light-gray: '#6a6ad4'
                picard-lightest-gray: '#7a7af4'
              blues:
                picard-darkest-blue: '#00008b'
                picard-dark-blue: '#0000cd'
                picard-medium-dark-blue: '#4169e1'
                picard-blue: '#4682b4'
                picard-medium-light-blue: '#5f9ea0'
                picard-light-blue: '#87ceeb'
                picard-lightest-blue: '#b0e0e6'
              greens:
                picard-darkest-green: '#1c1c3c'
                picard-dark-green: '#2a2a5a'
                picard-medium-dark-green: '#3a3a7a'
                picard-green: '#4a4a9a'
                picard-medium-light-green: '#5a5ab4'
                picard-light-green: '#6a6ad4'
                picard-lightest-green: '#7a7af4'
              yellows:
                picard-darkest-yellow: '#1c1c3c'
                picard-dark-yellow: '#2a2a5a'
                picard-medium-dark-yellow: '#3a3a7a'
                picard-yellow: '#4a4a9a'
                picard-medium-light-yellow: '#5a5ab4'
                picard-light-yellow: '#6a6ad4'
                picard-lightest-yellow: '#7a7af4'
          yellow_alert:
            colors:
              oranges:
                picard-darkest-orange: '#8b4513'
                picard-dark-orange: '#d2691e'
                picard-medium-dark-orange: '#ff8c00'
                picard-orange: '#ffa500'
                picard-medium-light-orange: '#ffb84d'
                picard-light-orange: '#ffd700'
                picard-lightest-orange: '#ffec8b'
              grays:
                picard-darkest-gray: '#4b4b00'
                picard-dark-gray: '#6b6b00'
                picard-medium-dark-gray: '#8b8b00'
                picard-gray: '#abab00'
                picard-medium-light-gray: '#cbcb00'
                picard-light-gray: '#ebeb00'
                picard-lightest-gray: '#fbfb00'
              blues:
                picard-darkest-blue: '#4b4b00'
                picard-dark-blue: '#6b6b00'
                picard-medium-dark-blue: '#8b8b00'
                picard-blue: '#abab00'
                picard-medium-light-blue: '#cbcb00'
                picard-light-blue: '#ebeb00'
                picard-lightest-blue: '#fbfb00'
              greens:
                picard-darkest-green: '#4b4b00'
                picard-dark-green: '#6b6b00'
                picard-medium-dark-green: '#8b8b00'
                picard-green: '#abab00'
                picard-medium-light-green: '#cbcb00'
                picard-light-green: '#ebeb00'
                picard-lightest-green: '#fbfb00'
              yellows:
                picard-darkest-yellow: '#8b4513'
                picard-dark-yellow: '#d2691e'
                picard-medium-dark-yellow: '#ff8c00'
                picard-yellow: '#ffa500'
                picard-medium-light-yellow: '#ffb84d'
                picard-light-yellow: '#ffd700'
                picard-lightest-yellow: '#ffec8b'
          black_alert:
            colors:
              oranges:
                picard-darkest-orange: '#0d0d0d'
                picard-dark-orange: '#1a1a1a'
                picard-medium-dark-orange: '#333333'
                picard-orange: '#4d4d4d'
                picard-medium-light-orange: '#666666'
                picard-light-orange: '#808080'
                picard-lightest-orange: '#999999'
              grays:
                picard-darkest-gray: '#0d0d0d'
                picard-dark-gray: '#1a1a1a'
                picard-medium-dark-gray: '#333333'
                picard-gray: '#4d4d4d'
                picard-medium-light-gray: '#666666'
                picard-light-gray: '#808080'
                picard-lightest-gray: '#999999'
              blues:
                picard-darkest-blue: '#0d0d0d'
                picard-dark-blue: '#1a1a1a'
                picard-medium-dark-blue: '#333333'
                picard-blue: '#4d4d4d'
                picard-medium-light-blue: '#666666'
                picard-light-blue: '#808080'
                picard-lightest-blue: '#999999'
              greens:
                picard-darkest-green: '#0d0d0d'
                picard-dark-green: '#1a1a1a'
                picard-medium-dark-green: '#333333'
                picard-green: '#4d4d4d'
                picard-medium-light-green: '#666666'
                picard-light-green: '#808080'
                picard-lightest-green: '#999999'
              yellows:
                picard-darkest-yellow: '#0d0d0d'
                picard-dark-yellow: '#1a1a1a'
                picard-medium-dark-yellow: '#333333'
                picard-yellow: '#4d4d4d'
                picard-medium-light-yellow: '#666666'
                picard-light-yellow: '#808080'
                picard-lightest-yellow: '#999999'
          gray_alert:
            colors:
              oranges:
                picard-darkest-orange: '#2b2b2b'
                picard-dark-orange: '#3b3b3b'
                picard-medium-dark-orange: '#4b4b4b'
                picard-orange: '#5b5b5b'
                picard-medium-light-orange: '#6b6b6b'
                picard-light-orange: '#7b7b7b'
                picard-lightest-orange: '#8b8b8b'
              grays:
                picard-darkest-gray: '#2b2b2b'
                picard-dark-gray: '#3b3b3b'
                picard-medium-dark-gray: '#4b4b4b'
                picard-gray: '#5b5b5b'
                picard-medium-light-gray: '#6b6b6b'
                picard-light-gray: '#7b7b7b'
                picard-lightest-gray: '#8b8b8b'
              blues:
                picard-darkest-blue: '#2b2b2b'
                picard-dark-blue: '#3b3b3b'
                picard-medium-dark-blue: '#4b4b4b'
                picard-blue: '#5b5b5b'
                picard-medium-light-blue: '#6b6b6b'
                picard-light-blue: '#7b7b7b'
                picard-lightest-blue: '#8b8b8b'
              greens:
                picard-darkest-green: '#2b2b2b'
                picard-dark-green: '#3b3b3b'
                picard-medium-dark-green: '#4b4b4b'
                picard-green: '#5b5b5b'
                picard-medium-light-green: '#6b6b6b'
                picard-light-green: '#7b7b7b'
                picard-lightest-green: '#8b8b8b'
              yellows:
                picard-darkest-yellow: '#2b2b2b'
                picard-dark-yellow: '#3b3b3b'
                picard-medium-dark-yellow: '#4b4b4b'
                picard-yellow: '#5b5b5b'
                picard-medium-light-yellow: '#6b6b6b'
                picard-light-yellow: '#7b7b7b'
                picard-lightest-yellow: '#8b8b8b'
  cb-lcars-dpad:
    template:
      - cb-lcars-functions
    variables:
      __defs_dpad:
        color:
          background:
            active: |
              [[[
                const lcarsColor = getComputedStyle(document.documentElement).getPropertyValue('--lcars-ui-tertiary').trim();
                return lcarsColor ? lcarsColor : 'var(--picard-medium-dark-orange)';
              ]]]
            inactive: |
              [[[
                const lcarsColor = getComputedStyle(document.documentElement).getPropertyValue('--lcars-ui-secondary').trim();
                return lcarsColor ? lcarsColor : 'var(--picard-medium-light-gray)';
              ]]]
      card:
        size: |
          [[[
            return variables.__getParentDimension(this,'width','px') || '300px';
          ]]]
      dpad:
        color:
          background: '#1111ee'
        button:
          scale: 6.5
          min_height: 10px
          color:
            ripple: var(--state-color)
        up:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        down:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        left:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        right:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        center:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        up_left:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        up_right:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        down_left:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
        down_right:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
          tap_action:
            action: toggle
          double_tap_action:
            action: none
          hold_action:
            action: none
    triggers_update:
      - '[[[ return variables.dpad.up.entity; ]]]'
      - '[[[ return variables.dpad.down.entity; ]]]'
      - '[[[ return variables.dpad.left.entity; ]]]'
      - '[[[ return variables.dpad.right.entity; ]]]'
      - '[[[ return variables.dpad.center.entity; ]]]'
      - '[[[ return variables.dpad.up_left.entity; ]]]'
      - '[[[ return variables.dpad.up_right.entity; ]]]'
      - '[[[ return variables.dpad.down_left.entity; ]]]'
      - '[[[ return variables.dpad.down_right.entity; ]]]'
    styles:
      card:
        - height: '[[[ return variables.__get_num_with_unit(variables.card.size) ]]]'
        - width: '[[[ return variables.__get_num_with_unit(variables.card.size) ]]]'
        - background: |
            [[[
              // Function to resolve CSS variables to their hex color values
              function resolveCssVariable(variable) {
                if (variable.startsWith('var(')) {
                  const cssVarName = variable.slice(4, -1).trim();
                  return getComputedStyle(document.documentElement).getPropertyValue(cssVarName).trim();
                }
                return variable;
              }
              let button_ripple_color = resolveCssVariable(variables.dpad.button.color.ripple);
              let svg_dpad_up_bg = (variables.dpad.up.entity && states[variables.dpad.up.entity] && states[variables.dpad.up.entity].state === variables.dpad.up.active_state) ? resolveCssVariable(variables.dpad.up.color.background.active) : resolveCssVariable(variables.dpad.up.color.background.inactive);
              let svg_dpad_down_bg = (variables.dpad.down.entity && states[variables.dpad.down.entity] && states[variables.dpad.down.entity].state === variables.dpad.down.active_state) ? resolveCssVariable(variables.dpad.down.color.background.active) : resolveCssVariable(variables.dpad.down.color.background.inactive);
              let svg_dpad_left_bg = (variables.dpad.left.entity && states[variables.dpad.left.entity] && states[variables.dpad.left.entity].state === variables.dpad.left.active_state) ? resolveCssVariable(variables.dpad.left.color.background.active) : resolveCssVariable(variables.dpad.left.color.background.inactive);
              let svg_dpad_right_bg = (variables.dpad.right.entity && states[variables.dpad.right.entity] && states[variables.dpad.right.entity].state === variables.dpad.right.active_state) ? resolveCssVariable(variables.dpad.right.color.background.active) : resolveCssVariable(variables.dpad.right.color.background.inactive);
              let svg_dpad_center_bg = (variables.dpad.center.entity && states[variables.dpad.center.entity] && states[variables.dpad.center.entity].state === variables.dpad.center.active_state) ? resolveCssVariable(variables.dpad.center.color.background.active) : resolveCssVariable(variables.dpad.center.color.background.inactive);
              let svg_dpad_up_left_bg = (variables.dpad.up_left.entity && states[variables.dpad.up_left.entity] && states[variables.dpad.up_left.entity].state === variables.dpad.up_left.active_state) ? resolveCssVariable(variables.dpad.up_left.color.background.active) : resolveCssVariable(variables.dpad.up_left.color.background.inactive);
              let svg_dpad_up_right_bg = (variables.dpad.up_right.entity && states[variables.dpad.up_right.entity] && states[variables.dpad.up_right.entity].state === variables.dpad.up_right.active_state) ? resolveCssVariable(variables.dpad.up_right.color.background.active) : resolveCssVariable(variables.dpad.up_right.color.background.inactive);
              let svg_dpad_down_left_bg = (variables.dpad.down_left.entity && states[variables.dpad.down_left.entity] && states[variables.dpad.down_left.entity].state === variables.dpad.down_left.active_state) ? resolveCssVariable(variables.dpad.down_left.color.background.active) : resolveCssVariable(variables.dpad.down_left.color.background.inactive);
              let svg_dpad_down_right_bg = (variables.dpad.down_right.entity && states[variables.dpad.down_right.entity] && states[variables.dpad.down_right.entity].state === variables.dpad.down_right.active_state) ? resolveCssVariable(variables.dpad.down_right.color.background.active) : resolveCssVariable(variables.dpad.down_right.color.background.inactive);
              let svg_background_color = resolveCssVariable(variables.dpad.color.background);
              let svgString = `<?xml version="1.0" encoding="UTF-8"?>
              <svg width="80mm" height="80mm" version="1.1" viewBox="0 0 80 80" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xlink="http://www.w3.org/1999/xlink">
                <metadata>
                <rdf:RDF>
                  <cc:Work rdf:about="">
                  <dc:format>image/svg+xml</dc:format>
                  <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
                  <dc:title/>
                  </cc:Work>
                </rdf:RDF>
                </metadata>
                <defs>
                  <style type="text/css"><![CDATA[
                  .lcars-svg-bg {
                  fill: ${svg_background_color};
                  }
                  .lcars-d-pad-bg {
                  fill: ${button_ripple_color};
                  }
                  .lcars-dpad-left-bg {
                  fill: ${svg_dpad_left_bg};
                  }
                  .lcars-dpad-right-bg {
                  fill: ${svg_dpad_right_bg};
                  }
                  .lcars-dpad-up-bg {
                  fill: ${svg_dpad_up_bg};
                  }
                  .lcars-dpad-down-bg {
                  fill: ${svg_dpad_down_bg};
                  }
                  .lcars-dpad-center-bg {
                  fill: ${svg_dpad_center_bg};
                  }
                  .lcars-dpad-up-left-bg {
                  fill: ${svg_dpad_up_left_bg};
                  }
                  .lcars-dpad-up-right-bg {
                  fill: ${svg_dpad_up_right_bg};
                  }
                  .lcars-dpad-down-left-bg {
                  fill: ${svg_dpad_down_left_bg};
                  }
                  .lcars-dpad-down-right-bg {
                  fill: ${svg_dpad_down_right_bg};
                  }
                  ]]></style>
                </defs>
                <g transform="translate(0,-217)">
                <path id="path892" d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-up-left-bg"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-up-right-bg" transform="matrix(-1, 0, 0, 1, 80, 0.0000019179001355951186)"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-down-left-bg" transform="matrix(1, 0, 0, -1, -8.208900226236437e-8, 514)"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-down-right-bg" transform="matrix(-1, 0, 0, -1, 80, 514)"></path>
                <path d="m34 227h12v-9.5c-3.8785-0.47437-8.044-0.4824-12 0z" class="lcars-dpad-up-bg"/>
                <path d="m44.2 219.2v5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m10 263v-12h-9.5c-0.47437 3.8785-0.4824 8.044 0 12z" class="lcars-dpad-left-bg"/>
                <path d="m2.199 252.8h5.0271" style="fill:none;opacity:.889;stroke-width:1.2;stroke:#000"/>
                <path d="m70 251v12h9.5c0.47437-3.8785 0.4824-8.044 0-12z" class="lcars-dpad-right-bg"/>
                <path d="m77.801 261.2h-5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m46 287h-12v9.5c3.8785 0.47437 8.044 0.4824 12 0z" class="lcars-dpad-down-bg"/>
                <path d="m35.8 294.8v-5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m11 251v12h23v23h12v-23h23v-12h-23v-23h-12v23z" class="lcars-dpad-center-bg"/>
                <path d="m34 230.49h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 233.2h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 236.48h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 244.9h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 276h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                </g>
              </svg>`;
              let encodedSvgString = encodeURIComponent(svgString);
              let backgroundImage = `url('data:image/svg+xml,${encodedSvgString}')`;
              return backgroundImage;
            ]]]
        - background-position: center
        - background-size: '[[[ return variables.__get_num_with_unit(variables.card.size) ]]]'
        - background-color: none
      custom_fields:
        dpad_up_button:
          - position: absolute
          - top: 0px
          - left: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.size) + "/2) - (" +
              variables.__get_num_with_unit(variables.card.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_down_button:
          - position: absolute
          - bottom: 0px
          - left: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.size) + "/2) - (" +
              variables.__get_num_with_unit(variables.card.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_left_button:
          - position: absolute
          - left: 0px
          - top: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.size) + "/2) - (" +
              variables.__get_num_with_unit(variables.card.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_right_button:
          - position: absolute
          - right: 0px
          - top: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.size) + "/2) - (" +
              variables.__get_num_with_unit(variables.card.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_center_button:
          - position: absolute
          - right: >
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.size) + " /4 )";]]]
          - top: >
              [[[ return "calc((" +
              variables.__get_num_with_unit(variables.card.size) + "/2) - (" +
              variables.__get_num_with_unit(variables.card.size) + " / " +
              variables.dpad.button.scale + "/2))"; ]]]
          - z-index: 100
        dpad_up_left_button:
          - position: absolute
          - top: 0px
          - left: 0px
          - z-index: 99
        dpad_up_right_button:
          - position: absolute
          - top: 0px
          - right: 0px
          - z-index: 99
        dpad_down_left_button:
          - position: absolute
          - bottom: 0px
          - left: 0px
          - z-index: 99
        dpad_down_right_button:
          - position: absolute
          - bottom: 0px
          - right: 0px
          - z-index: 99
    custom_fields:
      dpad_center_button:
        card:
          type: custom:cblcars-button-card
          entity: '[[[ return variables.dpad.center.entity; ]]]'
          label: '[[[ return variables.dpad.center.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " /2 )";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / " +
                variables.dpad.button.scale + " )";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.center.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.center.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.center.color.overlay.inactive ]]]'
          tap_action: '[[[ return variables.dpad.center.tap_action ]]]'
          double_tap_action: '[[[ return variables.dpad.center.double_tap_action ]]]'
          hold_action: '[[[ return variables.dpad.center.hold_action ]]]'
      dpad_up_button:
        card:
          type: custom:cblcars-button-card
          entity: '[[[ return variables.dpad.up.entity; ]]]'
          label: '[[[ return variables.dpad.up.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.up.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.up.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.up.color.overlay.inactive ]]]'
          tap_action: '[[[ return variables.dpad.up.tap_action ]]]'
          double_tap_action: '[[[ return variables.dpad.up.double_tap_action ]]]'
          hold_action: '[[[ return variables.dpad.up.hold_action ]]]'
      dpad_down_button:
        card:
          type: custom:cblcars-button-card
          entity: '[[[ return variables.dpad.down.entity; ]]]'
          label: '[[[ return variables.dpad.down.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.down.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.down.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.down.color.overlay.inactive ]]]'
          tap_action: '[[[ return variables.dpad.down.tap_action ]]]'
          double_tap_action: '[[[ return variables.dpad.down.double_tap_action ]]]'
          hold_action: '[[[ return variables.dpad.down.hold_action ]]]'
      dpad_left_button:
        card:
          type: custom:cblcars-button-card
          entity: '[[[ return variables.dpad.left.entity; ]]]'
          label: '[[[ return variables.dpad.left.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.left.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.left.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.left.color.overlay.inactive ]]]'
          tap_action: '[[[ return variables.dpad.left.tap_action ]]]'
          double_tap_action: '[[[ return variables.dpad.left.double_tap_action ]]]'
          hold_action: '[[[ return variables.dpad.left.hold_action ]]]'
      dpad_right_button:
        card:
          type: custom:cblcars-button-card
          entity: '[[[ return variables.dpad.right.entity; ]]]'
          label: '[[[ return variables.dpad.right.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.right.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.right.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.right.color.overlay.inactive ]]]'
          tap_action: '[[[ return variables.dpad.right.tap_action ]]]'
          double_tap_action: '[[[ return variables.dpad.right.double_tap_action ]]]'
          hold_action: '[[[ return variables.dpad.right.hold_action ]]]'
      dpad_up_left_button:
        card:
          type: custom:cblcars-button-card
          entity: '[[[ return variables.dpad.up_left.entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.up_left.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.up_left.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.up_left.color.overlay.inactive ]]]'
              border:
                top:
                  left_radius: >
                    [[[ return "calc(" +
                    variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
          label: '[[[ return variables.dpad.up_left.label ]]]'
          show_name: '[[[ return variables.dpad.up_left.show_name ]]]'
          show_label: '[[[ return variables.dpad.up_left.show_label]]]'
          show_state: '[[[ return variables.dpad.up_left.show_state ]]]'
          tap_action: '[[[ return variables.dpad.up_left.tap_action ]]]'
          double_tap_action: '[[[ return variables.dpad.up_left.double_tap_action ]]]'
          hold_action: '[[[ return variables.dpad.up_left.hold_action ]]]'
      dpad_up_right_button:
        card:
          type: custom:cblcars-button-card
          entity: '[[[ return variables.dpad.up_right.entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.up_right.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.up_right.color.overlay.active ]]]'
                  inactive: >-
                    [[[ return variables.dpad.up_right.color.overlay.inactive
                    ]]]
              border:
                top:
                  right_radius: >
                    [[[ return "calc(" +
                    variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
          label: '[[[ return variables.dpad.up_right.label ]]]'
          show_name: '[[[ return variables.dpad.up_right.show_name ]]]'
          show_label: '[[[ return variables.dpad.up_right.show_label]]]'
          show_state: '[[[ return variables.dpad.up_right.show_state ]]]'
          tap_action: '[[[ return variables.dpad.up_right.tap_action ]]]'
          double_tap_action: '[[[ return variables.dpad.up_right.double_tap_action ]]]'
          hold_action: '[[[ return variables.dpad.up_right.hold_action ]]]'
      dpad_down_left_button:
        card:
          type: custom:cblcars-button-card
          entity: '[[[ return variables.dpad.down_left.entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
              color:
                background:
                  default: >-
                    [[[ return variables.dpad.down_left.color.overlay.default
                    ]]]
                  active: '[[[ return variables.dpad.down_left.color.overlay.active ]]]'
                  inactive: >-
                    [[[ return variables.dpad.down_left.color.overlay.inactive
                    ]]]
              border:
                bottom:
                  left_radius: >
                    [[[ return "calc(" +
                    variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
          label: '[[[ return variables.dpad.down_left.label ]]]'
          show_name: '[[[ return variables.dpad.down_left.show_name ]]]'
          show_label: '[[[ return variables.dpad.down_left.show_label]]]'
          show_state: '[[[ return variables.dpad.down_left.show_state ]]]'
          tap_action: '[[[ return variables.dpad.down_left.tap_action ]]]'
          double_tap_action: '[[[ return variables.dpad.down_left.double_tap_action ]]]'
          hold_action: '[[[ return variables.dpad.down_left.hold_action ]]]'
      dpad_down_right_button:
        card:
          type: custom:cblcars-button-card
          entity: '[[[ return variables.dpad.down_right.entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              width: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
              height: >
                [[[ return "calc(" +
                variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
              color:
                background:
                  default: >-
                    [[[ return variables.dpad.down_right.color.overlay.default
                    ]]]
                  active: >-
                    [[[ return variables.dpad.down_right.color.overlay.active
                    ]]]
                  inactive: >-
                    [[[ return variables.dpad.down_right.color.overlay.inactive
                    ]]]
              border:
                bottom:
                  right_radius: >
                    [[[ return "calc(" +
                    variables.__get_num_with_unit(variables.card.size) + " / 2)";]]]
          label: '[[[ return variables.dpad.down_right.label ]]]'
          show_name: '[[[ return variables.dpad.down_right.show_name ]]]'
          show_label: '[[[ return variables.dpad.down_right.show_label]]]'
          show_state: '[[[ return variables.dpad.down_right.show_state ]]]'
          tap_action: '[[[ return variables.dpad.down_right.tap_action ]]]'
          double_tap_action: '[[[ return variables.dpad.down_right.double_tap_action ]]]'
          hold_action: '[[[ return variables.dpad.down_right.hold_action ]]]'
  cb-lcars-footer-base:
    template:
      - cb-lcars-functions
      - cb-lcars-button-base
    variables:
      label: ' '
      text:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
      state:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
      name:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
      card:
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
            unavailable: transparent
        border:
          color: var(--lcars-card-bottom-color)
  cb-lcars-footer:
    template:
      - cb-lcars-footer-base
    show_label: true
    variables:
      card:
         border:
          left:
            size: 90px
          bottom:
            size: 20px
            left_radius: var(--ha-card-border-radius)
      text:
        label:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        state:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        name:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
    styles:
      label:
        - border-bottom-left-radius: |
            [[[
                let leftRadius = variables.card.border.bottom.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
        - border-bottom-right-radius: 0px
  cb-lcars-footer-open:
    template:
      - cb-lcars-footer-base
    show_label: true
    variables:
      card:
        border:
          bottom:
            size: 20px
  cb-lcars-footer-contained:
    template:
      - cb-lcars-footer-open
    show_label: true
    variables:
      card:
        min_height: 10px
        border:
          left:
            size: 50px
          right:
            size: 50px
          bottom:
            size: 10px
            left_radius: var(--ha-card-border-radius)
            right_radius: var(--ha-card-border-radius)
          top:
            left_radius: 0px
            right_radius: 0px
    styles:
      label:
        - border-bottom-left-radius: |
            [[[
                let leftRadius = variables.card.border.bottom.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
        - border-bottom-right-radius: |
            [[[
                let rightRadius = variables.card.border.bottom.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-footer-right:
    template:
      - cb-lcars-footer-base
    show_label: true
    variables:
      card:
        border:
          right:
            size: 90px
          bottom:
            size: 20px
            right_radius: var(--ha-card-border-radius)
      text:
        label:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        state:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        name:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
    styles:
      label:
        - border-bottom-left-radius: 0px
        - border-bottom-right-radius: |
            [[[
                let rightRadius = variables.card.border.bottom.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-button-picard-filled:
    template: cb-lcars-button-base
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            hvac_other: black
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            hvac_other: black
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            hvac_other: black
      icon:
        color:
          default: black
        justify: left
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          right:
            size: 6px
            color: black
            padding: 1.5%
            margin: 0
          left:
            size: 6px
            color: transparent
            padding: 0.5%
            margin: null
    state:
      - id: state_on
        operator: template
        value: |
          [[[
            return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.active ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.active ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.active ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.active ]]]
          state:
            - color: '[[[ return variables.text.state.color.active ]]]'
          label:
            - color: '[[[ return variables.text.label.color.active ]]]'
          name:
            - color: '[[[ return variables.text.name.color.active ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.active ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.active ||
                variables.card.color.background.active ]]]
      - id: state_off
        operator: template
        value: |
          [[[
            return entity !== undefined && ['off', 'closed', 'unlocked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.inactive ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.inactive ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.inactive ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.inactive ]]]
          state:
            - color: '[[[ return variables.text.state.color.inactive ]]]'
          label:
            - color: '[[[ return variables.text.label.color.inactive ]]]'
          name:
            - color: '[[[ return variables.text.name.color.inactive ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]
      - value: heat
        id: state_heat
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.hvac_heat ]]]'
          state:
            - color: '[[[ return variables.text.state.color.hvac_heat ]]]'
          label:
            - color: '[[[ return variables.text.label.color.hvac_heat ]]]'
          name:
            - color: '[[[ return variables.text.name.color.hvac_heat ]]]'
      - value: cool
        id: state_cool
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.hvac_cool ]]]'
          state:
            - color: '[[[ return variables.text.state.color.hvac_cool ]]]'
          label:
            - color: '[[[ return variables.text.label.color.hvac_cool ]]]'
          name:
            - color: '[[[ return variables.text.name.color.hvac_cool ]]]'
      - operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            return entity !== undefined && Number(states[entity.entity_id].state) === 0;
          ]]]
        id: state_zero
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.zero ]]]'
          state:
            - color: '[[[ return variables.text.state.color.zero ]]]'
          label:
            - color: '[[[ return variables.text.label.color.zero ]]]'
          name:
            - color: '[[[ return variables.text.name.color.zero ]]]'
      - operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            return entity !== undefined && Number(states[entity.entity_id].state) !== 0;
          ]]]
        id: state_nonzero
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.non_zero ]]]'
          state:
            - color: '[[[ return variables.text.state.color.non_zero ]]]'
          label:
            - color: '[[[ return variables.text.label.color.non_zero ]]]'
          name:
            - color: '[[[ return variables.text.name.color.non_zero ]]]'
      - operator: default
        id: state_default
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.default ]]]'
          state:
            - color: '[[[ return variables.text.state.color.default ]]]'
          label:
            - color: '[[[ return variables.text.label.color.default ]]]'
          name:
            - color: '[[[ return variables.text.name.color.default ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]
  cb-lcars-button-picard-filled-dense:
    template: cb-lcars-button-picard-filled
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-filled-right:
    template: cb-lcars-button-picard-filled
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        color:
          default: black
        justify: right
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          left:
            size: 6px
            color: black
            padding: 1.5%
            margin: 0
          right:
            size: 6px
            color: transparent
            padding: 0.5%
            margin: null
  cb-lcars-button-picard-filled-dense-right:
    template: cb-lcars-button-picard-filled-right
    variables:
      card:
        height: 50px
  cb-lcars-actions-hue-tap:
    tap_action:
      action: navigate
      navigation_path: |
        [[[
          return "\#hue_card:" + variables.action.hue_api + "_openHueScreen"
        ]]]
    double_tap_action:
      action: more-info
    hold_action:
      action: toggle
  cb-lcars-actions-hue-hold:
    tap_action:
      action: toggle
    double_tap_action:
      action: more-info
    hold_action:
      action: navigate
      navigation_path: |
        [[[
          return "\#hue_card:" + variables.action.hue_api + "_openHueScreen"
        ]]]
  cb-lcars-actions-toggle:
    tap_action:
      action: toggle
      haptic: success
    double_tap_action:
      action: more-info
      haptic: success
    hold_action:
      action: more-info
      haptic: success
  cb-lcars-actions-more-info:
    tap_action:
      action: more-info
      haptic: success
    double_tap_action:
      action: more-info
      haptic: success
    hold_action:
      action: more-info
      haptic: success
  cb-lcars-actions-disable:
    tap_action:
      action: none
      haptic: failure
    double_tap_action:
      action: none
      haptic: failure
    hold_action:
      action: none
      haptic: failure
  cb-lcars-button-picard-label-east:
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-west:
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-ne:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-se:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-nw:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-sw:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-label-center:
    variables:
      text:
        label:
          font_size: 22px
          font_weight: normal
          justify: center
          align_items: center
          padding:
            padding:
              bottom: 10px
  cb-lcars-button-picard-state-east:
    variables:
      text:
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-west:
    variables:
      text:
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-ne:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-se:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-nw:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-sw:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-state-center:
    variables:
      text:
        state:
          font_size: 22px
          font_weight: normal
          justify: center
          align_items: center
          padding:
            padding:
              bottom: 10px
  cb-lcars-button-picard-name-east:
    variables:
      text:
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-west:
    variables:
      text:
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-ne:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-se:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-nw:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-sw:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-name-center:
    variables:
      text:
        name:
          font_size: 22px
          font_weight: normal
          justify: center
          align_items: center
          padding:
            padding:
              bottom: 10px
  cb-lcars-header-base:
    template:
      - cb-lcars-button-base
      - cb-lcars-functions
    variables:
      label: ' '
      text:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
        state:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
        name:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            active: var(--primary-text-color)
            inactive: var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
            unavailable: var(--lcars-card-button-unavailable)
      card:
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
            zero: transparent
            non_zero: transparent
            hvac_heat: transparent
            hvac_cool: transparent
            unavailable: transparent
  cb-lcars-header:
    template:
      - cb-lcars-header-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
            left_radius: var(--ha-card-border-radius)
          left:
            size: 90px
      text:
        label:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        state:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        name:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
    styles:
      label:
        - border-top-right-radius: 0px
        - border-top-left-radius: |
            [[[
                let leftRadius = variables.card.border.top.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-header-open:
    template:
      - cb-lcars-header-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
  cb-lcars-header-contained:
    template:
      - cb-lcars-header-open
    variables:
      card:
        min_height: 10px
        border:
          left:
            size: 50px
          right:
            size: 50px
          top:
            size: 10px
            left_radius: var(--ha-card-border-radius)
            right_radius: var(--ha-card-border-radius)
          bottom:
            left_radius: 0px
            right_radius: 0px
    styles:
      label:
        - border-top-left-radius: |
            [[[
                let leftRadius = variables.card.border.top.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
        - border-top-right-radius: |
            [[[
                let rightRadius = variables.card.border.top.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-header-right:
    template:
      - cb-lcars-header-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
            left_radius: 0px
            right_radius: var(--ha-card-border-radius)
          right:
            size: 90px
          bottom:
            right_radius: 0px
      text:
        label:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        state:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        name:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
    styles:
      label:
        - border-top-left-radius: 0px
        - border-top-right-radius: |
            [[[
                let rightRadius = variables.card.border.top.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-button-picard-icon:
    template:
      - cb-lcars-button-picard-filled-dense
      - cb-lcars-actions-toggle
    variables:
      card:
        width: 40px
        height: 40px
        min_height: 40px
        border:
          top:
            left_radius: 10px
            right_radius: 10px
          bottom:
            left_radius: 10px
            right_radius: 10px
      icon:
        border:
          left: 0px
          right: 0px
        align-items: center
        justify: center
    styles:
      grid:
        - grid-template-areas: '"i"'
    size: 30px
    show_icon: true
    show_label: false
  cb-lcars-label:
    template:
      - cb-lcars-base
    show_label: true
    variables:
      card:
        min_height: 40px
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
            zero: transparent
            non_zero: transparent
            hvac_heat: transparent
            hvac_cool: transparent
            unavailable: transparent
      text:
        label:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
        state:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
        name:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
  cb-lcars-button-grid-icons:
    type: custom:cblcars-button-card
    template:
      - cb-lcars-button-grid
    variables:
      grid:
        X: 5
        'Y': 1
      button:
        variables:
          card:
            width: 40px
            height: 40px
        template:
          - cb-lcars-button-picard-icon
        show_icon: true
        show_label: false
  cb-lcars-animate-press:
    variables:
      animations:
        ripple:
          ripple_color: var(--lcars-card-top-color)
          ripple_opacity: 0.5
    styles:
      card:
        - '--mdc-ripple-color': '[[[ return variables.animations.ripple.ripple_color; ]]]'
        - '--mdc-ripple-press-opacity': '[[[ return variables.animations.ripple.ripple_opacity; ]]]'
  cb-lcars-footer-picard:
    template:
      - cb-lcars-header-picard-base
    variables:
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
        border:
          bottom:
            left_radius: var(--ha-card-border-radius)
            right_radius: 0px !important
          top:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: " "
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 0
          left:
            size: 180
          bottom:
            size: 20
          right:
            size: 0
      lcars_outer:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
      lcars_inner:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              left_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: "[[[ return variables.__get_num_with_unit(variables.card.height); ]]]"
        - width: "[[[ return variables.__get_num_with_unit(variables.card.width); ]]]"
        - border: 0
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - bottom: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - left: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-footer
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_outer.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                bottom:
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size);
                    ]]]
                  right_radius: 0px
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size);
                    ]]]
                inner:
                  factor: "[[[ return variables.card.border.inner.factor; ]]]"
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
      lcars_inner:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-footer
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_inner.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.left.size);
                    ]]]
                bottom:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.size);
                    ]]]
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.left_radius);
                    ]]]
                  right_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-footer-picard-right:
    template:
      - cb-lcars-header-picard-base
    variables:
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
        border:
          bottom:
            left_radius: 0px !important
            right_radius: var(--ha-card-border-radius)
          top:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: " "
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 0
          left:
            size: 0
          bottom:
            size: 20
          right:
            size: 180
      lcars_outer:
        card:
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
      lcars_inner:
        card:
          border:
            right:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              right_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: "[[[ return variables.__get_num_with_unit(variables.card.height); ]]]"
        - width: "[[[ return variables.__get_num_with_unit(variables.card.width); ]]]"
        - border: 0
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - bottom: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - right: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-footer-right
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_outer.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                bottom:
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size);
                    ]]]
                  left_radius: 0px
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size);
                    ]]]
                inner:
                  factor: "[[[ return variables.card.border.inner.factor; ]]]"
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
      lcars_inner:
        card:
          type: custom:cblcars-button-card
          template:
            - cb-lcars-footer-right
          entity: "[[[ return variables.entity; ]]]"
          variables:
            card:
              color: "[[[ return variables.__deepMerge(variables.card.color,variables.lcars_inner.card.color||{}) ]]]"
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.right.size);
                    ]]]
                bottom:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.size);
                    ]]]
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.right_radius);
                    ]]]
                  left_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-button-bullet:
    template: cb-lcars-button-lozenge
    variables:
      card:
        border:
          top:
            left_radius: 0px
          bottom:
            left_radius: 0px
  cb-lcars-button-bullet-right:
    template: cb-lcars-button-lozenge-right
    variables:
      card:
        border:
          top:
            right_radius: 0px
          bottom:
            right_radius: 0px
  cb-lcars-button-square:
    template: cb-lcars-button-base
    show_icon: false
  cb-lcars-button-picard:
    template: cb-lcars-button-base
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.card.color.default ]]]'
            active: '[[[ return variables.card.color.active ]]]'
            inactive: '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.zero ]]]'
            non_zero: '[[[ return variables.card.color.non_zero ]]]'
            hvac_heat: '[[[ return variables.card.color.hvac_heat ]]]'
            hvac_cool: '[[[ return variables.card.color.hvac_cool ]]]'
            unavailable: '[[[ return variables.card.color.unavailable ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.card.color.default ]]]'
            active: '[[[ return variables.card.color.active ]]]'
            inactive: '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.zero ]]]'
            non_zero: '[[[ return variables.card.color.non_zero ]]]'
            hvac_heat: '[[[ return variables.card.color.hvac_heat ]]]'
            hvac_cool: '[[[ return variables.card.color.hvac_cool ]]]'
            unavailable: '[[[ return variables.card.color.unavailable ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.card.color.default ]]]'
            active: '[[[ return variables.card.color.active ]]]'
            inactive: '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.zero ]]]'
            non_zero: '[[[ return variables.card.color.non_zero ]]]'
            hvac_heat: '[[[ return variables.card.color.hvac_heat ]]]'
            hvac_cool: '[[[ return variables.card.color.hvac_cool ]]]'
            unavailable: '[[[ return variables.card.color.unavailable ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
      icon:
        color:
          default: null
          active: '[[[ return variables.card.color.active ]]]'
          inactive: '[[[ return variables.card.color.inactive ]]]'
          unavailable: '[[[ return variables.card.color.unavailable ]]]'
      card:
        border:
          top:
            size: 4px
          left:
            size: 4px
          right:
            size: 4px
          bottom:
            size: 4px
        color:
          background:
            default: transparent
            active: transparent
            zero: transparent
            non_zero: transparent
            hvac_heat: transparent
            hvac_cool: transparent
            inactive: transparent
            unavailable: transparent
  cb-lcars-button-picard-dense:
    template: cb-lcars-button-picard
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-right:
    template: cb-lcars-button-picard
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        justify: right
        border:
          left:
            color: black
          right:
            color: transparent
  cb-lcars-button-picard-dense-right:
    template: cb-lcars-button-picard-right
    variables:
      card:
        height: 50px
  cb-lcars-base:
    template:
      - cb-lcars-functions
      - cb-lcars-actions-disable
    label: '[[[ return variables.label ]]]'
    entity: '[[[ return variables.entity ]]]'
    variables:
      label: ' '
      text:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            active: var(--lcars-ui-secondary)
            inactive: var(--lcars-ui-tertiary)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            unavailable: var(--lcars-card-button-unavailable)
        name:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            active: var(--lcars-ui-secondary)
            inactive: var(--lcars-ui-tertiary)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            unavailable: var(--lcars-card-button-unavailable)
        state:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            active: var(--lcars-ui-secondary)
            inactive: var(--lcars-ui-tertiary)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            unavailable: var(--lcars-card-button-unavailable)
      card:
        height: null
        min_height: 10px
        width: null
        color:
          default: var(--lcars-card-top-color, var(--picard-dark-gray))
          active: var(--lcars-ui-secondary)
          inactive: var(--lcars-ui-tertiary)
          zero: var(--lcars-green)
          non_zero: var(--lcars-blue)
          hvac_heat: var(--lcars-orange)
          hvac_cool: var(--lcars-blue)
          unavailable: var(--lcars-card-button-unavailable)
          background:
            default: var(--lcars-card-top-color, var(--picard-dark-gray))
            active: var(--lcars-ui-secondary)
            inactive: var(--lcars-ui-tertiary)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            unavailable: var(--lcars-card-button-unavailable)
        border:
          top:
            left_radius: 0px
            right_radius: 0px
            size: 0px
          bottom:
            left_radius: 0px
            right_radius: 0px
            size: 0px
          left:
            size: 0px
          right:
            size: 0px
          inner:
            factor: 2
            min_radius: 30px
            width: 35px
      icon:
        box_size: 35px
        size: 24px
        justify: left
        color:
          default: black
          active: null
          inactive: null
          unavailable: null
          background:
            active: null
            inactive: null
      animation:
        justify_content: center
        align_items: center
    show_label: false
    show_state: false
    show_units: true
    show_icon: false
    show_name: false
    styles:
      img_cell:
        - justify-content: '[[[ return variables.icon.justify ]]]'
      card:
        - height: |
            [[[
              if (variables.card.height) {
                return variables.__get_num_with_unit(variables.card.height);
              } else {
                return "100%";
              }
            ]]]
        - min-height: |
            [[[
              if (variables.card.min_height) {
                  return variables.__get_num_with_unit(variables.card.min_height);
              }
            ]]]
        - width: |
            [[[
              if (variables.card.width) {
                return variables.__get_num_with_unit(variables.card.width);
              }
            ]]]
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + (variables.card.border.top.color || variables.card.border.color || variables.card.color.default);
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + (variables.card.border.left.color || variables.card.border.color || variables.card.color.default);
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + (variables.card.border.right.color || variables.card.border.color || variables.card.color.default);
            ]]]
        - border-bottom: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + (variables.card.border.bottom.color || variables.card.border.color || variables.card.color.default);
            ]]]
        - background-color: '[[[ return variables.card.color.background.default ]]]'
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
        - position: relative
      label:
        - z-index: 1
        - display: flex
        - justify-content: '[[[ return variables.text.label.justify ]]]'
        - align-items: '[[[ return variables.text.label.align_items ]]]'
        - text-transform: '[[[ return variables.text.label.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"; ]]]
        - height: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.label.padding.top) + " - " + variables.__get_num_with_unit(variables.text.label.padding.bottom) + ")"; ]]]
        - color: '[[[ return variables.text.label.color.default ]]]'
        - font-size: |
            [[[
              return variables.__get_num_with_unit(variables.text.label.font_size);
            ]]]
        - font-weight: '[[[ return variables.text.label.font_weight ]]]'
        - font-family: '''Antonio'', Arial, sans-serif'
        - justify-self: start
        - text-align: '[[[ return variables.text.label.align ]]]'
        - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.top) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.left) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.right) ]]]'
        - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.bottom) ]]]'
        - outline: >-
            [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + (variables.card.border.color || variables.card.color.default); ]]]
      state:
        - display: flex
        - justify-content: '[[[ return variables.text.state.justify ]]]'
        - align-items: '[[[ return variables.text.state.align_items ]]]'
        - text-transform: '[[[ return variables.text.state.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.state.padding.left) + " - " + variables.__get_num_with_unit(variables.text.state.padding.right) + ")"; ]]]
        - height: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.state.padding.top) + " - " + variables.__get_num_with_unit(variables.text.state.padding.bottom) + ")"; ]]]
        - color: '[[[ return variables.text.state.color.default ]]]'
        - font-size: |
            [[[
              return variables.__get_num_with_unit(variables.text.state.font_size);
            ]]]
        - font-weight: '[[[ return variables.text.state.font_weight ]]]'
        - font-family: '''Antonio'', Arial, sans-serif'
        - justify-self: start
        - text-align: '[[[ return variables.text.state.align ]]]'
        - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.top) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.left) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.right) ]]]'
        - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.bottom) ]]]'
        - outline: >-
            [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + (variables.card.border.color || variables.card.color.default); ]]]
      name:
        - display: flex
        - justify-content: '[[[ return variables.text.name.justify ]]]'
        - align-items: '[[[ return variables.text.name.align_items ]]]'
        - text-transform: '[[[ return variables.text.name.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.name.padding.left) + " - " + variables.__get_num_with_unit(variables.text.name.padding.right) + ")"; ]]]
        - height: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.name.padding.top) + " - " + variables.__get_num_with_unit(variables.text.name.padding.bottom) + ")"; ]]]
        - color: '[[[ return variables.text.name.color.default ]]]'
        - font-size: |
            [[[
                return variables.__get_num_with_unit(variables.text.name.font_size);
            ]]]
        - font-weight: '[[[ return variables.text.name.font_weight ]]]'
        - font-family: '''Antonio'', Arial, sans-serif'
        - justify-self: start
        - text-align: '[[[ return variables.text.name.align ]]]'
        - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.top) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.left) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.right) ]]]'
        - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.bottom) ]]]'
        - outline: >-
            [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + (variables.card.border.color || variables.card.color.default); ]]]
      custom_fields:
        animation:
          - display: flex
          - position: absolute
          - align-items: |
              [[[
                return variables.animation.align_items || 'center';
              ]]]
          - justify-content: |
              [[[
                return variables.animation.justify_content || 'center';
              ]]]
          - filter: |
              [[[
                return variables.animation.filter || 'none';
              ]]]
          - height: |
              [[[
                return "calc( " + variables.__get_num_with_unit(variables.card.height) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.top.size) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.bottom.size)
              ]]]
          - width: |
              [[[
                return "calc( " + variables.__get_num_with_unit(variables.card.width) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.left.size) +
                " - " +
                variables.__get_num_with_unit(variables.card.border.right.size)
              ]]]
    state:
      - id: state_on
        operator: template
        value: |
          [[[
            return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - transition: all 0.4s ease-in
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.active;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.active;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.active;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.active;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.active ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
          label:
            - color: '[[[ return variables.text.label.color.active ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
          name:
            - color: '[[[ return variables.text.name.color.active ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.active || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.active || variables.card.color.background.active ]]]
      - id: state_off
        operator: template
        value: |
          [[[
            return entity !== undefined && ['off', 'closed', 'unlocked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - transition: all 0.4s ease-out
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.inactive;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.inactive;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.inactive;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.inactive;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.inactive ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
          label:
            - color: '[[[ return variables.text.label.color.inactive ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
          name:
            - color: '[[[ return variables.text.name.color.inactive ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive || variables.card.color.background.inactive ]]]
      - id: state_heat
        value: heat
        styles:
          card:
            - transition: all 0.4s ease-out
            - background-color: '[[[ return variables.card.color.background.hvac_heat ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.hvac_heat;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.hvac_heat;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.hvac_heat;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.hvac_heat;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.hvac_heat ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_heat; ]]]
          label:
            - color: '[[[ return variables.text.label.color.hvac_heat ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_heat; ]]]
          name:
            - color: '[[[ return variables.text.name.color.hvac_heat ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_heat; ]]]
      - id: state_cool
        value: cool
        styles:
          card:
            - transition: all 0.4s ease-out
            - background-color: '[[[ return variables.card.color.background.hvac_cool ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.hvac_cool;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.hvac_cool;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.hvac_cool;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.hvac_cool;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.hvac_cool ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_cool; ]]]
          label:
            - color: '[[[ return variables.text.label.color.hvac_cool ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_cool; ]]]
          name:
            - color: '[[[ return variables.text.name.color.hvac_cool ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.hvac_cool; ]]]
      - id: state_unavailable
        operator: template
        value: |
          [[[
            return entity !== undefined && ['unknown', 'unavailable'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.unavailable ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.unavailable;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.unavailable;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.unavailable;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.unavailable;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.unavailable ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.unavailable; ]]]
          label:
            - color: '[[[ return variables.text.label.color.unavailable ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.unavailable; ]]]
          name:
            - color: '[[[ return variables.text.name.color.unavailable ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.unavailable; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.unavailable || variables.icon.color.inactive || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.unavailable || variables.card.color.background.unavailable || variables.icon.color.background.inactive || variables.card.color.background.inactive ]]]
      - id: state_zero
        operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            return entity !== undefined && Number(states[entity.entity_id].state) === 0;
          ]]]
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.zero ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.zero;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.zero;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.zero;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.zero;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.zero; ]]]
          label:
            - color: '[[[ return variables.text.label.color.zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.zero; ]]]
          name:
            - color: '[[[ return variables.text.name.color.zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.zero; ]]]
      - id: state_nonzero
        operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            return entity !== undefined && Number(states[entity.entity_id].state) !== 0;
          ]]]
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.non_zero ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.non_zero;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.non_zero;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.non_zero;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.non_zero;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.non_zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.non_zero; ]]]
          label:
            - color: '[[[ return variables.text.label.color.non_zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.non_zero; ]]]
          name:
            - color: '[[[ return variables.text.name.color.non_zero ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.non_zero; ]]]
      - id: state_default
        operator: default
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.default ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.default;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.default;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.default;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.default;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.default ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.default; ]]]
          label:
            - color: '[[[ return variables.text.label.color.default ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.default; ]]]
          name:
            - color: '[[[ return variables.text.name.color.default ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.default; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.default || variables.card.color.background.inactive ]]]
  cb-lcars-button-base:
    template:
      - cb-lcars-base
      - cb-lcars-actions-toggle
    show_icon: false
    show_name: false
    show_label: true
    variables:
      label: |
        [[[
          return (((Math.floor(Math.random() * 256).toString(16).padStart(2, '0')) + "-" + (Math.floor(Math.random() * 4096).toString(16).padStart(3, '0'))))
        ]]]
      card:
        min_height: 45px
        color:
          default: var(--lcars-card-button, var(--picard-medium-light-gray))
          active: "var(--lcars-card-button, var(--picard-medium-light-gray))"
          inactive: "var(--lcars-card-button-off, var(--picard-dark-gray))"
          zero: "var(--lcars-card-button, var(--picard-medium-light-gray))"
          non_zero: "var(--lcars-card-button-off, var(--picard-dark-gray))"
          unavailable: "var(--lcars-card-button-unavailable, var(--picard-darkest-gray))"
          background:
            default: null
            active: "var(--lcars-card-button, var(--picard-medium-light-gray))"
            inactive: "var(--lcars-card-button-off, var(--picard-dark-gray))"
            zero: "var(--lcars-card-button, var(--picard-medium-light-gray))"
            non_zero: "var(--lcars-card-button-off, var(--picard-dark-gray))"
            unavailable: "var(--lcars-card-button-unavailable, var(--picard-darkest-gray))"
      text:
        label:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            unavailable: black
        state:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            unavailable: black
        name:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            unavailable: black
      icon:
        size: 24px
        color:
          default: black
        justify: left
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          right:
            size: 6px
            color: black
            padding: 1.0%
            margin: 0
          left:
            size: 6px
            color: transparent
            padding: 1.0%
            margin: null
    size: 1.75em
    styles:
      grid:
        - grid-template-areas: '"i n" "i s" "i l"'
      icon:
        - color: '[[[ return variables.icon.color.default ]]]'
        - display: flex
        - align-items: center
        - justify-content: left
        - height: '[[[ return variables.card.height || variables.card.min_height; ]]]'
        - border-left: >-
            [[[ return variables.icon.border.left.color + " solid " +
            variables.icon.border.left.size ]]]
        - border-right: >-
            [[[ return variables.icon.border.right.color + " solid " +
            variables.icon.border.right.size ]]]
        - '--mdc-icon-size': '[[[ return variables.icon.size; ]]]'
        - margin-left: '[[[ return variables.icon.border.left.margin ]]]'
        - margin-right: '[[[ return variables.icon.border.right.margin ]]]'
        - padding-left: '[[[ return variables.icon.border.left.padding ]]]'
        - padding-right: '[[[ return variables.icon.border.right.padding ]]]'
  cb-lcars-callout-base:
    variables:
      card:
        border:
          top:
            left_radius: 0
            right_radius: 0
          bottom:
            left_radius: 0
            right_radius: 0
    styles:
      label:
        - border-top-right-radius: 0px
        - border-top-left-radius: 0px
        - border-bottom-right-radius: 0px
        - border-bottom-left-radius: 0px
  cb-lcars-header-callout:
    template:
      - cb-lcars-header
      - cb-lcars-callout-base
    variables:
      card:
        border:
          top:
            size: 10px
          left:
            size: 10px
  cb-lcars-header-callout-right:
    template:
      - cb-lcars-header-right
      - cb-lcars-callout-base
    variables:
      card:
        border:
          top:
            size: 10px
          right:
            size: 10px
  cb-lcars-footer-callout:
    template:
      - cb-lcars-footer
      - cb-lcars-callout-base
    variables:
      card:
        border:
          bottom:
            size: 10px
          left:
            size: 10px
  cb-lcars-footer-callout-right:
    template:
      - cb-lcars-footer-right
      - cb-lcars-callout-base
    variables:
      card:
        border:
          bottom:
            size: 10px
          right:
            size: 10px
  cb-lcars-animation-cascade:
    template:
      - cb-lcars-functions
    variables:
      enable_resize_observer: true
      card:
        height: "[[[ return this.offsetHeight; ]]]"
        width: "[[[ return this.offsetWidth; ]]]"
      animation:
        cascade:
          grid:
            num_cols: null
            gap: 8
            num_rows: null
          color:
            text: var(--picard-dark-blue)
            animation_start: var(--picard-blue)
            animation_end: var(--picard-moonlight)
          text:
            font_size: 24
            font_weight: 300
    styles:
      label:
        - z-index: 1
      custom_fields:
        animation:
          - display: flex
          - position: absolute
          - align-items: center
    custom_fields:
      animation: |
        [[[
          const patternDefault = [
            { duration: 3, delay: 0.1 },
            { duration: 3, delay: 0.2 },
            { duration: 4, delay: 0.3 },
            { duration: 4, delay: 0.4 },
            { duration: 4, delay: 0.5 },
            { duration: 2, delay: 0.6 },
            { duration: 2, delay: 0.7 },
            { duration: 2, delay: 0.8 }
          ];
          const patternNiagara = [
            { duration: 2, delay: 0.1 },
            { duration: 2, delay: 0.2 },
            { duration: 2, delay: 0.3 },
            { duration: 2, delay: 0.4 },
            { duration: 2, delay: 0.5 },
            { duration: 2, delay: 0.6 },
            { duration: 2, delay: 0.7 },
            { duration: 2, delay: 0.8 }
          ];
          const patternFrozen = [
            { duration: 3, delay: 0.1 },
            { duration: 3, delay: 0.2 },
            { duration: 4, delay: 0.3 },
            { duration: 4, delay: 0.4 },
            { duration: 4, delay: 0.5 },
            { duration: 2, delay: 0.6 },
            { duration: 2, delay: 0.7 },
            { duration: 2, delay: 0.8 }
          ];
          //const customPattern = variables.animation.cascade.custom_pattern;
          const customPatternInput = variables.animation.cascade.custom_pattern;
          let customPattern;
          if (typeof customPatternInput === 'string') {
            try {
              customPattern = JSON.parse(customPatternInput);
              console.log('customPattern json parsed:', customPattern);
            } catch (e) {
              console.error('Failed to parse custom_pattern as JSON:', e);
              customPattern = patternDefault;
            }
          } else if (Array.isArray(customPatternInput)) {
            customPattern = customPatternInput;
          } else {
            customPattern = patternDefault;
          }
          const patternName = variables.animation.cascade.pattern || 'patternDefault';
          const patternMap = {
            default: patternDefault,
            niagara: patternNiagara,
            frozen: patternFrozen,
            custom: customPattern
          };
          const animationSettings = patternMap[patternName] || patternDefault;
          //console.debug("animationSettings: ",animationSettings);
          //console.debug("patternName: ",patternName);
          //const card_height = (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          //const card_width = (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          const card_height = variables.animation.height !== undefined ? parseInt(variables.animation.height) : (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
          const card_width = variables.animation.width !== undefined ? parseInt(variables.animation.width) : (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
          const align_items = variables.animation.cascade.align_items || 'center';
          const justify_content = variables.animation.cascade.justify_content || 'center';
          //console.debug( `${card_height}`);
          //console.debug( `${card_width}`);
          const font_size = variables.__get_num_with_unit(variables.animation.cascade.text.font_size) || '24px';
          const font_weight = variables.animation.cascade.text.font_weight || '300';
          const row_height = variables.__get_num_with_unit(variables.animation.cascade.grid.row_height) || font_size;
          const column_width = variables.__get_num_with_unit(variables.animation.cascade.grid.column_width) || variables.__get_num_with_unit((parseInt(variables.animation.cascade.text.font_size * 2.5))) ||'80px';
          const grid_gap = variables.__get_num_with_unit(variables.animation.cascade.grid.gap) || '8px';
          const text_color = variables.animation.cascade.color.text || '#000';
          const animation_start_color = variables.animation.cascade.color.animation_start || '#26f';
          const animation_end_color = variables.animation.cascade.color.animation_end || '#def';
          const auto_num_cols =  variables.__calculate_grid_cells((parseInt(card_width) - parseInt(grid_gap)),column_width,grid_gap,12);
          //console.debug(`${auto_num_cols}`);
          //console.debug("row_height: ",row_height);
          //console.debug("grid_gap: ",grid_gap);
          //console.debug("card_height - grid_gap: ",(parseInt(card_height) - parseInt(grid_gap)));
          const auto_num_rows =  variables.__calculate_grid_cells((parseInt(card_height) - parseInt(grid_gap)),row_height,grid_gap,8);
          //console.debug(`${auto_num_rows}`);
          const num_rows = variables.animation.cascade.grid.num_rows || auto_num_rows;
          const num_cols = variables.animation.cascade.grid.num_cols || auto_num_cols;
          // Function to get random color variable from our palette
          function getRandomColor() {
            const colors = [animation_start_color, animation_end_color, text_color];
            return colors[Math.floor(Math.random() * colors.length)];
          }
          // Function to generate random text for cells (digits, floats, or text)
          function getRandomText() {
            const types = ['digit', 'float','digit', 'float', 'text'];
            const type = types[Math.floor(Math.random() * types.length)];
            switch (type) {
              case 'digit':
                return Math.floor(Math.random() * 10000).toString().padStart(4, '0');
              case 'float':
                return (Math.random() * 100).toFixed(2);
              case 'text':
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
                return chars.charAt(Math.floor(Math.random() * chars.length)) + chars.charAt(Math.floor(Math.random() * chars.length));
              default:
                return '00';
            }
          }
          let rows = '';
          let keyframes = '';
          for (let i = 1; i <= num_rows; i++) {
            const { duration, delay } = animationSettings[(i - 1) % animationSettings.length];
            const randomColor = getRandomColor();
            keyframes += `
              @keyframes colorchange-frozen-${i} {
                0% {color: ${animation_start_color}}
                25% {color: ${animation_start_color}}
                50% {color: ${animation_start_color}}
                75% {color: ${animation_start_color}}
                80% {color: ${text_color}}
                90% {color: ${text_color}}
                100% {color: ${randomColor}}
              }
            `;
            rows += `
              <div class="row-${i} row">
                ${Array.from({ length: num_cols }, (_, j) => `
                  <div class="cell dc${j + 1}">${getRandomText()}</div>
                `).join('')}
              </div>
            `;
          }
          const isFrozen = patternName === 'frozen';
          const animationIterationCount = isFrozen ? '1' : 'infinite';
          const animationFillMode = isFrozen ? 'forwards' : 'none';
          const keyframesName = isFrozen ? 'colorchange-frozen' : 'colorchange';
          const defaultKeyframes = `
            @keyframes colorchange {
              0% {color: ${animation_start_color}}
              25% {color: ${animation_start_color}}
              50% {color: ${animation_start_color}}
              75% {color: ${animation_start_color}}
              80% {color: ${text_color}}
              90% {color: ${text_color}}
              100% {color: ${animation_end_color}}
            }
          `;
          const customKeyframes = variables.animation.cascade.custom_keyframes || defaultKeyframes;
          //const elt = `
          return `
            <elt>
              <style>
                ${customKeyframes}
                ${keyframes}
                .cascade-wrapper {
                  flex: 1;
                  padding-right: 1px;
                  display: flex;
                  flex-grow: 1;
                  width: ${card_width};
                  height: ${card_height};
                  align-items: ${align_items};
                  justify-content: ${justify_content};
                }
                .data-cascade {
                  font-size: ${font_size};
                  font-weight: ${font_weight};
                  line-height: 1;
                }
                ${Array.from({ length: num_rows }, (_, i) => `
                  .row-${i + 1} {
                    display: grid;
                    grid-template-columns: repeat(${num_cols}, ${column_width});
                    gap: ${grid_gap};
                    color: ${text_color};
                    animation: ${keyframesName}${isFrozen ? `-${i + 1}` : ''} ${animationSettings[i % animationSettings.length].duration}s ${animationIterationCount};
                    animation-delay: ${animationSettings[i % animationSettings.length].delay}s;
                    animation-fill-mode: ${animationFillMode};
                    margin-bottom: ${grid_gap}; /* Add spacing between rows */
                    height: ${row_height}
                  }
                `).join('')}
                .cell {
                  text-align: right;
                }
              </style>
              <div class="cascade-wrapper">
                <div class="data-cascade" id="default">
                  ${rows}
                </div>
              </div>
            </elt>
          `;
          //return elt;
        ]]]
  cb-lcars-multimeter:
    entity: '[[[ return variables.entity ]]]'
    template:
      - cb-lcars-functions
      - cb-lcars-base
      - cb-lcars-actions-disable
    triggers_update: '[[[ return variables.entity ]]]'
    show_icon: false
    show_label: true
    label: '[[[ return variables.label ]]]'
    show_name: false
    show_state: false
    variables:
      _mode: slider
      _vertical: false
      _slider_thickness: 12
      _slider_step: 1
      _slider_mode: brightness
      _min: 0
      _max: 100
      _increment: 10
      _show_unit_of_measurement: false
      _unit_of_measurement: null
      entity: |
        [[[
          return variables.__get_random_entity('light');
        ]]]
      entity_min: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let minValue = variables._min || 0;
          switch (entityDomain) {
            case 'light':
              switch (variables._slider_mode) {
                case 'brightness':
                  minValue = variables._min || 0; //0-100
                  break;
                case 'temperature':
                  minValue = entity.attributes.min_mireds;  // min_mireds/max_mireds
                  break;
                case 'saturation':
                  minValue = variables._min || 0; //0-100
                  break;
                case 'hue':
                  minValue = variables._min || 0;  //0-360
                  break;
                default:
                  minValue = variables._min || 0;
              }
              break;
            case 'fan':
            case 'switch':
            case 'media_player':
              minValue = variables._min || 0;
              break;
            default:
              minValue = variables._min || 0;
          }
          return parseInt(minValue);
        ]]]
      entity_max: |
        [[[
          const entityDomain = entity.entity_id.split('.')[0];
          let maxValue = variables._max || 100;
          switch (entityDomain) {
            case 'light':
              switch (variables._slider_mode) {
                case 'brightness':
                  maxValue = variables._max || 100; //0-100
                  break;
                case 'temperature':
                  maxValue = entity.attributes.max_mireds;  // min_mireds/max_mireds
                  break;
                case 'saturation':
                  maxValue = variables._max || 100; //0-100
                  break;
                case 'hue':
                  maxValue = variables._max || 360;  //0-360
                  break;
                default:
                  maxValue = variables._max || 100;
              }
              break;
            case 'fan':
            case 'switch':
            case 'media_player':
              maxValue = variables._max || 100;
              break;
            default:
              maxValue = variables._max || 100;
          }
          return parseInt(maxValue);
        ]]]
      entity_unit_of_measurement: |
        [[[
          return variables._unit_of_measurement || entity.attributes.unit_of_measurement || '%';
        ]]]
      entity_color: |
        [[[
          return variables.__get_light_css_color(variables.entity)
        ]]]
      entity_match_slider: false
      entity_match_gauge: false
      entity_match_header: false
      entity_match_slider_start: false
      entity_match_slider_end: false
      card:
        height: '[[[ return this.offsetHeight; ]]]'
        min_height: '[[[ return this.offsetHeight; ]]]'
        width: '[[[ return this.offsetWidth; ]]]'
        border:
          top:
            size: 10
          bottom:
            size: 0
          left:
            size: 120
          right:
            size: 0
          inner:
            width: 0
      text:
        label:
          font_size: 22px
          align_items: center
          justify: right
          transform: uppercase
          padding:
            top: 0
            left: 0
            right: 5
            bottom: 0
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            unavailable: black
        name:
          font_size: 22px
          align_items: center
          justify: right
          transform: uppercase
          padding:
            top: 0
            left: 0
            right: 5
            bottom: 0
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            unavailable: black
        state:
          font_size: 22px
          align_items: center
          justify: right
          transform: uppercase
          padding:
            top: 0
            left: 0
            right: 5
            bottom: 0
          color:
            default: black
            active: black
            inactive: black
            zero: black
            non_zero: black
            hvac_heat: black
            hvac_cool: black
            unavailable: black
      slider:
        locked: |
          [[[
            const entityDomain = entity.entity_id.split('.')[0];
            let locked = true;
            switch (entityDomain) {
              case 'light':
              case 'input_number':
              case 'number':
              case 'media_player':
              case 'cover':
              case 'fan':
              case 'switch':
              case 'input_boolean':
              case 'lock':
                locked = false;
                break;
              default:
                locked = true;
                break;
            }
            return locked;
          ]]]
        height: >-
          [[[ return (variables._vertical) ?
          variables.__get_num_with_unit(variables.card.height) :
          variables.__get_num_with_unit(variables._slider_thickness) ]]]
        width: >-
          [[[ return (variables._vertical) ?
          variables.__get_num_with_unit(variables._slider_thickness) :
          variables.__get_num_with_unit(variables.card.width) ]]]
        color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-lightest-blue)" ]]]
        color_alpha: 0.95
        border_color: |
          [[[ return  variables.entity_match_slider ? variables.entity_color :
          "var(--picard-blue)" ]]]
        border_alpha: 0.5
        border_width: 0px
        border_radius: 2px
        flipped: '[[[ return (variables._vertical) ? true : false ]]]'
        padding:
          left: 0
          right: 0
          bottom: 0
          top: '[[[ return parseInt(variables.gauge.sub_meter.tick_size) ]]]'
        step: |
          [[[
            return entity.attributes.percentage_step || variables._slider_step;
          ]]]
        mode: '[[[ return variables._slider_mode ]]]'
        min: '[[[ return variables.entity_min ]]]'
        max: '[[[ return variables.entity_max ]]]'
      gauge:
        min: '[[[ return variables.entity_min ]]]'
        max: '[[[ return variables.entity_max ]]]'
        increment: |
          [[[
            const entityDomain = entity.entity_id.split('.')[0];
            let increment = variables._increment || 10;
            switch (entityDomain) {
              case 'light':
                switch (variables._slider_mode) {
                  case 'temperature':
                    increment = 50;
                    break;
                  default:
                    increment = variables._increment || 10;
                }
                break;
            }
            return parseInt(increment);
          ]]]
        color:
          active: >-
            [[[ return variables.entity_match_gauge ? variables.entity_color :
            "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
          inactive: var(--lcars-card-button-off, var(--picard-darkest-gray))
          background:
            active: transparent
            inactive: transparent
        sub_meter:
          show_sub_meter: true
          tick_size: 10px
          tick_count: 4
          active: >-
            [[[ return variables.entity_match_gauge ? variables.entity_color :
            "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
          inactive: var(--lcars-card-button-off, var(--picard-dark-gray))
          background:
            active: >-
              [[[ return variables.entity_match_gauge ? variables.entity_color :
              "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
            inactive: var(--lcars-card-button-off, var(--picard-darkest-gray))
        label:
          decimal_places: 0
          font_size: 14
          active: >-
            [[[ return variables.entity_match_gauge ? variables.entity_color :
            "var(--lcars-card-button, var(--picard-medium-light-gray))" ]]]
          inactive: var(--lcars-card-button-off, var(--picard-darkest-gray))
      slider_track:
        padding:
          left: 5
          right: 0
          top: 5
          bottom: 0
        mask_color: rgba(0,0,0,0.8)
        gradient_start_color: >
          [[[ return  variables.entity_match_slider_start ?
          variables.entity_color : "var(--error-color)" ]]]
        gradient_end_color: >
          [[[ return  variables.entity_match_slider_end ? variables.entity_color
          : "var(--success-color)" ]]]
        gap: 5
        bar_border_radius: 0
        bar_thickness: 10
      z_slider: |
        [[[
          function parseColor(color) {
            if (color.startsWith('var(')) {
              return cssVarToRgb(color);
            } else if (color.startsWith('#')) {
              return hexToRgb(color);
            } else if (color.startsWith('rgb')) {
              return rgbStringToRgb(color);
            } else {
              return cssStringToRgb(color);
            }
          }
          function cssVarToRgb(cssVar) {
            const varName = cssVar.slice(4, -1).trim();
            const color = getComputedStyle(document.documentElement).getPropertyValue(varName).trim();
            return parseColor(color);
          }
          function hexToRgb(hex) {
            const bigint = parseInt(hex.slice(1), 16);
            return [bigint >> 16 & 255, bigint >> 8 & 255, bigint & 255];
          }
          function rgbStringToRgb(rgbString) {
            const rgba = rgbString.match(/\d+/g).map(Number);
            return rgba.length === 4 ? rgba : rgba.slice(0, 3); // Get only the first three values (R, G, B) or return RGBA
          }
          function cssStringToRgb(color) {
            if (color === 'transparent') {
              return [0, 0, 0, 0]; // Return RGBA value for transparent
            }
            const ctx = document.createElement('canvas').getContext('2d');
            ctx.fillStyle = color;
            document.body.appendChild(ctx.canvas); // Append to body to apply style
            const computedColor = getComputedStyle(ctx.canvas).fillStyle;
            document.body.removeChild(ctx.canvas); // Remove canvas after use
            return rgbStringToRgb(computedColor);
          }
          try {
            const width = parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size) - parseInt(variables.slider_track.padding.left) - parseInt(variables.slider_track.padding.right);
            const height = parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size) - parseInt(variables.slider_track.padding.top) - parseInt(variables.slider_track.padding.bottom);
            let barWidth, barHeight;
            // Check for invalid dimensions (affects calcuations during instantiation generating invalid dimensions in the svg)
            if (width <= 0 || height <= 0) {
              //console.error(`Invalid dimensions: width=${width}, height=${height}`);
              // Return a placeholder or empty SVG
              return `<svg width="100" height="100"><text x="10" y="50" fill="red">Invalid SVG</text></svg>`;
            }
            // Defaults and overrides
            let barSpacing = variables.slider_track.gap ? parseInt(variables.slider_track.gap) : 5;
            let barOrientation = variables._vertical ? "vertical" : "horizontal";
            let cornerRadius = variables.slider_track.bar_border_radius ? parseInt(variables.slider_track.bar_border_radius) : 0;
            // Set defaults based on orientation
            if (barOrientation === 'horizontal') {
              barHeight = height; // Default to height
              barWidth = variables.slider_track.bar_thickness ? parseInt(variables.slider_track.bar_thickness) : 10; // Default to 10px, but user may change
            } else {
              barWidth = width; // Default to width
              barHeight = variables.slider_track.bar_thickness ? parseInt(variables.slider_track.bar_thickness) : 10; // Default to 10px, but user may change
            }
            // Dynamic variable assignment
            let startColor, endColor;
            if (variables._vertical) {
              startColor = variables.slider_track.gradient_end_color.trim();
              endColor = variables.slider_track.gradient_start_color.trim();
            } else {
              startColor = variables.slider_track.gradient_start_color.trim();
              endColor = variables.slider_track.gradient_end_color.trim();
            }
            const startRgb = parseColor(startColor);
            const endRgb = parseColor(endColor);
            function interpolateColor(color1, color2, factor) {
              const result = color1.map((c, i) => Math.round(c + factor * (color2[i] - c)));
              return `rgb(${result.join(',')})`;
            }
            // Autocalculate numBars
            let numBars = barOrientation === 'horizontal' ? Math.floor((width + barSpacing) / (barWidth + barSpacing)) : Math.floor((height + barSpacing) / (barHeight + barSpacing));
            numBars = numBars+1;
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '100%');
            svg.setAttribute('height', '100%');
            svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
            const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            svg.appendChild(g);
            let x = 0;
            let y = 0;
            for (let i = 0; i < numBars; i++) {
              const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
              rect.setAttribute('x', barOrientation === 'horizontal' ? x : 0);
              rect.setAttribute('y', barOrientation === 'horizontal' ? 0 : y);
              rect.setAttribute('width', barOrientation === 'horizontal' ? barWidth : barWidth);
              rect.setAttribute('height', barOrientation === 'horizontal' ? barHeight : barHeight);
              rect.setAttribute('rx', cornerRadius);
              rect.setAttribute('ry', cornerRadius);
              const factor = i / (numBars - 1);
              const color = interpolateColor(startRgb, endRgb, factor);
              rect.setAttribute('fill', color);
              g.appendChild(rect);
              x += barOrientation === 'horizontal' ? barWidth + barSpacing : 0;
              y += barOrientation === 'horizontal' ? 0 : barHeight + barSpacing;
            }
            const svgString = new XMLSerializer().serializeToString(svg);
            return svgString;
            //const svgDataUrl = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(svgString)}`;
            //const cssBackgroundImage = `url("${svgDataUrl}")`;
            //console.log(cssBackgroundImage)
            //return cssBackgroundImage;
          } catch (error) {
            //console.error(error);
            return '';
          }
        ]]]
      z_gauge: |
        [[[
          let minVal = variables.gauge.min;
          let maxVal = variables.gauge.max;
          let increment = variables.gauge.increment;
          //console.warn(minVal, maxVal, increment);
          const orientation = variables._vertical ? 'vertical' : 'horizontal';
          //const bg_fill_color = variables.gauge.sub_meter.background.inactive || 'transparent';
          const showSubticks = variables.gauge.sub_meter.show_sub_meter;
          const entityState = entity.state;
          const meter_bg_color = entityState === 'on' ? variables.gauge.color.background.active : variables.gauge.color.background.inactive;
          const meter_tick_color = entityState === 'on' ? variables.gauge.color.active : variables.gauge.color.inactive;
          const meter_subtick_color = entityState === 'on' ? variables.gauge.sub_meter.active : variables.gauge.sub_meter.inactive;
          const meter_label_color = entityState === 'on' ? variables.gauge.label.active : variables.gauge.label.inactive;
          const meter_label_font_size = variables.__get_num_with_unit(variables.gauge.label.font_size);
          const width = parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size);
          const height = parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size);
          const meter_subtick_size = parseInt(variables.gauge.sub_meter.tick_size) || 10;
          const numSubticks = variables.gauge.sub_meter.tick_count;
          const numSegments = (maxVal - minVal) / increment; // Calculate the number of segments
          const subTickIncrement = 100 / numSegments / (numSubticks + 1);
          const decimal_places = variables.gauge.label.decimal_places || 0;
          /*
          console.warn('subTickIncrement', subTickIncrement);
          console.warn('numSegments', numSegments);
          console.warn('numSubticks', numSubticks);
          console.warn('increment', increment);
          console.warn('maxVal', maxVal);
          console.warn('minVal', minVal);
          console.warn('decimal_places', decimal_places);
          console.warn('orientation', orientation);
          console.warn('width', width);
          console.warn('height', height);
          console.warn('meter_subtick_size', meter_subtick_size);
          */
          const meterTicks = [];
          for (let i = minVal; i <= maxVal; i += increment) {
            const percent = orientation === 'vertical' ? 100 - ((i - minVal) / (maxVal - minVal) * 100) : (i - minVal) / (maxVal - minVal) * 100;
            const position = percent + '%';
            const labelOffset = orientation === 'vertical' ? 'translate(-5, 0)' : 'translate(0, -5)';
            meterTicks.push(`<line x1="${orientation === 'vertical' ? '0' : position}" y1="${orientation === 'vertical' ? position : '0'}" x2="${orientation === 'vertical' ? '100%' : position}" y2="${orientation === 'vertical' ? position : '100%'}" stroke="${meter_tick_color}" stroke-width="2"/>`);
            meterTicks.push(`<text x="${orientation === 'vertical' ? '100%' : position}" y="${orientation === 'vertical' ? position : '100%'}" font-size="${meter_label_font_size}" fill="${meter_label_color}" text-anchor="end" transform="${labelOffset}" dx="${orientation === 'vertical' ? '3' : '-3'}" dy="${orientation === 'vertical' ? '18' : '3'}">${i.toFixed(decimal_places)}${variables._show_unit_of_measurement ? variables.entity_unit_of_measurement : ''}</text>`);
            if (showSubticks && i < maxVal) {
              for (let j = 1; j <= numSubticks; j++) {
                const subTickPercent = orientation === 'vertical' ? percent - (j * subTickIncrement) : percent + (j * subTickIncrement);
                const subTickPosition = subTickPercent + '%';
                meterTicks.push(`<line x1="${orientation === 'vertical' ? '0' : subTickPosition}" y1="${orientation === 'vertical' ? subTickPosition : '0'}" x2="${orientation === 'vertical' ? meter_subtick_size : subTickPosition}" y2="${orientation === 'vertical' ? subTickPosition : meter_subtick_size}" stroke="${meter_subtick_color}" stroke-width="1"/>`);
              }
            }
          }
          const ranges = variables.gauge.ranges || [];
          let rangeBackgrounds = '';
          ranges.forEach(range => {
            const fromPercent = ((range.from - minVal) / (maxVal - minVal)) * 100;
            const toPercent = ((range.to - minVal) / (maxVal - minVal)) * 100;
            const rangeWidth = toPercent - fromPercent;
            rangeBackgrounds += `
              <rect x="${orientation === 'vertical' ? '0' : fromPercent + '%'}" y="${orientation === 'vertical' ? 100 - toPercent + '%' : '0'}"
                    width="${orientation === 'vertical' ? '100%' : rangeWidth + '%'}" height="${orientation === 'vertical' ? rangeWidth + '%' : '100%'}"
                    fill="${range.color}" />
            `;
          });
          return `
            <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
              <rect x="0" y="0" width="100%" height="100%" fill="${meter_bg_color}"/>
              ${rangeBackgrounds}
              ${meterTicks.join('')}
            </svg>
          `;
        ]]]
    state:
      - id: state_on
        operator: template
        value: |
          [[[
            return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
            slider_bg:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.active || variables.card.border.color);
                  ]]]
      - id: state_off
        operator: template
        value: |
          [[[
            return entity !== undefined && ['off', 'closed', 'unlocked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
            slider_bg:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.inactive || variables.card.border.color);
                  ]]]
      - id: state_unavailable
        operator: template
        value: |
          [[[
            return entity !== undefined && ['unknown', 'unavailable'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
            slider_bg:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( variables.card.color.unavailable || variables.card.border.color);
                  ]]]
      - id: state_heat
        value: heat
        styles:
          custom_fields:
            gauge:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
            slider_bg:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_heat || variables.card.border.color);
                  ]]]
      - id: state_cool
        value: cool
        styles:
          custom_fields:
            gauge:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
            slider_bg:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.hvac_cool || variables.card.border.color);
                  ]]]
      - id: state_zero
        operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            return entity !== undefined && Number(states[entity.entity_id].state) === 0;
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
            slider_bg:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.zero || variables.card.border.color);
                  ]]]
      - id: state_nonzero
        operator: template
        value: |
          [[[
            if (entity === undefined) return false;
            return entity !== undefined && Number(states[entity.entity_id].state) !== 0;
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
            slider_bg:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.non_zero || variables.card.border.color);
                  ]]]
      - id: state_default
        operator: default
        value: |
          [[[
            return entity !== undefined && ['on', 'open', 'locked'].includes(states[entity.entity_id].state)
          ]]]
        styles:
          custom_fields:
            gauge:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
            slider_bg:
              - transition: all 0.7s ease-in
              - border-top: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-bottom: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-left: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
              - border-right: |
                  [[[
                    return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.color.default || variables.card.border.color);
                  ]]]
    styles:
      card:
        - border-radius: 0 !important
        - background: none
        - border: none
        - height: 100%
        - max-width: none
      label:
        - z-index: 1
        - height: 100%
        - width: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")";
            ]]]
      name:
        - z-index: 1
        - height: 100%
        - width: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.name.padding.right) + ")";
            ]]]
      state:
        - z-index: 1
        - height: 100%
        - width: |
            [[[
              return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) +" - " + variables.__get_num_with_unit(variables.text.state.padding.right) + ")";
            ]]]
      custom_fields:
        gauge:
          - position: absolute
          - top: 0
          - left: 0
          - visibility: >-
              [[[ return (variables._mode === 'gauge') ? 'visible' : 'hidden'
              ]]]
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-top-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
              ]]]
          - border-top-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
              ]]]
          - border-bottom-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
              ]]]
          - border-bottom-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
              ]]]
          - width: >-
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.card.width) + " - " +
              variables.__get_num_with_unit(variables.card.border.left.size)  +
              " - " +
              variables.__get_num_with_unit(variables.card.border.right.size) +
              " )" ]]]
          - height: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.height) + " - " +
              variables.__get_num_with_unit(variables.card.border.top.size)  + "
              - " +
              variables.__get_num_with_unit(variables.card.border.bottom.size) +
              ")" ]]]
        slider_track_control:
          - visibility: >-
              [[[ return ((variables._mode === 'slider') &&
              !(variables.slider.locked)) ? 'visible' : 'hidden' ]]]
          - position: absolute
          - top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size);
              ]]]
          - left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size);
              ]]]
          - width: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.width) + " - " +
              variables.__get_num_with_unit(variables.card.border.left.size) + "
              - " +
              variables.__get_num_with_unit(variables.card.border.right.size)  +
              ")" ]]]
          - height: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.height) + " - " +
              variables.__get_num_with_unit(variables.card.border.top.size) + "
              - " +
              variables.__get_num_with_unit(variables.card.border.bottom.size)
              + ")" ]]]
          - padding-left2: >-
              [[[ return
              variables.__get_num_with_unit(variables.slider_track.padding.left)
              ]]]
          - padding-right2: >-
              [[[ return
              variables.__get_num_with_unit(variables.slider_track.padding.right)
              ]]]
          - padding-top2: >-
              [[[ return
              variables.__get_num_with_unit(variables.slider_track.padding.top)
              ]]]
          - padding-bottom2: >-
              [[[ return
              variables.__get_num_with_unit(variables.slider_track.padding.bottom)
              ]]]
        slider_bg:
          - visibility: >-
              [[[ return (variables._mode === 'slider') ? 'visible' : 'hidden'
              ]]]
          - position: absolute
          - top: 0px
          - width: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.width) +  " - " +
              variables.__get_num_with_unit(variables.card.border.left.size) +
              " - " +
              variables.__get_num_with_unit(variables.card.border.right.size) +
              " - " +
              variables.__get_num_with_unit(variables.slider_track.padding.left)
              + " - " +
              variables.__get_num_with_unit(variables.slider_track.padding.right)
              + ")" ]]]
          - height: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.height) +  " - " +
              variables.__get_num_with_unit(variables.card.border.top.size) +  "
              - " +
              variables.__get_num_with_unit(variables.card.border.bottom.size) +
              " - " +
              variables.__get_num_with_unit(variables.slider_track.padding.top)
              + " - " +
              variables.__get_num_with_unit(variables.slider_track.padding.bottom)
              + ")" ]]]
          - border-top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-bottom: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-right: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + ( (variables.entity_match_header) ? variables.entity_color : variables.card.border.top.color || variables.card.border.color);
              ]]]
          - border-top-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
              ]]]
          - border-top-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
              ]]]
          - border-bottom-left-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
              ]]]
          - border-bottom-right-radius: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
              ]]]
          - background: '[[[ return variables.z_slider ]]]'
          - padding-top2: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.card.border.top.size) + " + " +
                        variables.__get_num_with_unit(variables.slider_track.padding.top) + ")";
              ]]]
          - padding-right2: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.right) + " + " +
                        variables.__get_num_with_unit(variables.slider_track.padding.right) + ")";
              ]]]
          - padding-bottom2: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.bottom) + " + " +
                        variables.__get_num_with_unit(variables.slider_track.padding.bottom) + ")";
              ]]]
          - padding-left: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.left) + ")";
              ]]]
          - padding-top: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.top) + ")";
              ]]]
          - padding-right: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.right) + ")";
              ]]]
          - padding-bottom: |
              [[[
                return "calc(" + variables.__get_num_with_unit(variables.slider_track.padding.bottom) + ")";
              ]]]
        gauge_control:
          - visibility: >-
              [[[ return ((variables._mode === 'gauge') &&
              !(variables.slider.locked)) ? 'visible' : 'hidden' ]]]
          - position: absolute
          - top: |
              [[[
                  if (variables._vertical) {
                    return variables.__get_num_with_unit(variables.card.border.top.size);
                  } else {
                    return "calc(" + variables.__get_num_with_unit(variables.slider.padding.top) + " + " + variables.__get_num_with_unit(variables.card.border.top.size) + ")"
                  }
              ]]]
          - left: |
              [[[
                if (variables._vertical) {
                  return "calc(" + variables.__get_num_with_unit(variables.card.border.left.size) + " + " + variables.__get_num_with_unit(variables.gauge.sub_meter.tick_size) + ")"
                } else {
                  return variables.__get_num_with_unit(variables.card.border.left.size);
                }
              ]]]
          - width: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.width) + " - " +
              variables.__get_num_with_unit(variables.card.border.left.size)  +
              " - " +
              variables.__get_num_with_unit(variables.card.border.right.size) +
              ")" ]]]
          - height: >-
              [[[ return "calc(" +
              variables.__get_num_with_unit(variables.card.height) + " - " +
              variables.__get_num_with_unit(variables.card.border.top.size)  + "
              - " +
              variables.__get_num_with_unit(variables.card.border.bottom.size) +
              ")" ]]]
        locked_bar:
          - visibility: '[[[ return (variables.slider.locked) ? ''visible'' : ''hidden'' ]]]'
          - position: absolute
          - z-index: 1
          - left: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.left.size);
              ]]]
          - top: |
              [[[
                return variables.__get_num_with_unit(variables.card.border.top.size);
              ]]]
          - width: |-
              [[[
                if (variables._mode === 'slider') {
                  return "calc(" +
                    variables.__get_num_with_unit(variables.card.width) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.left.size) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.right.size) +
                    " + " +
                    variables.__get_num_with_unit(variables.slider_track.padding.left) +
                    " + " +
                    variables.__get_num_with_unit(variables.slider_track.padding.right) +
                    ")";
                } else {
                  return "calc(" +
                    variables.__get_num_with_unit(variables.card.width) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.left.size) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.right.size) +
                    ")";
                }
              ]]]
          - height: |-
              [[[
                if (variables._mode === 'slider') {
                  return "calc(" +
                    variables.__get_num_with_unit(variables.card.height) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.top.size) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.bottom.size) +
                    " + " +
                    variables.__get_num_with_unit(variables.slider_track.padding.top) +
                    " + " +
                    variables.__get_num_with_unit(variables.slider_track.padding.bottom) +
                    ")";
                } else {
                  return "calc(" +
                    variables.__get_num_with_unit(variables.card.height) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.top.size) +
                    " - " +
                    variables.__get_num_with_unit(variables.card.border.bottom.size) +
                    ")";
                }
              ]]]
    custom_fields:
      gauge: |
        [[[
          return variables.z_gauge;
        ]]]
      slider_bg: |
        [[[
          return variables.z_slider;
        ]]]
      locked_bar: |
        [[[
          const entityState = entity.state;
          const entityType = entity.entity_id.split('.')[0]; // Extract entity type
          let progress = 0;
          switch(entityType) {
            case 'light':
              progress = ((parseFloat(entity.attributes.brightness) / 256) * 100);
              break;
            case 'fan':
              progress = (parseFloat(entity.attributes.percentage));
              break;
            default:
              progress = (parseFloat(entityState));
              break;
          }
          const progressPercentage = ((progress / variables.slider.max) * 100);
          const remainingPercentage = 100 - progressPercentage;
          const isVertical = variables._vertical;
          const borderRadius = variables.slider.border_radius;
          const borderWidth = variables.slider.border_width;
          const borderColor = variables.slider.border_color;
          const maskColor = variables.slider_track.mask_color;
          const calcWidth = `calc(${variables.__get_num_with_unit(variables.card.width)} - ${variables.__get_num_with_unit(variables.card.border.left.size)} - ${variables.__get_num_with_unit(variables.card.border.right.size)} )`;
          const calcHeight = `calc(${variables.__get_num_with_unit(variables.card.height)} - ${variables.__get_num_with_unit(variables.card.border.top.size)} - ${variables.__get_num_with_unit(variables.card.border.bottom.size)} )`;
          const sliderPaddingTop = variables.__get_num_with_unit(variables.slider.padding.top);
          const sliderPaddingLeft = variables.__get_num_with_unit(variables.slider.padding.left);
          const sliderHeight = variables.__get_num_with_unit(variables._slider_thickness);
          if (variables._mode === 'gauge') {
            return `
              <div class="progress-bar" style="
                position: absolute;
                ${isVertical ? 'bottom: 0;' : 'left: 0;'}
                top: ${isVertical ? 'unset' : sliderPaddingTop};
                left: ${isVertical ? sliderPaddingTop : sliderPaddingLeft};
                width: ${isVertical ? sliderHeight : progressPercentage + '%'};
                height: ${isVertical ? progressPercentage + '%' : sliderHeight};
                border-radius: ${borderRadius};
                border: ${borderWidth} solid ${borderColor};
                background-color: ${variables.slider.color};
              "></div>
            `;
          } else if (variables._mode === 'slider') {
            return `
              <div class="slider-background" style="
                position: absolute;
                width: ${calcWidth};
                height: ${calcHeight};
                border-radius: unset !important;
              ">
                <div class="slider-mask" style="
                  position: absolute;
                  ${isVertical ? 'top: 0;' : 'right: 0;'}
                  width: ${isVertical ? '100%' : remainingPercentage + '%'};
                  height: ${isVertical ? remainingPercentage + '%' : '100%'};
                  border-radius: unset !important;
                  background-color: ${maskColor};
                "></div>
              </div>
            `;
          }
        ]]]
      gauge_control:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: '[[[ return variables.slider.mode ]]]'
          vertical: '[[[ return variables._vertical ]]]'
          flipped: false
          inverse: false
          step: '[[[ return variables.slider.step; ]]]'
          min: |
            [[[
            //  if (variables.slider.mode === 'temperature') {
            //    return entity.attributes.min_mired
            //  } else {
                return variables.slider.min;
            //  }
            ]]]
          max: |
            [[[
            //  if (variables.slider.mode === 'temperature') {
            //    return entity.attributes.max_mired
            //  } else {
                return variables.slider.max;
            //  }
            ]]]
          styles:
            card:
              - width: >-
                  [[[ return "calc(" +
                  variables.__get_num_with_unit(variables.card.width) + " - " +
                  variables.__get_num_with_unit(variables.card.border.left.size)
                  + " - " +
                  variables.__get_num_with_unit(variables.card.border.right.size)
                  + ")" ]]]
              - height: >-
                  [[[ return "calc(" +
                  variables.__get_num_with_unit(variables.card.height) + " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size)
                  + " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size)
                  + ")" ]]]
              - background: none
              - border-radius: 0
            progress:
              - background-color: >-
                  [[[ return
                  variables.__hex_to_rgba(variables.slider.color,variables.slider.color_alpha)
                  ]]]
              - border: >-
                  [[[ return variables.slider.border_width + " solid " +
                  variables.__hex_to_rgba(variables.slider.border_color,
                  variables.slider.border_alpha)  ]]]
              - border-radius: '[[[ return variables.slider.border_radius ]]]'
              - height: '[[[ return variables.slider.height ]]]'
              - width: '[[[ return variables.slider.width ]]]'
              - left: >-
                  [[[ return
                  variables.__get_num_with_unit(variables.slider.padding.left)
                  ]]]
            container:
              - border-radius: 0
            track:
              - background: none
            thumb:
              - background: none
      slider_track_control:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: '[[[ return variables.slider.mode ]]]'
          vertical: '[[[ return variables._vertical ]]]'
          flipped: true
          inverse: true
          step: '[[[ return variables.slider.step; ]]]'
          min: |
            [[[
            //  if (variables.slider.mode === 'temperature') {
            //    return entity.attributes.min_mired
            //  } else {
                return variables.slider.min;
            //  }
            ]]]
          max: |
            [[[
            //  if (variables.slider.mode === 'temperature') {
            //    return entity.attributes.max_mired
            //  } else {
                return variables.slider.max;
            //  }
            ]]]
          styles:
            progress:
              - background-color: '[[[ return variables.slider_track.mask_color; ]]]'
            container:
              - border-radius: 0
            track:
              - background: none
            thumb:
              - background: none
            card:
              - width: >-
                  [[[ return "calc(" +
                  variables.__get_num_with_unit(variables.card.width) + " - " +
                  variables.__get_num_with_unit(variables.card.border.left.size)
                  + " - " +
                  variables.__get_num_with_unit(variables.card.border.right.size)
                  + ")" ]]]
              - height: >-
                  [[[ return "calc(" +
                  variables.__get_num_with_unit(variables.card.height) + " - " +
                  variables.__get_num_with_unit(variables.card.border.top.size)
                  + " - " +
                  variables.__get_num_with_unit(variables.card.border.bottom.size)
                  + ")" ]]]
              - border-radius: unset !important
              - background: none
  cb-lcars-state-on-blink:
    variables:
      blink_seconds: 3s
    extra_styles: |
      [[[ return `
          @keyframes blink2 {
            0% {
              opacity: 1;
            }
            50% {
              opacity: 0.3;
            }
            100% {
              opacity: 1;
            }
          }
        `]]]
    state:
      - id: state_on
        styles:
          card:
            - animation-duration: '[[[ return variables.blink_seconds; ]]]'
            - animation-timing-function: ease-out
            - animation-name: blink2
            - animation-iteration-count: infinite
            - animation-delay: 1s
  cb-lcars-state-off-blink:
    variables:
      blink_seconds: 3s
    extra_styles: |
      [[[ return `
          @keyframes blink2 {
            0% {
              opacity: 1;
            }
            50% {
              opacity: 0.3;
            }
            100% {
              opacity: 1;
            }
          }
        `]]]
    state:
      - id: state_off
        styles:
          card:
            - animation-duration: '[[[ return variables.blink_seconds; ]]]'
            - animation-timing-function: ease-out
            - animation-name: blink2
            - animation-iteration-count: infinite
            - animation-delay: 1s
  cb-lcars-state-unavailable-blink:
    variables:
      blink_seconds: 3s
    extra_styles: |
      [[[ return `
          @keyframes blink2 {
            0% {
              opacity: 1;
            }
            50% {
              opacity: 0.3;
            }
            100% {
              opacity: 1;
            }
          }
        `]]]
    state:
      - id: state_unavailable
        styles:
          card:
            - animation-duration: '[[[ return variables.blink_seconds; ]]]'
            - animation-timing-function: ease-out
            - animation-name: blink2
            - animation-iteration-count: infinite
            - animation-delay: 1s
