cb-lcars:
  version: 
  manage_config: true
button_card_templates:
  cb-lcars-state-blink-old:
    variables:
      blink_card_background_color: var(--error-color)
      blink_seconds: 2s
      color: var(--error-color)
      blink_state_mode: 'on'
    state:
      - value: '[[[ return variables.blink_state_mode; ]]]'
        color: '[[[ return variables.color; ]]]'
        styles:
          card:
            - animation-duration: '[[[ return variables.blink_seconds; ]]]'
            - animation-timing-function: ease-out
            - animation-name: blink
            - animation-iteration-count: infinite
            - animation-delay: 1s
            - background-color: '[[[ return variables.blink_card_background_color; ]]]'
  cb-lcars-state-blink:
    variables:
      blink_card_background_color: var(--error-color)
      blink_seconds: 3s
    extra_styles: |
      [[[ return `
          @keyframes blink2 {
            0% { 
              opacity: 1;
            }
            50% { 
              opacity: 0.3; 
            } 
            100% { 
              opacity: 1; 
            }
          }
        `]]]    
    state:
      - id: state_on
        styles:
          card:
            - animation-duration: '[[[ return variables.blink_seconds; ]]]'
            - animation-timing-function: ease-out
            - animation-name: blink2
            - animation-iteration-count: infinite
            - animation-delay: 1s
  cb-lcars-label-picard:
    show_label: true
    variables:
      label: LCARS LABEL
      text:
        label:
          font_size: 52
          font_weight: 100
          color:
            default: '#f9ef97'
          justify: right
          padding:
            right: 15
            bottom: 8
      card:
        border:
          left:
            size: 60
          right:
            size: 40
          color: '#52596e'
  cb-lcars-actions-hue-tap:
    tap_action:
      action: navigate
      navigation_path: |
        [[[
          return "\#hue_card:" + variables.action.hue_api + "_openHueScreen"
        ]]]
    double_tap_action:
      action: more-info
    hold_action:
      action: toggle
  cb-lcars-actions-hue-hold:
    tap_action:
      action: toggle
    double_tap_action:
      action: more-info
    hold_action:
      action: navigate
      navigation_path: |
        [[[
          return "\#hue_card:" + variables.action.hue_api + "_openHueScreen"
        ]]]
  cb-lcars-actions-toggle:
    tap_action:
      action: toggle
      haptic: success
    double_tap_action:
      action: more-info
      haptic: success
    hold_action:
      action: more-info
      haptic: success
  cb-lcars-actions-more-info:
    tap_action:
      action: more-info
      haptic: success
    double_tap_action:
      action: more-info
      haptic: success
    hold_action:
      action: more-info
      haptic: success
  cb-lcars-actions-disable:
    tap_action:
      action: none
      haptic: failure
    double_tap_action:
      action: none
      haptic: failure
    hold_action:
      action: none
      haptic: failure
  cb-lcars-animate-press:
    variables:
      ripple_color: var(--lcars-card-top-color)
    styles:
      card:
        - '--mdc-ripple-color': '[[[ return variables.ripple_color; ]]]'
        - '--mdc-ripple-press-opacity': 0.5
  cb-lcars-button-grid:
    template:
      - cb-lcars-grid
    variables:
      card:
        width: null
        height: null
      grid:
        auto_calc_X: true
        auto_calc_Y: true
        buttons: []
        X: 3
        'Y': 2
        template_columns: null
        auto_rows: null
        gap: 5px
      button:
        type: custom:button-card
        variables:
          card:
            width: 180px
            height: 45px
            min_height: 10px
            color:
              active: var(--lcars-ui-secondary)
              inactive: var(--lcars-ui-primary)
              background:
                active: var(--lcars-ui-secondary)
                inactive: var(--lcars-ui-primary)
              default: null
          icon:
            border:
              right:
                padding: 2%
            color:
              active: null
              inactive: null
            background:
              active: null
              inactive: null
        template:
          - cb-lcars-button-picard-filled
          - cb-lcars-button-picard-label-se
          - cb-lcars-button-picard-name-nw
          - cb-lcars-button-picard-state-sw
          - cb-lcars-actions-disable
        size: 22px
        show_name: false
        show_state: false
        show_label: true
        show_icon: false
  cb-lcars-card-base:
    template: cb-lcars-functions
    show_icon: false
    show_label: false
    show_name: false
    show_state: false
    styles:
      card:
        - background-color: |
            [[[
              if (states['input_boolean.lcars_ui_debug'] && states['input_boolean.lcars_ui_debug'].state === 'on') {
                return variables.__get_random_css_color();
              } else {
                return 'transparent';
              }
            ]]]
  cb-lcars-button-picard-label-east:
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-west:
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-ne:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-se:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-nw:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-sw:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-label-center:
    variables:
      text:
        label:
          font_size: 22px
          font_weight: normal
          justify: center
          align_items: center
          padding:
            padding:
              bottom: 10px
  cb-lcars-button-picard-state-east:
    variables:
      text:
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-west:
    variables:
      text:
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-ne:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-se:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-nw:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-sw:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-state-center:
    variables:
      text:
        state:
          font_size: 22px
          font_weight: normal
          justify: center
          align_items: center
          padding:
            padding:
              bottom: 10px
  cb-lcars-button-picard-name-east:
    variables:
      text:
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-west:
    variables:
      text:
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-ne:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-se:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-nw:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-sw:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-name-center:
    variables:
      text:
        name:
          font_size: 22px
          font_weight: normal
          justify: center
          align_items: center
          padding:
            padding:
              bottom: 10px
  cb-lcars-cascade:
    template:
      - cb-lcars-functions
      - cb-lcars-label
    show_label: true
    variables:
      text:
        label:
          font_size: 24
          font_weight: 300
      cascade:
        grid:
          num_cols: null
          gap: 8
          column_width: 60
          num_rows: null
          row_height: 24
        colors:
          text: var(--picard-dark-blue)
          animation_start: var(--picard-blue)
          animation_end: var(--picard-moonlight)
          text_orig: '#000'
          animation_start_orig: '#26f'
          animation_end_orig: '#def'
    label: |
      [[[
        const card_height = (parseInt(variables.card.height) - parseInt(variables.card.border.top.size) - parseInt(variables.card.border.bottom.size));
        const card_width = (parseInt(variables.card.width) - parseInt(variables.card.border.left.size) - parseInt(variables.card.border.right.size));
        //console.debug( `${card_height}`);
        //console.debug( `${card_width}`);
        const font_size = variables.__get_num_with_unit(variables.text.label.font_size) || '24px';
        const row_height = variables.__get_num_with_unit(variables.cascade.grid.row_height) || '24px';
        const grid_gap = variables.__get_num_with_unit(variables.cascade.grid.gap) || '8px';
        const column_width = variables.__get_num_with_unit(variables.cascade.grid.column_width) || '80px';
        const text_color = variables.cascade.colors.text || '#000';
        const animation_start_color = variables.cascade.colors.animation_start || '#26f';
        const animation_end_color = variables.cascade.colors.animation_end || '#def';
        const auto_num_cols =  variables.__calculate_grid_cells((parseInt(card_width) - parseInt(grid_gap)),column_width,grid_gap,12);
        //console.debug(`${auto_num_cols}`);
        //console.debug("row_height: ",row_height);
        //console.debug("grid_gap: ",grid_gap);
        //console.debug("card_height - grid_gap: ",(parseInt(card_height) - parseInt(grid_gap)));
        const auto_num_rows =  variables.__calculate_grid_cells((parseInt(card_height) - parseInt(grid_gap)),row_height,grid_gap,8);
        //console.debug(`${auto_num_rows}`);
        const num_rows = variables.cascade.grid.num_rows || auto_num_rows;
        const num_cols = variables.cascade.grid.num_cols || auto_num_cols;
        // Predefined animation delays and durations for a more random feel
        const animationSettings = [
          { duration: 3, delay: 0.1 },
          { duration: 3, delay: 0.2 },
          { duration: 4, delay: 0.3 },
          { duration: 4, delay: 0.4 },
          { duration: 4, delay: 0.5 },
          { duration: 2, delay: 0.6 },
          { duration: 2, delay: 0.7 },
          { duration: 2, delay: 0.8 }
        ];
        // Function to generate random text for cells (digits, floats, or text)
        function getRandomText() {
          const types = ['digit', 'float', 'text'];
          const type = types[Math.floor(Math.random() * types.length)];
          switch (type) {
            case 'digit':
              return Math.floor(Math.random() * 10000).toString().padStart(4, '0');
            case 'float':
              return (Math.random() * 100).toFixed(2);
            case 'text':
              const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
              return chars.charAt(Math.floor(Math.random() * chars.length)) + chars.charAt(Math.floor(Math.random() * chars.length));
            default:
              return '00';
          }
        }
        let rows = '';
        for (let i = 1; i <= num_rows; i++) {
          const { duration, delay } = animationSettings[(i - 1) % animationSettings.length];
          rows += `
            <div class="row-${i} row">
              ${Array.from({ length: num_cols }, (_, j) => `
                <div class="cell dc${j + 1}">${getRandomText()}</div>
              `).join('')}
            </div>
          `;
        }
        return `
          <elt>
            <style>
              @keyframes colorchange {
                0% {color: ${animation_start_color}}
                25% {color: ${animation_start_color}}
                50% {color: ${animation_start_color}}
                75% {color: ${animation_start_color}}
                80% {color: ${text_color}}
                90% {color: ${text_color}}
                100% {color: ${animation_end_color}}
              }
              .cascade-wrapper {
                flex: 1;
                padding-right: 1px;
                display: flex;
                flex-grow: 1;
              }
              .data-cascade {
                font-size: ${font_size};
                line-height: 1;
              }
              ${Array.from({ length: num_rows }, (_, i) => `
                .row-${i + 1} {
                  display: grid;
                  grid-template-columns: repeat(${num_cols}, ${column_width});
                  gap: ${grid_gap};
                  color: ${text_color};
                  animation: colorchange ${animationSettings[i % animationSettings.length].duration}s infinite;
                  animation-delay: ${animationSettings[i % animationSettings.length].delay}s;
                  margin-bottom: ${grid_gap}; /* Add spacing between rows */
                  height: ${row_height}
                }
              `).join('')}
              .cell {
                text-align: right;
              }
            </style>
            <div class="cascade-wrapper">
              <div class="data-cascade" id="default">
                ${rows}
              </div>
            </div>
          </elt>
        `;
      ]]]
  cb-lcars-meter:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
      - cb-lcars-button-grid
    variables:
      card:
        height: null
        width: null
      button:
        variables:
          card:
            height: 20px
            min_height: 5px
            width: 100px
        show_label: false
        template:
          - cb-lcars-button-lozenge
      gradient_start_color: var(--error-color)
      gradient_start_rgb: |
        [[[ 
          return variables.__hex_to_rgba(variables.gradient_start_color)
          ]]]
      gradient_end_color: var(--lcars-blue)
      gradient_end_rgb: |
        [[[ 
          return variables.__hex_to_rgba(variables.gradient_end_color) 
        ]]]
      _gradient:
        X: 1
        'Y': 10
        gap: 5px
      gradient_X: >-
        [[[ return variables.__calculate_grid_cells(variables.card.width,
        variables.button.variables.card.width, variables._gradient.gap,
        variables._gradient.X) ]]]
      gradient_Y: >-
        [[[ return variables.__calculate_grid_cells(variables.card.height,
        variables.button.variables.card.height, variables._gradient.gap,
        variables._gradient.Y) ]]]
      grid:
        X: '[[[ return variables.gradient_X ]]]'
        'Y': '[[[ return variables.gradient_Y ]]]'
        gap: '[[[ return variables._gradient.gap ]]]'
        buttons: |
          [[[ 
            let buttons = [];
            let total_steps = (variables.gradient_X > variables.gradient_Y) ? variables.gradient_X : variables.gradient_Y;
            //console.debug("grid_X: " + variables.grid_X);
            //console.debug("total_steps: " + total_steps);
            for(let i = 0; i < total_steps ; i++) {
              buttons.push({
                variables: {
                  card: {
                    color: {
                      background: {
                        inactive: variables.__interpolated_rgb(variables.gradient_start_rgb,variables.gradient_end_rgb, i, total_steps)
                      },
                    },
                  },
                },
              });
            }
            return buttons;
          ]]]
  cb-lcars-meter-horizontal:
    template:
      - cb-lcars-meter
    variables:
      button:
        variables:
          card:
            width: 10px
            height: 20px
        template:
          - cb-lcars-button-picard-filled
      _gradient:
        gap: 5px
        'Y': 1
        X: 25
  cb-lcars-functions:
    variables:
      ___debug: false
      ___debug_hass: false
      ___debug_extras: null
      __cblcarsLog: |
        [[[
          return function styledLog(level, message) {
            let styles = [
                'color: white',
                'padding: 2px 4px',
                'border-radius: 15px'
            ];
            switch (level) {
                case 'info':
                    styles.push('background-color: #37a6d1'); // Blue
                    console.log(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
                case 'warn':
                    styles.push('background-color: #ff6753'); // Orange
                    console.warn(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
                case 'error':
                    styles.push('background-color: #ef1d10'); // Red
                    console.error(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
                case 'debug':
                    if(variables.___debug == true) {
                      styles.push('background-color: #8e44ad'); // Purple
                      console.debug(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    }
                    break;
                default:
                    styles.push('background-color: #6d748c'); // Gray for unknown levels
                    console.log(`%c    CB-LCARS | ${level} `, styles.join(';'), message);
                    break;
              }
          }
        ]]]
      __getParentDimension: |
        [[[
          // new take on things - just try to traverse up the DOM tree until a reasonable size is found
          return function(thisObj, dimension, units, fallbackDimensions) {
            let currentElement = thisObj.parentElement;
            let parentDimension = 0;
            // Function to check if the dimension is reasonable
            function isReasonableSize(size) {
              return size > 0; // adjust this condition based on what is 'reasonable'
            }
            // Function to find the ancestor with id="root" (this is in stacks, grids, etc.)
            function findRootAncestor(element) {
              while (element) {
                if (element.id === 'root') {
                  return element;
                }
                if (element.parentNode instanceof ShadowRoot) {
                  element = element.parentNode.host;
                } else {
                  element = element.parentElement;
                }
              }
              return null;
            }
            // Function to resolve CSS variable (for fallback dimensions that are passed in as vars)
            function resolveCSSVariable(variable) {
              return getComputedStyle(document.documentElement).getPropertyValue(variable).trim();
            }
            // Function to check if the element is within a vertical stack
            function isVerticalStack(element) {
              // Check if the element or any ancestor is a HUI-VERTICAL-STACK-CARD
              while (element) {
                if (element.tagName === "HUI-VERTICAL-STACK-CARD") {
                  return true;
                }
                if (element.parentNode instanceof ShadowRoot) {
                  element = element.parentNode.host;
                } else {
                  element = element.parentElement;
                }
              }
              return false;
            }
            // Check if there is an ancestor with id="root" and handle height dimension (we want the first row height for now)
            if (dimension === 'height' && isVerticalStack(thisObj)) {
              // If the card is in a vertical stack, return the default row height
              return `var(--row-height)`;
            } else {
              // Otherwise, continue with the existing logic
              if (dimension === 'height') {
                const rootAncestor = findRootAncestor(thisObj);
                if (rootAncestor && rootAncestor.firstElementChild) {
                  const firstChild = rootAncestor.firstElementChild;
                  parentDimension = firstChild.clientHeight;
                  // If the dimensions are reasonable, return them
                  if (isReasonableSize(parentDimension)) {
                    if (units) {
                      return parentDimension + units;
                    } else {
                      return parentDimension;
                    }
                  }
                }
              }
              // Traverse up the DOM tree to find a reasonable size
              while (currentElement) {
                if (dimension === 'width') {
                  parentDimension = currentElement.clientWidth;
                } else if (dimension === 'height') {
                  parentDimension = currentElement.clientHeight;
                } else {
                  console.error("Invalid dimension specified. Use 'width' or 'height'.");
                  return null;
                }
                if (isReasonableSize(parentDimension)) {
                  break;
                }
                if (currentElement.parentNode instanceof ShadowRoot) {
                  currentElement = currentElement.parentNode.host;
                } else {
                  currentElement = currentElement.parentElement;
                }
              }
              // If no reasonable size found, use fallback dimensions or window dimensions as fallback
              if (!isReasonableSize(parentDimension)) {
                if (fallbackDimensions && fallbackDimensions[dimension]) {
                  const fallbackValue = fallbackDimensions[dimension];
                  if (typeof fallbackValue === 'string' && fallbackValue.startsWith('var(')) {
                    const cssVariable = fallbackValue.slice(4, -1).trim();
                    parentDimension = parseFloat(resolveCSSVariable(cssVariable));
                  } else {
                    parentDimension = parseFloat(fallbackValue);
                  }
                } else {
                  if (dimension === 'width') {
                    parentDimension = window.innerWidth;
                  } else if (dimension === 'height') {
                    parentDimension = window.innerHeight;
                  }
                }
              }
              // Return the dimension with or without units
              if (units) {
                return parentDimension + units;
              } else {
                return parentDimension;
              }
            }
          }
        ]]]
      __calculcate_grid_cell_dimension: |
        [[[
          return function calculcate_grid_cell_dimension(cardDimension, gridCells, gridGap, defaultButtonCardDimension) {
            let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
            let grid_cells = gridCells ? parseInt(gridCells) : 0;
            let grid_gap = gridGap ? parseInt(gridGap) : 0;
            //console.debug("... card_dimension: " + card_dimension);
            //console.debug("... grid_cells: " + grid_cells);
            //console.debug("... grid_gap: " + grid_gap);
            // If card_dimension is not defined or is 0, return defaultButtonCardDimension (default or user overrides this)
            if (card_dimension === 0) {
              //console.debug("...returning defaultButtonCardDimension: " + defaultButtonCardDimension);
              return defaultButtonCardDimension;
            }
            // Calculate the button card dimension that would fit the given number of grid cells
            //let button_card_dimension = Math.floor((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);
            let button_card_dimension = ((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);
            //console.debug("...button_card_dimension calulated: " + button_card_dimension);
            return (button_card_dimension +"px");
          }
        ]]]
      __calculate_grid_cells: |
        [[[
            return function calculate_grid_cells(cardDimension, buttonCardDimension, gridGap, defaultGridCells) {
            let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
            let button_card_dimension = buttonCardDimension ? parseInt(buttonCardDimension) : 0;
            let grid_gap = gridGap ? parseInt(gridGap) : 0;
            //console.debug("... card_dimension: " + card_dimension);
            //console.debug("... grid_gap: " + grid_gap);
            //console.debug("... defaultGridCells: " + defaultGridCells);
            // If card_dimension is not defined or is 0, return defaultGridCells (default or user overrides this)
            if (card_dimension === 0) {
              //console.debug("...returning defaultGridCells!");
              return defaultGridCells;
            }
            // Calculate the number of grid cells that would fit
            let grid_dimension = Math.floor((card_dimension + grid_gap) / (button_card_dimension + grid_gap));
            //console.debug("...returing calc. grid_dimension: " + grid_dimension);
            return grid_dimension;
          }
        ]]]
      __deepMerge: |
        [[[
          return function deepMerge(object1, object2) {
            if (Array.isArray(object1) && Array.isArray(object2)) {
              return [...object1, ...object2];
            } else if (typeof object1 === 'object' && typeof object2 === 'object') {
              return Object.entries(object2).reduce((acc, [key, value]) => {
                if (Object.keys(acc).includes(key) && typeof value === 'object') {
                  acc = { ...acc, [key]: deepMerge(acc[key], value) };
                } else {
                  acc = { ...acc, [key]: value };
                }
                return acc;
              }, { ...object1 });
            } else {
              return object2;
            }
          }
        ]]]
      __get_num_with_unit: |
        [[[
          return function getSizeWithUnit(size, unit = 'px') {
            return isNaN(size) ? size : size + unit;
          }
        ]]]
      __get_random_entity: |
        [[[
            return function get_random_entity(domain) {
              const entityList = Object.keys(hass.states).filter(e => e.startsWith(domain + '.'));
              if (domain === 'light') {
                  // Filter entities that are powered on
                  const poweredOnLights = entityList.filter(e => hass.states[e].state === 'on');
                  if (poweredOnLights.length === 0) {
                      // If no lights are powered on, return a random light entity
                      return entityList[Math.floor(Math.random() * entityList.length)];
                  }
                  // Sort powered on lights by brightness in descending order
                  poweredOnLights.sort((a, b) => {
                      const brightnessA = hass.states[a].attributes.brightness || 0;
                      const brightnessB = hass.states[b].attributes.brightness || 0;
                      return brightnessB - brightnessA;
                  });
                  // Return the brightest powered on light
                  return poweredOnLights[0];
              }
              // For other domains, return a random entity
              return entityList[Math.floor(Math.random() * entityList.length)];
            }
        ]]]
      __get_random_css_color: |
        [[[
            return function get_random_css_color() {
              var letters = '0123456789ABCDEF';
              var color = '#';
              for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
              }
              return color;
            }
        ]]]
      __get_light_css_color: |
        [[[
          return function get_light_css_color(entity) {
            let css_color = 'var(--lcars-ui-secondary)';
            let lightEntity = states[entity];
            if (lightEntity && lightEntity.attributes.rgb_color) {
              const light_color = lightEntity.attributes.rgb_color;
              css_color = `rgb(${light_color.join(', ')})`;
            }
            return css_color;
          }
        ]]]
      __get_light_css_color_string: |
        [[[
          return function get_light_css_color_string(entity) {
            const entityString = `'${entity}'`; // This will give you the entity variable with single quotes around it
            const lightEntity2 = states[entity];
            const lightEntity = states[entityString];
            console.debug("entity: " + entity);
            console.debug("entityString: " + entityString);
            console.debug("lightEntity: " + lightEntity);
            console.debug("lightEntity2: " + lightEntity2);
            console.debug("states: " + states);
            console.debug("states[living]: " + states['light.living_room_ambient'].attributes.rgb_color);
            console.debug("lightEntity2.attributes.rgb_color: " + lightEntity2.attributes.rgb_color);
            let cssColor = 'var(--lcars-ui-secondary)'; // default color
            if (lightEntity && lightEntity.attributes.rgb_color) {
              const lightColor = lightEntity.attributes.rgb_color;
              cssColor = `rgb(${lightColor.join(', ')})`;
            }
            return cssColor;
          }
        ]]]
      __hex_to_rgba: |
        [[[
          return function hex_to_rgba(input, alpha = 1) {
            if (input.startsWith('rgb')) {
              // If the input starts with 'rgb', return the input as is
              return input;
            }     let hex;
            if (input.startsWith('var(--')) {
                // If the input is a CSS variable in the format "var(--color)", extract the color variable
                hex = getComputedStyle(document.documentElement)
                    .getPropertyValue(input.slice(4, -1))
                    .trim();
            } else if (input.startsWith('--')) {
                // If the input is a CSS variable, get its value
                hex = getComputedStyle(document.documentElement)
                    .getPropertyValue(input)
                    .trim();
            } else {
                hex = input;
            }
            let r, g, b;
            if (hex.length === 7) {
                r = parseInt(hex.slice(1, 3), 16);
                g = parseInt(hex.slice(3, 5), 16);
                b = parseInt(hex.slice(5, 7), 16);
            } else if (hex.length === 4) {
                r = parseInt(hex[1] + hex[1], 16);
                g = parseInt(hex[2] + hex[2], 16);
                b = parseInt(hex[3] + hex[3], 16);
            } else {
                throw new Error(`Invalid HEX color: ${input}`);
            }
            return `rgba(${r}, ${g}, ${b}, ${alpha})`;
          }
        ]]]
      __extract_color_channel: |
        [[[
          return function extract_color_channel(color, channel) {
            // Convert the channel to lowercase
            channel = channel.toLowerCase();
            // Determine if the input is rgb or rgba
            let isRGBA = color.startsWith('rgba');
            // Split the color string into an array of numbers
            let numbers = color.slice(isRGBA ? 5 : 4, -1).split(',').map(Number);
            // Define the color channels
            let channels = {r: 0, g: 1, b: 2, a: 3};
            // Check if the specified channel exists
            if (channel in channels) {
              // If the input is rgb and the channel is 'a', return undefined
              if (!isRGBA && channel === 'a') {
                return undefined;
              }
              // Return the decimal value of the specified color channel
              return numbers[channels[channel]];
            } else {
              throw new Error('Invalid color channel. Please specify "r", "g", "b", or "a".');
            }
          }
        ]]]
      __extract_color_channel2: |
        [[[
          return function extract_color_channel2(rgba, channel) {
            // Convert the channel to lowercase
            channel = channel.toLowerCase();
            // Split the rgba string into an array of numbers
            let numbers = rgba.slice(5, -1).split(',').map(Number);
            // Define the color channels
            let channels = {r: 0, g: 1, b: 2, a: 3};
            // Check if the specified channel exists
            if (channel in channels) {
              // Return the decimal value of the specified color channel
              //console.log("....numbers = " + numbers);
              //console.log("....channels[channel] = " + numbers[channels[channel]]);
              return numbers[channels[channel]];
            } else {
              throw new Error('Invalid color channel. Please specify "r", "g", "b", or "a".');
            }
          }
        ]]]
      __interpolated_rgb: |
        [[[
          return function interpolated_rgb(start_rgb, end_rgb, step, total_steps) {
            let start_r = variables.__extract_color_channel(start_rgb, 'r');
            let start_g = variables.__extract_color_channel(start_rgb, 'g');
            let start_b = variables.__extract_color_channel(start_rgb, 'b');
            let end_r = variables.__extract_color_channel(end_rgb, 'r');
            let end_g = variables.__extract_color_channel(end_rgb, 'g');
            let end_b = variables.__extract_color_channel(end_rgb, 'b');
            let interpolated_r = Math.round(start_r + step * (end_r - start_r) / total_steps);
            let interpolated_g = Math.round(start_g + step * (end_g - start_g) / total_steps);
            let interpolated_b = Math.round(start_b + step * (end_b - start_b) / total_steps);
            //console.log("in function r="+interpolated_r + ",g=" +interpolated_g+ ",b=" + interpolated_b);
            return `rgb(${interpolated_r}, ${interpolated_g}, ${interpolated_b})`;
          }
        ]]]
    custom_fields:
      debugger: |
        [[[
          if (!variables.___debug) return
          const o = {
            variables: variables,
            entity: entity ? entity : {},
            bc: this
          }
          if (variables.___debug_hass) {
            o.hass = hass
          }
          if (variables.___debug_extras) {
            o.extras = variables.___debug_extras
          }
          variables.__cblcarsLog("debug", o)
        ]]]
    styles:
      custom_fields:
        debugger:
          - height: 0
          - width: 0
          - visibility: hidden
  cb-lcars-grid:
    template:
      - cb-lcars-card-base
      - cb-lcars-functions
    variables:
      card:
        width: null
        height: null
      grid:
        auto_calc_X: true
        auto_calc_Y: true
        buttons: []
        X: 3
        'Y': 2
        template_columns: null
        auto_rows: null
        gap: 5px
      button:
        type: custom:button-card
        variables:
          card:
            width: 180px
            height: 45px
            min_height: 10px
        show_name: false
        show_state: false
        show_label: false
        show_icon: false
      y_grid_X: >
        [[[ return variables.grid.auto_calc_X ?
        variables.__calculate_grid_cells(variables.card.width,
        variables.button.variables.card.width, variables.grid.gap,
        variables.grid.X) : variables.grid.X ]]]
      y_grid_Y: >
        [[[ return variables.grid.auto_calc_Y ?
        variables.__calculate_grid_cells(variables.card.height,
        variables.button.variables.card.height, variables.grid.gap,
        variables.grid.Y) : variables.grid.Y ]]]
      y_total_cards: '[[[ return variables.y_grid_X * variables.y_grid_Y; ]]]'
      z_card_width: >
        [[[ return variables.card.width || "calc( ((" +
        variables.button.variables.card.width + " + " + variables.grid.gap + " )
        *" + variables.y_grid_X + ") - " + variables.grid.gap + ")";
        ]]]
      z_card_height: >
        [[[ return variables.card.height || "calc( ((" +
        variables.button.variables.card.height + " + " + variables.grid.gap + "
        ) *" + variables.y_grid_Y + ") - " + variables.grid.gap + ")";
        ]]]
    styles:
      card:
        - height: '[[[ return variables.z_card_height ]]]'
        - width: '[[[ return variables.z_card_width ]]]'
        - border-radius: 0 !important
      custom_fields:
        button_grid:
          - position: absolute
          - top: 0px
          - left: 0px
    custom_fields:
      button_grid:
        card:
          type: custom:layout-card
          layout_type: custom:grid-layout
          layout:
            grid-template-columns: >-
              [[[ return variables.grid.template_columns || "repeat(" +
              variables.y_grid_X + ", " + variables.button.variables.card.width
              + ")"; ]]]
            grid-auto-rows: >-
              [[[ return variables.grid.auto_rows ||
              variables.button.variables.card.height; ]]]
            grid-gap: '[[[ return variables.grid.gap; ]]]'
            card_margin: 0
            padding: 0
            margin: '-4px -4px 0px -4px'
          cards: |
            [[[
              let resultArray = [];
              for (let x = 1; x <= variables.y_total_cards; x++) {
                let cardObject = variables.grid.buttons && variables.grid.buttons[x-1] ? variables.grid.buttons[x-1] : {};
                let defaultVariables = variables.button;
                //cardObject.variables = {...defaultVariables, ...cardObject.variables};
                cardObject = variables.__deepMerge(defaultVariables, cardObject);
                let additionalObject = {
                  view_layout: {
                    show: '[[[ return variables.y_total_cards >= x ? "always" : "never"; ]]]'
                  },
                  show_label: variables.button.show_label,
                  label: variables.button.label || (((Math.floor(Math.random() * 256).toString(16).padStart(2, '0')) + "-" + (Math.floor(Math.random() * 4096).toString(16).padStart(3, '0')))),
                };
                //resultArray.push({...additionalObject, ...cardObject});
                resultArray.push(variables.__deepMerge({...additionalObject}, cardObject));
              }
              return resultArray;
            ]]]
  cb-lcars-callout-base:
    variables:
      card:
        border:
          top:
            left_radius: 0
            right_radius: 0
          bottom:
            left_radius: 0
            right_radius: 0
    styles:
      label:
        - border-top-right-radius: 0px
        - border-top-left-radius: 0px
        - border-bottom-right-radius: 0px
        - border-bottom-left-radius: 0px
  cb-lcars-header-callout:
    template:
      - cb-lcars-header
      - cb-lcars-callout-base
    variables:
      card:
        border:
          top:
            size: 10px
          left:
            size: 10px
  cb-lcars-header-callout-right:
    template:
      - cb-lcars-header-right
      - cb-lcars-callout-base
    variables:
      card:
        border:
          top:
            size: 10px
          right:
            size: 10px
  cb-lcars-footer-callout:
    template:
      - cb-lcars-footer
      - cb-lcars-callout-base
    variables:
      card:
        border:
          bottom:
            size: 10px
          left:
            size: 10px
  cb-lcars-footer-callout-right:
    template:
      - cb-lcars-footer-right
      - cb-lcars-callout-base
    variables:
      card:
        border:
          bottom:
            size: 10px
          right:
            size: 10px
  cb-lcars-theme:
    template:
        - cb-lcars-functions
        - cb-lcars-defs
    triggers_update:
      - '[[[ return variables.___helpers.alert_condition ]]]'
    custom_fields:
      colors: |
        [[[
          const themes = variables.__defs.themes;
          let alertCondition = 'green'; // Default to 'green'
          if (variables.___helpers && variables.___helpers.alert_condition) {
            const entityState = states[variables.___helpers.alert_condition];
            if (entityState) {
              alertCondition = entityState.state.toLowerCase();
            } else {
              variables.__cblcarsLog('error', `Entity ${variables.___helpers.alert_condition} does not exist - defaulting to condition ${alertCondition}!`);
            }
          }
          const selectedTheme = themes[`${alertCondition}_alert`];
          //console.debug(variables.__defs.debug_title,'Setting alert condition ${alertCondition}'); 
          variables.__cblcarsLog('info',`Setting alert condition ${alertCondition}`);
          const colors = selectedTheme.colors;
          for (const [colorGroup, colorValues] of Object.entries(colors)) {
            for (const [colorName, colorValue] of Object.entries(colorValues)) {
              const cssVarName = `--${colorName}`;
              //if (getComputedStyle(document.documentElement).getPropertyValue(cssVarName).trim()) {
                //console.debug(variables.__defs.debug_title,`Setting ${cssVarName}=${colorValue}`);
                variables.__cblcarsLog('debug',`Setting ${cssVarName}=${colorValue}`);
                document.documentElement.style.setProperty(cssVarName, colorValue);
              //}
            }
          }
        ]]]
      font: |
        [[[
          variables.__cblcarsLog('debug', `Adding link to font from: ${variables.__defs.font_url}`);
          const existingLink = document.querySelector(`link[href="${variables.__defs.font_url}"]`);
          if (!existingLink) {
            const link = document.createElement('link'); 
            link.href = variables.__defs.font_url; 
            link.rel = 'stylesheet'; 
            document.head.appendChild(link);
            variables.__cblcarsLog('debug', `Added link to font from: ${variables.__defs.font_url}`);
          } else {
            variables.__cblcarsLog('debug', `Font link already exists: ${variables.__defs.font_url}`);
          } 
        ]]]
    styles:
      custom_fields:
        colors:
          - height: 0
          - width: 0
          - visibility: hidden
        font:
          - height: 0
          - width: 0
          - visibility: hidden 
  cb-lcars-footer-base:
    template:
      - cb-lcars-functions
      - cb-lcars-button-base
    variables:
      label: ' '
      text:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            'on': var(--primary-text-color)
            'off': var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
      card:
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
        border:
          color: var(--lcars-card-bottom-color)
  cb-lcars-footer:
    template:
      - cb-lcars-footer-base
    show_label: true
    variables:
      card:
         border:
          left:
            size: 90px
          bottom:
            size: 20px
            left_radius: var(--ha-card-border-radius)
      text:
        label:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        state:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        name:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
    styles:
      label:
        - border-bottom-left-radius: |
            [[[
                let leftRadius = variables.card.border.bottom.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
        - border-bottom-right-radius: 0px
  cb-lcars-footer-open:
    template:
      - cb-lcars-footer-base
    show_label: true
    variables:
      card:
        border:
          bottom:
            size: 20px
  cb-lcars-footer-contained:
    template:
      - cb-lcars-footer-open
    show_label: true
    variables:
      card:
        min_height: 10px
        border:
          left:
            size: 50px
          right:
            size: 50px
          bottom:
            size: 10px
            left_radius: var(--ha-card-border-radius)
            right_radius: var(--ha-card-border-radius)
          top:
            left_radius: 0px
            right_radius: 0px
    styles:
      label:
        - border-bottom-left-radius: |
            [[[
                let leftRadius = variables.card.border.bottom.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
        - border-bottom-right-radius: |
            [[[
                let rightRadius = variables.card.border.bottom.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-footer-right:
    template:
      - cb-lcars-footer-base
    show_label: true
    variables:
      card:
        border:
          right:
            size: 90px
          bottom:
            size: 20px
            right_radius: var(--ha-card-border-radius)
      text:
        label:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        state:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        name:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
    styles:
      label:
        - border-bottom-left-radius: 0px
        - border-bottom-right-radius: |
            [[[
                let rightRadius = variables.card.border.bottom.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-base:
    template:
      - cb-lcars-functions
    label: '[[[ return variables.label ]]]'
    entity: '[[[ return variables.entity ]]]'
    variables:
      label: ' '
      text:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            'on': var(--primary-text-color)
            'off': var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
        name:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            'on': var(--primary-text-color)
            'off': var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
        state:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            'on': var(--primary-text-color)
            'off': var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
      card:
        height: null
        min_height: 10px
        width: null
        color:
          active: var(--lcars-ui-secondary)
          inactive: var(--lcars-ui-tertiary)
          background:
            default: none
            active: transparent
            inactive: transparent
        border:
          top:
            left_radius: 0px
            right_radius: 0px
            size: 0px
          bottom:
            left_radius: 0px
            right_radius: 0px
            size: 0px
          left:
            size: 0px
          right:
            size: 0px
          inner:
            factor: 2
            min_radius: 30px
            width: 35px
          color: var(--lcars-card-top-color)
      icon:
        box_size: 35px
        size: 24px
        justify: left
        color:
          default: black
          active: null
          inactive: null
          background:
            active: null
            inactive: null
    show_label: false
    show_state: false
    show_icon: false
    show_name: false
    styles:
      img_cell:
        - justify-content: '[[[ return variables.icon.justify ]]]'
      card:
        - height: '[[[ return variables.__get_num_with_unit(variables.card.height); ]]]'
        - min-height: '[[[ return variables.__get_num_with_unit(variables.card.min_height); ]]]'
        - width: '[[[ return variables.__get_num_with_unit(variables.card.width); ]]]'
        - border-top: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + (variables.card.border.top.color || variables.card.border.color);
            ]]]
        - border-left: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + (variables.card.border.left.color || variables.card.border.color);
            ]]]
        - border-right: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + (variables.card.border.right.color || variables.card.border.color);
            ]]]
        - border-bottom: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + (variables.card.border.bottom.color || variables.card.border.color);
            ]]]
        - background: '[[[ return variables.card.color.background.default ]]]'
        - border-top-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.left_radius) + " !important";
            ]]]
        - border-top-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.top.right_radius) + " !important";
            ]]]
        - border-bottom-left-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " !important";
            ]]]
        - border-bottom-right-radius: |
            [[[
              return variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " !important";
            ]]]
        - position: relative
      label:
        - display: flex
        - justify-content: '[[[ return variables.text.label.justify ]]]'
        - align-items: '[[[ return variables.text.label.align_items ]]]'
        - text-transform: '[[[ return variables.text.label.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.label.padding.left) + " - " + variables.__get_num_with_unit(variables.text.label.padding.right) + ")"; ]]]
        - height: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.label.padding.top) + " - " + variables.__get_num_with_unit(variables.text.label.padding.bottom) + ")"; ]]]
        - color: '[[[ return variables.text.label.color.default ]]]'
        - font-size: |
            [[[
              return variables.__get_num_with_unit(variables.text.label.font_size);
            ]]]
        - font-weight: '[[[ return variables.text.label.font_weight ]]]'
        - font-family: '''Antonio'', Arial, sans-serif'
        - justify-self: start
        - text-align: '[[[ return variables.text.label.align ]]]'
        - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.top) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.left) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.right) ]]]'
        - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.label.padding.bottom) ]]]'
        - outline: >-
            [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.border.color; ]]]
      state:
        - display: flex
        - justify-content: '[[[ return variables.text.state.justify ]]]'
        - align-items: '[[[ return variables.text.state.align_items ]]]'
        - text-transform: '[[[ return variables.text.state.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.state.padding.left) + " - " + variables.__get_num_with_unit(variables.text.state.padding.right) + ")"; ]]]
        - height: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.state.padding.top) + " - " + variables.__get_num_with_unit(variables.text.state.padding.bottom) + ")"; ]]]
        - color: '[[[ return variables.text.state.color.default ]]]'
        - font-size: |
            [[[
              return variables.__get_num_with_unit(variables.text.state.font_size);
            ]]]
        - font-weight: '[[[ return variables.text.state.font_weight ]]]'
        - font-family: '''Antonio'', Arial, sans-serif'
        - justify-self: start
        - text-align: '[[[ return variables.text.state.align ]]]'
        - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.top) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.left) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.right) ]]]'
        - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.state.padding.bottom) ]]]'
        - outline: >-
            [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.border.color; ]]]
      name:
        - display: flex
        - justify-content: '[[[ return variables.text.name.justify ]]]'
        - align-items: '[[[ return variables.text.name.align_items ]]]'
        - text-transform: '[[[ return variables.text.name.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.name.padding.left) + " - " + variables.__get_num_with_unit(variables.text.name.padding.right) + ")"; ]]]
        - height: >-
            [[[ return "calc(100% - " + variables.__get_num_with_unit(variables.text.name.padding.top) + " - " + variables.__get_num_with_unit(variables.text.name.padding.bottom) + ")"; ]]]
        - color: '[[[ return variables.text.name.color.default ]]]'
        - font-size: |
            [[[
                return variables.__get_num_with_unit(variables.text.name.font_size);
            ]]]
        - font-weight: '[[[ return variables.text.name.font_weight ]]]'
        - font-family: '''Antonio'', Arial, sans-serif'
        - justify-self: start
        - text-align: '[[[ return variables.text.name.align ]]]'
        - padding-top: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.top) ]]]'
        - padding-left: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.left) ]]]'
        - padding-right: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.right) ]]]'
        - padding-bottom: '[[[ return variables.__get_num_with_unit(variables.text.name.padding.bottom) ]]]'
        - outline: >-
            [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.border.color; ]]]
    state:
      - value: 'on'
        id: state_on
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.active;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.active;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.active;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.active;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.active; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.active || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.active || variables.card.color.background.active ]]]
      - value: 'off'
        id: state_off
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - border-top: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.top.size) + " solid " + variables.card.color.inactive;
                ]]]
            - border-left: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.left.size) + " solid " + variables.card.color.inactive;
                ]]]
            - border-right: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.right.size) + " solid " + variables.card.color.inactive;
                ]]]
            - border-bottom: |
                [[[
                  return variables.__get_num_with_unit(variables.card.border.bottom.size) + " solid " + variables.card.color.inactive;
                ]]]
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
            - outline: >-
                [[[ return variables.__get_num_with_unit(variables.card.border.inner.width) + " solid " + variables.card.color.inactive; ]]]
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive || variables.card.color.background.inactive ]]]
      - value: open
        id: state_open
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - color: '[[[ return variables.card.color.active ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - value: closed
        id: state_closed
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - color: '[[[ return variables.card.color.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
      - value: heat
        id: state_heat
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.hvac_heat ]]]'
          label:
            - color: '[[[ return variables.text.label.color.hvac_heat ]]]'
          name:
            - color: '[[[ return variables.text.name.color.hvac_heat ]]]'
      - value: cool
        id: state_cool
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.hvac_cool ]]]'
          label:
            - color: '[[[ return variables.text.label.color.hvac_cool ]]]'
          name:
            - color: '[[[ return variables.text.name.color.hvac_cool ]]]'
      - operator: template
        value: |
          [[[
            return entity !== undefined && ['00', '0'].includes(states[entity.entity_id].state);
          ]]]
        id: state_zero
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.zero ]]]'
          label:
            - color: '[[[ return variables.text.label.color.zero ]]]'
          name:
            - color: '[[[ return variables.text.name.color.zero ]]]'
      - operator: template
        value: |
          [[[
            return entity !== undefined && states[entity.entity_id].state !== '0';
          ]]]
        id: state_nonzero
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.non_zero ]]]'
          label:
            - color: '[[[ return variables.text.label.color.non_zero ]]]'
          name:
            - color: '[[[ return variables.text.name.color.non_zero ]]]'
      - operator: default
        id: state_default
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.default ]]]'
          label:
            - color: '[[[ return variables.text.label.color.default ]]]'
          name:
            - color: '[[[ return variables.text.name.color.default ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive || variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive || variables.card.color.background.inactive ]]]
  cb-lcars-label:
    template:
      - cb-lcars-base
    show_label: true
    variables:
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px');
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px');
          ]]]
        min_height: 40px
        color:
          background:
            inactive: transparent
      text:
        label:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
          color:
            'on': var(--lcars-green)
            'off': var(--lcars-blue)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
        state:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
          color:
            'on': var(--lcars-green)
            'off': var(--lcars-blue)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
        name:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
          color:
            'on': var(--lcars-green)
            'off': var(--lcars-blue)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
  cb-lcars-dpad:
    template:
      - cb-lcars-functions
    variables:
      __defs_dpad:
        color:
          background:
            active: |
              [[[ return getComputedStyle(document.body).getPropertyValue("--lcars-ui-tertiary") ]]]
            inactive: |
              [[[ return getComputedStyle(document.body).getPropertyValue("--lcars-ui-secondary") ]]]
      card:
        size: |
          [[[
            return variables.__getParentDimension(this,'width','px') || '300px';
          ]]]
      dpad:
        color:
          background: '#1111ee'
        button:
          scale: 6.5
          min_height: 10px
          color:
            ripple: |
              [[[ return getComputedStyle(document.body).getPropertyValue("--state-color") ]]]
        up:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
        down:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
        left:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
        right:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
        center:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
        up_left:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
        up_right:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
        down_left:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
        down_right:
          color:
            background:
              inactive: |
                [[[ return variables.__defs_dpad.color.background.active ]]]
              active: |
                [[[ return variables.__defs_dpad.color.background.inactive ]]]
            overlay:
              default: transparent
              active: transparent
              inactive: transparent
          show_name: false
          show_state: false
          show_label: true
          label: null
          entity: null
          active_state: 'on'
    triggers_update:
      - '[[[ return variables.dpad.up.entity; ]]]'
      - '[[[ return variables.dpad.down.entity; ]]]'
      - '[[[ return variables.dpad.left.entity; ]]]'
      - '[[[ return variables.dpad.right.entity; ]]]'
      - '[[[ return variables.dpad.center.entity; ]]]'
      - '[[[ return variables.dpad.up_left.entity; ]]]'
      - '[[[ return variables.dpad.up_right.entity; ]]]'
      - '[[[ return variables.dpad.down_left.entity; ]]]'
      - '[[[ return variables.dpad.down_right.entity; ]]]'
    styles:
      card:
        - height: '[[[ return variables.card.size ]]]'
        - width: '[[[ return variables.card.size ]]]'
        - background: |
            [[[
              let button_ripple_color = variables.dpad.button.color.ripple;
              let svg_dpad_up_bg = (variables.dpad.up.entity && states[variables.dpad.up.entity] && states[variables.dpad.up.entity].state === variables.dpad.up.active_state) ? variables.dpad.up.color.background.active : variables.dpad.up.color.background.inactive;
              let svg_dpad_down_bg = (variables.dpad.down.entity && states[variables.dpad.down.entity] && states[variables.dpad.down.entity].state === variables.dpad.down.active_state) ? variables.dpad.down.color.background.active : variables.dpad.down.color.background.inactive;
              let svg_dpad_left_bg = (variables.dpad.left.entity && states[variables.dpad.left.entity] && states[variables.dpad.left.entity].state === variables.dpad.left.active_state) ? variables.dpad.left.color.background.active : variables.dpad.left.color.background.inactive;
              let svg_dpad_right_bg = (variables.dpad.right.entity && states[variables.dpad.right.entity] && states[variables.dpad.right.entity].state === variables.dpad.right.active_state) ? variables.dpad.right.color.background.active : variables.dpad.right.color.background.inactive;
              let svg_dpad_center_bg = (variables.dpad.center.entity && states[variables.dpad.center.entity] && states[variables.dpad.center.entity].state === variables.dpad.center.active_state) ? variables.dpad.center.color.background.active : variables.dpad.center.color.background.inactive;
              let svg_dpad_up_left_bg = (variables.dpad.up_left.entity && states[variables.dpad.up_left.entity] && states[variables.dpad.up_left.entity].state === variables.dpad.up_left.active_state) ? variables.dpad.up_left.color.background.active : variables.dpad.up_left.color.background.inactive;
              let svg_dpad_up_right_bg = (variables.dpad.up_right.entity && states[variables.dpad.up_right.entity] && states[variables.dpad.up_right.entity].state === variables.dpad.up_right.active_state) ? variables.dpad.up_right.color.background.active : variables.dpad.up_right.color.background.inactive;
              let svg_dpad_down_left_bg = (variables.dpad.down_left.entity && states[variables.dpad.down_left.entity] && states[variables.dpad.down_left.entity].state === variables.dpad.down_left.active_state) ? variables.dpad.down_left.color.background.active : variables.dpad.down_left.color.background.inactive;
              let svg_dpad_down_right_bg = (variables.dpad.down_right.entity && states[variables.dpad.down_right.entity] && states[variables.dpad.down_right.entity].state === variables.dpad.down_right.active_state) ? variables.dpad.down_right.color.background.active : variables.dpad.down_right.color.background.inactive;
              let svg_background_color = variables.dpad.color.background;
              let svgString = `<?xml version="1.0" encoding="UTF-8"?>
              <svg width="80mm" height="80mm" version="1.1" viewBox="0 0 80 80" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xlink="http://www.w3.org/1999/xlink">
                <metadata>
                <rdf:RDF>
                  <cc:Work rdf:about="">
                  <dc:format>image/svg+xml</dc:format>
                  <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
                  <dc:title/>
                  </cc:Work>
                </rdf:RDF>
                </metadata>
                <defs>
                  <style type="text/css"><![CDATA[
                  .lcars-svg-bg {
                  fill: ${svg_background_color};
                  }
                  .lcars-d-pad-bg {
                  fill: ${button_ripple_color};
                  }
                  .lcars-dpad-left-bg {
                  fill: ${svg_dpad_left_bg};
                  }
                  .lcars-dpad-right-bg {
                  fill: ${svg_dpad_right_bg};
                  }
                  .lcars-dpad-up-bg {
                  fill: ${svg_dpad_up_bg};
                  }
                  .lcars-dpad-down-bg {
                  fill: ${svg_dpad_down_bg};
                  }
                  .lcars-dpad-center-bg {
                  fill: ${svg_dpad_center_bg};
                  }
                  .lcars-dpad-up-left-bg {
                  fill: ${svg_dpad_up_left_bg};
                  }
                  .lcars-dpad-up-right-bg {
                  fill: ${svg_dpad_up_right_bg};
                  }
                  .lcars-dpad-down-left-bg {
                  fill: ${svg_dpad_down_left_bg};
                  }
                  .lcars-dpad-down-right-bg {
                  fill: ${svg_dpad_down_right_bg};
                  }
                  ]]></style>
                </defs>
                <g transform="translate(0,-217)">
                <path id="path892" d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-up-left-bg"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-up-right-bg" transform="matrix(-1, 0, 0, 1, 80, 0.0000019179001355951186)"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-down-left-bg" transform="matrix(1, 0, 0, -1, -8.208900226236437e-8, 514)"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-down-right-bg" transform="matrix(-1, 0, 0, -1, 80, 514)"></path>
                <path d="m34 227h12v-9.5c-3.8785-0.47437-8.044-0.4824-12 0z" class="lcars-dpad-up-bg"/>
                <path d="m44.2 219.2v5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m10 263v-12h-9.5c-0.47437 3.8785-0.4824 8.044 0 12z" class="lcars-dpad-left-bg"/>
                <path d="m2.199 252.8h5.0271" style="fill:none;opacity:.889;stroke-width:1.2;stroke:#000"/>
                <path d="m70 251v12h9.5c0.47437-3.8785 0.4824-8.044 0-12z" class="lcars-dpad-right-bg"/>
                <path d="m77.801 261.2h-5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m46 287h-12v9.5c3.8785 0.47437 8.044 0.4824 12 0z" class="lcars-dpad-down-bg"/>
                <path d="m35.8 294.8v-5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m11 251v12h23v23h12v-23h23v-12h-23v-23h-12v23z" class="lcars-dpad-center-bg"/>
                <path d="m34 230.49h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 233.2h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 236.48h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 244.9h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 276h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                </g>
              </svg>`;
              let encodedSvgString = encodeURIComponent(svgString);
              let backgroundImage = `url('data:image/svg+xml,${encodedSvgString}')`;
              return backgroundImage;
            ]]]
        - background-position: center
        - background-size: '[[[ return variables.card.size ]]]'
        - background-color: none
      custom_fields:
        dpad_up_button:
          - position: absolute
          - top: 0px
          - left: >
              [[[ return "calc((" + variables.card.size + "/2) - (" +
              variables.card.size + " / " + variables.dpad.button.scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_down_button:
          - position: absolute
          - bottom: 0px
          - left: >
              [[[ return "calc((" + variables.card.size + "/2) - (" +
              variables.card.size + " / " + variables.dpad.button.scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_left_button:
          - position: absolute
          - left: 0px
          - top: >
              [[[ return "calc((" + variables.card.size + "/2) - (" +
              variables.card.size + " / " + variables.dpad.button.scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_right_button:
          - position: absolute
          - right: 0px
          - top: >
              [[[ return "calc((" + variables.card.size + "/2) - (" +
              variables.card.size + " / " + variables.dpad.button.scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_center_button:
          - position: absolute
          - right: |
              [[[ return "calc(" + variables.card.size + " /4 )";]]]
          - top: >
              [[[ return "calc((" + variables.card.size + "/2) - (" +
              variables.card.size + " / " + variables.dpad.button.scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_up_left_button:
          - position: absolute
          - top: 0px
          - left: 0px
          - z-index: 99
        dpad_up_right_button:
          - position: absolute
          - top: 0px
          - right: 0px
          - z-index: 99
        dpad_down_left_button:
          - position: absolute
          - bottom: 0px
          - left: 0px
          - z-index: 99
        dpad_down_right_button:
          - position: absolute
          - bottom: 0px
          - right: 0px
          - z-index: 99
    custom_fields:
      dpad_center_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad.center.entity; ]]]'
          label: '[[[ return variables.dpad.center.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: |
                [[[ return "calc(" + variables.card.size + " /2 )";]]]
              height: |
                [[[ return "calc(" + variables.card.size + " / " +
                variables.dpad.button.scale + " )";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.center.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.center.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.center.color.overlay.inactive ]]]'
      dpad_up_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad.up.entity; ]]]'
          label: '[[[ return variables.dpad.up.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: >
                [[[ return "calc(" + variables.card.size + " / " +
                variables.dpad.button.scale + ")";]]]
              height: |
                [[[ return "calc(" + variables.card.size + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.up.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.up.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.up.color.overlay.inactive ]]]'
      dpad_down_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad.down.entity; ]]]'
          label: '[[[ return variables.dpad.down.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: >
                [[[ return "calc(" + variables.card.size + " / " +
                variables.dpad.button.scale + ")";]]]
              height: |
                [[[ return "calc(" + variables.card.size + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.down.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.down.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.down.color.overlay.inactive ]]]'
      dpad_left_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad.left.entity; ]]]'
          label: '[[[ return variables.dpad.left.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: >
                [[[ return "calc(" + variables.card.size + " / " +
                variables.dpad.button.scale + ")";]]]
              height: |
                [[[ return "calc(" + variables.card.size + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.left.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.left.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.left.color.overlay.inactive ]]]'
      dpad_right_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad.right.entity; ]]]'
          label: '[[[ return variables.dpad.right.label ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              min_height: '[[[ return variables.dpad.button.min_height; ]]]'
              width: >
                [[[ return "calc(" + variables.card.size + " / " +
                variables.dpad.button.scale + ")";]]]
              height: |
                [[[ return "calc(" + variables.card.size + " / " +
                variables.dpad.button.scale + ")";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.right.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.right.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.right.color.overlay.inactive ]]]'
      dpad_up_left_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad.up_left.entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              width: |
                [[[ return "calc(" + variables.card.size + " / 2)";]]]
              height: |
                [[[ return "calc(" + variables.card.size + " / 2)";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.up_left.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.up_left.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.up_left.color.overlay.inactive ]]]'
              border:
                top:
                  left_radius: |
                    [[[ return "calc(" + variables.card.size + " / 2)";]]]
          label: '[[[ return variables.dpad.up_left.label ]]]'
          show_name: '[[[ return variables.dpad.up_left.show_name ]]]'
          show_label: '[[[ return variables.dpad.up_left.show_label]]]'
          show_state: '[[[ return variables.dpad.up_left.show_state ]]]'
      dpad_up_right_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad.up_right.entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              width: |
                [[[ return "calc(" + variables.card.size + " / 2)";]]]
              height: |
                [[[ return "calc(" + variables.card.size + " / 2)";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.up_right.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.up_right.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.up_right.color.overlay.inactive ]]]'
              border:
                top:
                  right_radius: |
                    [[[ return "calc(" + variables.card.size + " / 2)";]]]
          label: '[[[ return variables.dpad.up_right.label ]]]'
          show_name: '[[[ return variables.dpad.up_right.show_name ]]]'
          show_label: '[[[ return variables.dpad.up_right.show_label]]]'
          show_state: '[[[ return variables.dpad.up_right.show_state ]]]'
      dpad_down_left_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad.down_left.entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              width: |
                [[[ return "calc(" + variables.card.size + " / 2)";]]]
              height: |
                [[[ return "calc(" + variables.card.size + " / 2)";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.down_left.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.down_left.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.down_left.color.overlay.inactive ]]]'
              border:
                bottom:
                  left_radius: |
                    [[[ return "calc(" + variables.card.size + " / 2)";]]]
          label: '[[[ return variables.dpad.down_left.label ]]]'
          show_name: '[[[ return variables.dpad.down_left.show_name ]]]'
          show_label: '[[[ return variables.dpad.down_left.show_label]]]'
          show_state: '[[[ return variables.dpad.down_left.show_state ]]]'
      dpad_down_right_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad.down_right.entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.dpad.button.color.ripple; ]]]'
            card:
              width: |
                [[[ return "calc(" + variables.card.size + " / 2)";]]]
              height: |
                [[[ return "calc(" + variables.card.size + " / 2)";]]]
              color:
                background:
                  default: '[[[ return variables.dpad.down_right.color.overlay.default ]]]'
                  active: '[[[ return variables.dpad.down_right.color.overlay.active ]]]'
                  inactive: '[[[ return variables.dpad.down_right.color.overlay.inactive ]]]'
              border:
                bottom:
                  right_radius: |
                    [[[ return "calc(" + variables.card.size + " / 2)";]]]
          label: '[[[ return variables.dpad.down_right.label ]]]'
          show_name: '[[[ return variables.dpad.down_right.show_name ]]]'
          show_label: '[[[ return variables.dpad.down_right.show_label]]]'
          show_state: '[[[ return variables.dpad.down_right.show_state ]]]'
  cb-lcars-multimeter:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
    entity: '[[[ return variables.__get_random_entity("light"); ]]]'
    triggers_update: '[[[ return variables.entity ]]]'
    variables:
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px');
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px');
          ]]]
      text:
        label:
          font_size: 24px
        state:
          font_size: 24px
        name:
          font_size: 24px
      panel:
        width: |
          [[[
            //console.log("card_width: ",variables.card.width);
            let card_width = parseFloat(variables.card.width);
            let panel_width = (card_width * 0.76);
            //console.log("panel_width: ",panel_width);
            return panel_width+"px"
          ]]]
        height: |
          [[[
            //console.log("card_height: ",variables.card.height);
            let card_height = parseFloat(variables.card.height);
            let panel_height = (card_height * 0.83);
            //console.log("panel_height: ",panel_height)
            return panel_height+"px"
          ]]]
        mode: gauge
        padding:
          top: 5px
          left: 5px
          right: 0px
          bottom: 0px
        meter: null
        slider: null
        icon_grid: null
      entity: '[[[ return entity.entity_id ]]]'
      entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
      entity_match_gauge: false
      entity_match_slider: false
      entity_match_header: false
      entity_match_slider_start: false
      entity_match_slider_end: false
      label: null
      header_button:
        variables:
          text:
            label:
              font_size: 24px
            state:
              font_size: 24px
            name:
              font_size: 24px
          card:
            color:
              active: |
                [[[ return  variables.entity_match_header ? variables.entity_color :
                "var(--lcars-ui-secondary)" ]]]
              inactive: var(--lcars-ui-primary)
              background:
                active: >
                  [[[ return  variables.entity_match_header ? variables.entity_color
                  : "var(--lcars-ui-secondary)" ]]]
                inactive: var(--lcars-ui-primary)
              border: null
          icon:
            color:
              active: null
              inactive: null
              background:
                active: null
                inactive: null
      y_panel_width_padded: >-
        [[[ return  (parseInt(variables.panel.width) -
        parseInt(variables.panel.padding.left) -
        parseInt(variables.panel.padding.right))+"px" ]]]
      y_panel_height_padded: >-
        [[[ return  (parseInt(variables.panel.height) -
        parseInt(variables.panel.padding.top) -
        parseInt(variables.panel.padding.bottom))+"px" ]]]
      y_trim_height: >-
        [[[ return "calc(" + variables.card.height + " - " + variables.panel.height
        + ")" ]]]
      y_trim_width: '[[[ return variables.panel.width ]]]'
      y_header_height: '[[[ return variables.card.height ]]]'
      y_header_width: >-
        [[[ return "calc(" + variables.card.width + " - " + variables.panel.width +
        ")" ]]]
      z_button_card:
        type: custom:button-card
        template:
          - cb-lcars-button-grid
        variables:
          card:
            width: '[[[ return variables.card.width ]]]'
            height: '[[[ return variables.card.height ]]]'
          button: '[[[ return variables.header_button ]]]'
          grid:
            auto_calc_X: false
            auto_calc_Y: false
            X: 2
            'Y': 1
            buttons:
              - variables:
                  card:
                    width: '[[[ return variables.y_header_width ]]]'
                    height: '[[[ return variables.y_header_height ]]]'
                  text: '[[[ return variables.text ]]]'
                show_label: true
                label: '[[[ return variables.label ]]]'
                template:
                  - cb-lcars-button-picard-filled
                entity: '[[[ return variables.entity ]]]'
              - variables:
                  card:
                    width: '[[[ return variables.y_trim_width ]]]'
                    height: '[[[ return variables.y_trim_height ]]]'
                    min_height: '[[[ return variables.y_trim_height ]]]'
                show_label: false
                entity: '[[[ return variables.entity ]]]'
            template_columns: >-
              [[[ return  variables.y_header_width + " " + variables.y_trim_width
              ]]]
            gap: 0px
      z_gauge_card:
        type: custom:button-card
        template:
          - cb-lcars-slider-horizontal-gauge
        variables:
          card:
            height: '[[[ return variables.panel.height ]]]'
            width: '[[[ return variables.panel.width ]]]'
          entity: '[[[ return variables.entity ]]]'
          entity_match_slider: '[[[ return variables.entity_match_slider ]]]'
          slider: |
            [[[
            let sliderObject = (variables.panel && variables.panel.slider) ?
            variables.panel.slider : {};
            let defaultVariables = {
              variables: {
                step: 1
              }
            };
            //meterObject = {...defaultVariables, ...meterObject};
            sliderObject = variables.__deepMerge(defaultVariables,sliderObject);
            return sliderObject;
            ]]]
          gauge: |
            [[[
            let gaugeObject = (variables.panel && variables.panel.gauge) ?
            variables.panel.gauge : {};
            let defaultVariables = {
              "show_sub_meter": true,
              "meter": {
                  "variables": {
                    "button": {
                        "variables": {
                          "text": {
                              "label": {
                                "color": {
                                    "off": variables.header_button.variables.card.color.background.inactive,
                                    "on": variables.entity_match_gauge ? variables.entity_color : "var(--lcars-ui-secondary)"
                                }
                              }
                          },
                          "card": {
                              "color": {
                                "inactive": variables.header_button.variables.card.color.background.inactive,
                                "active": variables.entity_match_gauge ? variables.entity_color : "var(--lcars-ui-secondary)"
                              }
                          }
                        }
                    }
                  }
              },
              "sub_meter": {
                  "variables": {
                    "button": {
                        "variables": {
                          "text": {
                              "label": {
                                "color": {
                                    "off": variables.header_button.variables.card.color.background.inactive,
                                    "on": variables.entity_match_gauge ? variables.entity_color : "var(--lcars-ui-secondary)"
                                }
                              }
                          },
                          "card": {
                              "color": {
                                "inactive": variables.header_button.variables.card.color.background.inactive,
                                "active": variables.entity_match_gauge ? variables.entity_color : "var(--lcars-ui-secondary)"
                              }
                          }
                        }
                    }
                  }
              }
            };
            //meterObject = {...defaultVariables, ...meterObject};
            gaugeObject = variables.__deepMerge(defaultVariables,gaugeObject);
            return gaugeObject;
            ]]]
      z_slider_card:
        type: custom:button-card
        template:
          - cb-lcars-functions
          - cb-lcars-slider-horizontal
        variables:
          card:
            height: '[[[ return variables.y_panel_height_padded ]]]'
            width: '[[[ return variables.y_panel_width_padded ]]]'
          entity: '[[[ return variables.entity ]]]'
          entity_match_slider_start: '[[[ return variables.entity_match_slider_start ]]]'
          entity_match_slider_end: '[[[ return variables.entity_match_slider_end ]]]'
          meter: |
            [[[
            let meterObject = (variables.panel && variables.panel.meter) ?
            variables.panel.meter : {};
            let defaultVariables = {
              variables: {
                button: {
                  template: "cb-lcars-button-picard-filled",
                  variables: {
                    card: {
                      height: variables.y_panel_height_padded,
                      },
                    },
                }
              }
            };
            //meterObject = {...defaultVariables, ...meterObject};
            meterObject = variables.__deepMerge(defaultVariables,meterObject);
            return meterObject;
            ]]]
          slider: |
            [[[
            let sliderObject = (variables.panel && variables.panel.slider) ?
            variables.panel.slider : {};
            let defaultVariables = {
              variables: {
                step: 1
              }
            };
            //meterObject = {...defaultVariables, ...meterObject};
            sliderObject = variables.__deepMerge(defaultVariables,sliderObject);
            return sliderObject;
            ]]]
      z_icon_grid:
        type: custom:button-card
        template:
          - cb-lcars-button-grid-icons
        variables: >
          [[[
          let iconObject = (variables.panel.icon_grid &&
          variables.panel.icon_grid.variables) ? variables.panel.icon_grid.variables
          : {};
          let defaultVariables = {
            card: {
              height: variables.y_panel_height_padded,
              width: variables.y_panel_width_padded,
              },
            grid: {
              gap: "9px",
            },
              button: {
              variables: {
                card: {
                  width: "45px",
                  height: "45px"
                }
              }
            }
          };
          iconObject = variables.__deepMerge(defaultVariables,iconObject);
          return iconObject;
          ]]]
    styles:
      card:
        - background: none
        - width: '[[[ return variables.card.width; ]]]'
        - height: '[[[  return variables.card.height; ]]]'
        - border-radius: 0 !important
      custom_fields:
        panel:
          - position: absolute
          - right: 0px
          - bottom: 0px
        button:
          - position: absolute
          - left: 0px
          - top: 0px
    custom_fields:
      button:
        card: '[[[ return variables.z_button_card ]]]'
      panel:
        card: |
          [[[
          let panel_card;
          switch (variables.panel.mode) {
            case 'icons':
            case 'icon_grid':
              panel_card = variables.z_icon_grid;
              break;
            case 'slider':
              panel_card = variables.z_slider_card;
              break;
            case 'gauge':
              panel_card = variables.z_gauge_card;
              break;
            default:
              panel_card = null;
          }
          return panel_card;
          ]]]
  cb-lcars-button-lozenge:
    template: cb-lcars-button-base
    variables:
      card:
        border:
          top:
            left_radius: null
            right_radius: null
          bottom:
            left_radius: null
            right_radius: null
  cb-lcars-button-lozenge-right:
    template: cb-lcars-button-lozenge
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        justify: right
        border:
          left:
            size: 6px
            color: black
            padding: 1.0%
            margin: 0
          right:
            size: 6px
            color: transparent
            padding: 1.0%
            margin: null
  cb-lcars-button-bullet:
    template: cb-lcars-button-lozenge
    variables:
      card:
        border:
          top:
            left_radius: 0px
          bottom:
            left_radius: 0px
  cb-lcars-button-bullet-right:
    template: cb-lcars-button-lozenge-right
    variables:
      card:
        border:
          top:
            right_radius: 0px
          bottom:
            right_radius: 0px
  cb-lcars-button-capped:
    template: cb-lcars-button-lozenge
    variables:
      card:
        border:
          top:
            right_radius: 0px
          bottom:
            right_radius: 0px
  cb-lcars-button-capped-right:
    template: cb-lcars-button-lozenge-right
    variables:
      card:
        border:
          top:
            left_radius: 0px
          bottom:
            left_radius: 0px
  cb-lcars-slider:
    template:
      - cb-lcars-card-base
      - cb-lcars-functions
    entity: '[[[ return variables.__get_random_entity("light"); ]]]'
    triggers_update: '[[[ return variables.entity ]]]'
    variables:
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px');
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px');
          ]]]
      entity: '[[[ return entity.entity_id ]]]'
      entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
      entity_match_slider_start: false
      entity_match_slider_end: false
      meter:
        template:
          - cb-lcars-meter
        variables:
          gradient_start_color: >
            [[[ return  variables.entity_match_slider_start ?
            variables.entity_color :
            "var(--error-color)" ]]]
          gradient_end_color: >
            [[[ return  variables.entity_match_slider_end ?
            variables.entity_color :
            "var(--success-color)" ]]]
          card:
            height: '[[[ return variables.card.height ]]]'
            width: '[[[ return variables.card.width ]]]'
          button:
            variables:
              card:
                height: 15px
                width: '[[[ return variables.card.width ]]]'
      slider:
        variables:
          mask_color: rgb(0,0,0,0.8)
          step: 1
    styles:
      card:
        - width: '[[[ return variables.card.width ]]]'
        - height: '[[[ return variables.card.height ]]]'
        - border-radius: 0 !important
        - background: none
      custom_fields:
        meter:
          - position: absolute
          - left: 0px
          - top: 0px
        slider:
          - position: absolute
          - left: 0px
          - top: 0px
          - z-index: 1
          - width: '[[[ return variables.card.width ]]]'
          - height: '[[[ return variables.card.height ]]]'
    custom_fields:
      meter:
        card:
          type: custom:button-card
          template: '[[[ return variables.meter.template ]]]'
          variables: '[[[ return variables.meter.variables ]]]'
      slider:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: brightness
          flipped: true
          inverse: true
          vertical: true
          step: '[[[ return variables.slider.variables.step; ]]]'
          styles:
            card:
              - width: '[[[ return variables.card.width ]]]'
              - height: '[[[ return variables.card.height ]]]'
              - background: none
              - border-radius: 0
            progress:
              - background-color: '[[[ return variables.slider.variables.mask_color; ]]]'
            container:
              - border-radius: 0
            track:
              - background: none
            thumb:
              - background: none
  cb-lcars-slider-horizontal:
    template:
      - cb-lcars-slider
    entity: '[[[ return variables.__get_random_entity("light"); ]]]'
    variables:
      meter:
        template: cb-lcars-meter-horizontal
        variables:
          _gradient:
            gap: 5px
          button:
            template: cb-lcars-button-picard-filled
            variables:
              card:
                height: '[[[ return variables.card.height ]]]'
                width: 10px
    triggers_update: '[[[ return variables.entity  ]]]'
    custom_fields:
      slider:
        card:
          vertical: false
  cb-lcars-button-base:
    template:
      - cb-lcars-base
      - cb-lcars-actions-toggle
    show_icon: false
    show_name: false
    show_label: true
    variables:
      label: |
        [[[
          return (((Math.floor(Math.random() * 256).toString(16).padStart(2, '0')) + "-" + (Math.floor(Math.random() * 4096).toString(16).padStart(3, '0'))))
        ]]]
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px',{ height: 56, width: 200 });
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px',{ height: 56, width: 200 });
          ]]]
        min_height: 45px
        color:
          active: "var(--lcars-card-button, var(--picard-medium-light-gray))"
          inactive: "var(--lcars-card-button-off, var(--picard-gray))"
          background:
            default: null
            active: "var(--lcars-card-button, var(--picard-medium-light-gray))"
            inactive: "var(--lcars-card-button-off, var(--picard-gray))"
      text:
        label:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            'on': black
            'off': black
            zero: black
            non_zero: black
        state:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            'on': black
            'off': black
            zero: black
            non_zero: black
        name:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            'on': black
            'off': black
            zero: black
            non_zero: black
      icon:
        size: 24px
        color:
          default: black
        justify: left
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          right:
            size: 6px
            color: black
            padding: 1.0%
            margin: 0
          left:
            size: 6px
            color: transparent
            padding: 1.0%
            margin: null
    size: 1.75em
    styles:
      grid:
        - grid-template-areas: '"i n" "i s" "i l"'
      icon:
        - color: '[[[ return variables.icon.color.default ]]]'
        - display: flex
        - align-items: center
        - justify-content: left
        - height: '[[[ return variables.card.height || variables.card.min_height; ]]]'
        - border-left: >-
            [[[ return variables.icon.border.left.color + " solid " +
            variables.icon.border.left.size ]]]
        - border-right: >-
            [[[ return variables.icon.border.right.color + " solid " +
            variables.icon.border.right.size ]]]
        - '--mdc-icon-size': '[[[ return variables.icon.size; ]]]'
        - margin-left: '[[[ return variables.icon.border.left.margin ]]]'
        - margin-right: '[[[ return variables.icon.border.right.margin ]]]'
        - padding-left: '[[[ return variables.icon.border.left.padding ]]]'
        - padding-right: '[[[ return variables.icon.border.right.padding ]]]'
  cb-lcars-footer-picard:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
    variables:
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px');
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px');
          ]]]
        border:
          top:
            left_radius: 0px !important
            right_radius: 0px !important
          bottom:
            left_radius: var(--ha-card-border-radius)
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: ' '
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 0
          left:
            size: 180px
          bottom:
            size: 20px
          right:
            size: 0
      lcars_outer:
        card:
          color: var(--lcars-card-bottom-color)
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
      lcars_inner:
        text: '[[[ return variables.text ? variables.text : {} ]]]'
        card:
          color: var(--lcars-card-bottom-color)
          border:
            left:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              left_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.bottom.left_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.__get_num_with_unit(variables.card.height); ]]]'
        - width: '[[[ return variables.__get_num_with_unit(variables.card.width); ]]]'
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - bottom: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - bottom: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - left: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:button-card
          template:
            - cb-lcars-footer
          variables:
            entity: '[[[ return variables.entity; ]]]'
            card:
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                bottom:
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size);
                    ]]]
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size);
                    ]]]
                  right_radius: 0px
                inner:
                  factor: '[[[ return variables.card.border.inner.factor; ]]]'
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
                color: '[[[ return variables.lcars_outer.card.color ]]]'
      lcars_inner:
        card:
          type: custom:button-card
          template:
            - cb-lcars-footer
          entity: '[[[ return variables.entity; ]]]'
          label: '[[[ return variables.label; ]]]'
          variables:
            text: '[[[ return variables.text ? variables.text : {} ]]]'
            card:
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                color: '[[[ return variables.lcars_inner.card.color ]]]'
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.left.size);
                    ]]]
                bottom:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.size);
                    ]]]
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.left_radius);
                    ]]]
                  right_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-footer-picard-right:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
    variables:
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px');
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px');
          ]]]
        border:
          top:
            left_radius: 0px !important
            right_radius: 0px !important
          bottom:
            left_radius: 0px !important
            right_radius: var(--ha-card-border-radius)
          inner:
            factor: 1
            width: 35px
      label: ' '
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 0
          left:
            size: 0
          bottom:
            size: 20px
          right:
            size: 180px
      lcars_outer:
        card:
          color: var(--lcars-card-bottom-color)
          border:
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
      lcars_inner:
        text: '[[[ return variables.text ? variables.text : {} ]]]'
        card:
          color: var(--lcars-card-bottom-color)
          border:
            right:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            bottom:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.bottom.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              right_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.bottom.right_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.__get_num_with_unit(variables.card.height); ]]]'
        - width: '[[[ return variables.__get_num_with_unit(variables.card.width); ]]]'
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - bottom: 0
          - right: 0
        lcars_inner:
          - position: absolute
          - bottom: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - right: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:button-card
          template:
            - cb-lcars-footer-right
          entity: '[[[ return variables.entity; ]]]'
          variables:
            card:
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                bottom:
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.bottom.size);
                    ]]]
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size);
                    ]]]
                  left_radius: 0px
                inner:
                  factor: '[[[ return variables.card.border.inner.factor; ]]]'
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
                color: '[[[ return variables.lcars_outer.card.color ]]]'
      lcars_inner:
        card:
          type: custom:button-card
          template:
            - cb-lcars-footer-right
          entity: '[[[ return variables.entity; ]]]'
          label: '[[[ return variables.label; ]]]'
          variables:
            text: '[[[ return variables.text ? variables.text : {} ]]]'
            card:
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                color: '[[[ return variables.lcars_inner.card.color ]]]'
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.right.size);
                    ]]]
                bottom:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.size);
                    ]]]
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.bottom.right_radius);
                    ]]]
                  left_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-button-picard-filled:
    template: cb-lcars-button-base
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            'on': black
            'off': black
            zero: var(--picard-green)
            non_zero: var(--picard-blue)
            hvac_heat: var(--picard-light-orange)
            hvac_cool: var(--picard-blue)
            hvac_other: var(--picard-black-cherry)
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            'on': black
            'off': black
            zero: var(--picard-green)
            non_zero: var(--picard-blue)
            hvac_heat: var(--picard-light-orange)
            hvac_cool: var(--picard-blue)
            hvac_other: var(--picard-black-cherry)
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            'on': black
            'off': black
            zero: var(--picard-green)
            non_zero: var(--picard-blue)
            hvac_heat: var(--picard-light-orange)
            hvac_cool: var(--picard-blue)
            hvac_other: var(--picard-black-cherry)
      icon:
        color:
          default: black
        justify: left
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          right:
            size: 6px
            color: black
            padding: 1.5%
            margin: 0
          left:
            size: 6px
            color: transparent
            padding: 0.5%
            margin: null
    state:
      - value: open
        id: state_open
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - color: '[[[ return variables.card.color.active ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - value: closed
        id: state_closed
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - color: '[[[ return variables.card.color.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
      - value: heat
        id: state_heat
        styles:
          card:
            - background-color: '[[[ return variables.text.state.color.hvac_heat ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - value: cool
        id: state_cool
        styles:
          card:
            - background-color: '[[[ return variables.text.state.color.hvac_cool ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - operator: template
        value: |
          [[[
            return entity !== undefined && ['00', '0'].includes(states[entity.entity_id].state);
          ]]]
        id: state_zero
        styles:
          card:
            - background-color: '[[[ return variables.text.state.color.zero ]]]'
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
      - operator: template
        value: |
          [[[
            return entity !== undefined && states[entity.entity_id].state !== '0';
          ]]]
        id: state_nonzero
        styles:
          card:
            - background-color: '[[[ return variables.text.state.color.non_zero ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - value: 'on'
        id: state_on
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.active ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.active ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.active ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.active ]]]
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.active ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.active ||
                variables.card.color.background.active ]]]
      - value: 'off'
        id: state_off
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.inactive ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.inactive ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.inactive ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.inactive ]]]          
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]
      - operator: default
        id: state_default
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.default ]]]'
          label:
            - color: '[[[ return variables.text.label.color.default ]]]'
          name:
            - color: '[[[ return variables.text.name.color.default ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]  
  cb-lcars-button-picard-filled-dense:
    template: cb-lcars-button-picard-filled
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-filled-right:
    template: cb-lcars-button-picard-filled
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        color:
          default: black
        justify: right
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          left:
            size: 6px
            color: black
            padding: 1.5%
            margin: 0
          right:
            size: 6px
            color: transparent
            padding: 0.5%
            margin: null
  cb-lcars-button-picard-filled-dense-right:
    template: cb-lcars-button-picard-filled-right
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-icon:
    template:
      - cb-lcars-button-picard-filled-dense
      - cb-lcars-actions-toggle
    variables:
      card:
        width: 40px
        height: 40px
        min_height: 40px
        border:
          top:
            left_radius: 10px
            right_radius: 10px
          bottom:
            left_radius: 10px
            right_radius: 10px
      icon:
        border:
          left: 0px
          right: 0px
        align-items: center
        justify: center
    styles:
      grid:
        - grid-template-areas: '"i"'
    size: 30px
    show_icon: true
    show_label: false
  cb-lcars-header-picard:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
    variables:
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px');
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px');
          ]]]
        border:
          top:
            left_radius: var(--ha-card-border-radius)
            right_radius: 0px !important
          bottom:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: ' '
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 20px
          left:
            size: 180px
          bottom:
            size: 0
          right:
            size: 0
      lcars_outer:
        card:
          color: var(--lcars-card-top-color)
          border:
            left:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
      lcars_inner:
        text: '[[[ return variables.text ? variables.text : {} ]]]'
        card:
          color: var(--lcars-card-top-color)
          border:
            left:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.left.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
              left_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.top.left_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.__get_num_with_unit(variables.card.height); ]]]'
        - width: '[[[ return variables.__get_num_with_unit(variables.card.width); ]]]'
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - top: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - left: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:button-card
          template:
            - cb-lcars-header
          entity: '[[[ return variables.entity; ]]]'
          variables:
            card:
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                top:
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.top.left_radius);
                    ]]]
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size);
                    ]]]
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.left.size);
                    ]]]
                  right_radius: 0px
                inner:
                  factor: '[[[ return variables.card.border.inner.factor; ]]]'
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
                color: '[[[ return variables.lcars_outer.card.color ]]]'
      lcars_inner:
        card:
          type: custom:button-card
          template:
            - cb-lcars-header
          entity: '[[[ return variables.entity; ]]]'
          label: '[[[ return variables.label]]]'
          variables:
            text: '[[[ return variables.text ? variables.text : {} ]]]'
            card:
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                color: '[[[ return variables.lcars_inner.card.color ]]]'
                left:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.left.size);
                    ]]]
                top:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.size);
                    ]]]
                  left_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.left_radius);
                    ]]]
                  right_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-header-picard-right:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
    variables:
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px');
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px');
          ]]]
        border:
          top:
            left_radius: 0px !important
            right_radius: var(--ha-card-border-radius)
          bottom:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      label: ' '
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 20px
          left:
            size: 0
          bottom:
            size: 0
          right:
            size: 180px
      lcars_outer:
        card:
          color: var(--lcars-card-top-color)
          border:
            right:
              size: |
                [[[
                  return "calc( ((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / " + variables.lcars.border.factor + ") * (" +
                  variables.lcars.border.factor + " - 1)" + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.top.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + ") / 2)";
                ]]]
      lcars_inner:
        text: '[[[ return variables.text ? variables.text : {} ]]]'
        card:
          color: var(--lcars-card-top-color)
          border:
            right:
              size: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.lcars.border.right.size) + " - " +
                  variables.__get_num_with_unit(variables.lcars.border.gap) + " ) / " + variables.lcars.border.factor + ")";
                ]]]
            top:
              size: |
                [[[
                  return "calc((" + variables.lcars.border.top.size + " - " +
                  variables.lcars.border.gap + ") / 2)";
                ]]]
              right_radius: |
                [[[
                  return "calc((" + variables.__get_num_with_unit(variables.card.border.top.right_radius) + " ) / " + variables.card.border.inner.factor +" )";
                ]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.__get_num_with_unit(variables.card.height); ]]]'
        - width: '[[[ return variables.__get_num_with_unit(variables.card.width); ]]]'
        - border-top-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.left_radius);
            ]]]
        - border-top-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.top.right_radius);
            ]]]
        - border-bottom-left-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.left_radius);
            ]]]
        - border-bottom-right-radius: >-
            [[[ return
            variables.__get_num_with_unit(variables.card.border.bottom.right_radius);
            ]]]
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - right: 0
        lcars_inner:
          - position: absolute
          - top: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
          - right: |
              [[[
                return "calc( (" + variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size) + " + " +
                variables.__get_num_with_unit(variables.lcars.border.gap) + ")  )";
              ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:button-card
          template:
            - cb-lcars-header-right
          entity: '[[[ return variables.entity; ]]]'
          variables:
            card:
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                top:
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.top.right_radius);
                    ]]]
                  left_radius: 0
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.top.size);
                    ]]]
                left:
                  size: 0px
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_outer.card.border.right.size);
                    ]]]
                inner:
                  factor: '[[[ return variables.card.border.inner.factor; ]]]'
                  width: |
                    [[[
                      return variables.__get_num_with_unit(variables.card.border.inner.width);
                    ]]]
                color: '[[[ return variables.lcars_outer.card.color ]]]'
      lcars_inner:
        card:
          type: custom:button-card
          template:
            - cb-lcars-header-right
          entity: '[[[ return variables.entity; ]]]'
          label: '[[[ return variables.label; ]]]'
          variables:
            text: '[[[ return variables.text ? variables.text : {} ]]]'
            card:
              width: |
                [[[
                  return variables.__get_num_with_unit(variables.card.width);
                ]]]
              height: |
                [[[
                  return variables.__get_num_with_unit(variables.card.height);
                ]]]
              border:
                color: '[[[ return variables.lcars_inner.card.color ]]]'
                right:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.right.size);
                    ]]]
                top:
                  size: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.size);
                    ]]]
                  right_radius: |
                    [[[
                      return variables.__get_num_with_unit(variables.lcars_inner.card.border.top.right_radius);
                    ]]]
                  left_radius: 0px
                inner:
                  factor: |
                    [[[
                      return variables.lcars_inner.card.border.inner.factor;
                    ]]]
  cb-lcars-button-grid-icons:
    type: custom:button-card
    template:
      - cb-lcars-button-grid
    variables:
      grid:
        X: 5
        'Y': 1
      button:
        variables:
          card:
            width: 40px
            height: 40px
        template:
          - cb-lcars-button-picard-icon
        show_icon: true
        show_label: false
  cb-lcars-button-square:
    template: cb-lcars-button-base
    show_icon: false
  cb-lcars-button-picard:
    template: cb-lcars-button-base
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.lcars_color ]]]'
            'on': '[[[ return variables.card.color.active ]]]'
            'off': '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.active ]]]'
            non_zero: '[[[ return variables.card.color.inactive ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.lcars_color ]]]'
            'on': '[[[ return variables.card.color.active ]]]'
            'off': '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.active ]]]'
            non_zero: '[[[ return variables.card.color.inactive ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.lcars_color ]]]'
            'on': '[[[ return variables.card.color.active ]]]'
            'off': '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.active ]]]'
            non_zero: '[[[ return variables.card.color.inactive ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
      icon:
        color:
          default: null
          active: '[[[ return variables.card.color.active ]]]'
          inactive: '[[[ return variables.card.color.inactive ]]]'
      card:
        border:
          top:
            size: 4px
          left:
            size: 4px
          right:
            size: 4px
          bottom:
            size: 4px
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
  cb-lcars-button-picard-dense:
    template: cb-lcars-button-picard
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-right:
    template: cb-lcars-button-picard
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        justify: right
        border:
          left:
            color: black
          right:
            color: transparent
  cb-lcars-button-picard-dense-right:
    template: cb-lcars-button-picard-right
    variables:
      card:
        height: 50px
  cb-lcars-slider-gauge:
    template:
      - cb-lcars-card-base
      - cb-lcars-functions
    entity: '[[[ return variables.__get_random_entity("light"); ]]]'
    triggers_update: '[[[ return variables.entity ]]]'
    variables:
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px', { height: 400, width: 80 });
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px', {height: 400, width: 80});
          ]]]
      entity: '[[[ return entity.entity_id ]]]'
      entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
      entity_match_slider: false
      meter:
        template:
          - cb-lcars-button-grid
        variables:
          card:
            height: '[[[ return variables.card.height ]]]'
          grid:
            X: 1
            'Y': 10
            gap: 0px
            buttons:
              - label: '100'
              - label: '90'
              - label: '80'
              - label: '70'
              - label: '60'
              - label: '50'
              - label: '40'
              - label: '30'
              - label: '20'
              - label: '10'
          button:
            show_label: true
            entity: '[[[ return variables.entity ]]]'
            triggers_update: '[[[ return variables.entity ]]]'
            template:
              - cb-lcars-button-picard
              - cb-lcars-button-picard-label-ne
            variables:
              card:
                height: |
                  [[[
                      return variables.__calculcate_grid_cell_dimension(variables.card.height, 10, 0, "20px")
                  ]]]
                width: '[[[ return variables.card.width ]]]'
                border:
                  right:
                    size: 0
                  left:
                    size: 0
                  top:
                    size: 2px
                  bottom:
                    size: 0
                color:
                  background:
                    inactive: transparent
                    active: transparent
                    default: transparent
              text:
                label:
                  font_size: 14px
                  padding:
                    right: 0px
                    top: 2px
                  color:
                    'off': var(--lcars-ui-primary)
                    'on': var(--lcars-ui-secondary)
      slider:
        variables:
          color: |
            [[[ return  variables.entity_match_slider ? variables.entity_color :
            "var(--picard-lightest-blue)" ]]]
          color_alpha: 0.95
          border_color: |
            [[[ return  variables.entity_match_slider ? variables.entity_color :
            "var(--picard-blue)" ]]]
          border_alpha: 0.5
          border_width: 2px
          height: '[[[ return variables.card.height ]]]'
          width: 15px
          left_padding: 5px
          step: 1
    styles:
      card:
        - width: '[[[ return variables.card.width ]]]'
        - height: '[[[ return variables.card.height ]]]'
        - border-radius: 0 !important
        - background: none
      custom_fields:
        meter:
          - position: absolute
          - left: 0px
          - top: 0px
        slider:
          - position: absolute
          - left: 0px
          - top: 0px
          - z-index: 1
          - width: '[[[ return variables.card.width ]]]'
          - height: '[[[ return variables.card.height ]]]'
    custom_fields:
      meter:
        card:
          type: custom:button-card
          template: '[[[ return variables.meter.template ]]]'
          variables: '[[[ return variables.meter.variables ]]]'
      slider:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: brightness
          flipped: false
          inverse: false
          vertical: true
          step: '[[[ return variables.slider.variables.step; ]]]'
          styles:
            card:
              - width: '[[[ return variables.card.width ]]]'
              - height: '[[[ return variables.card.height ]]]'
              - background: none
              - border-radius: 0
            progress:
              - background-color: >-
                  [[[ return
                  variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                  ]]]
              - border: >-
                  [[[ return variables.slider.variables.border_width + " solid "
                  +
                  variables.__hex_to_rgba(variables.slider.variables.border_color,
                  variables.slider.variables.border_alpha)  ]]]
              - width: '[[[ return variables.slider.variables.width ]]]'
              - height: '[[[ return variables.slider.variables.height ]]]'
              - left: '[[[ return variables.slider.variables.left_padding ]]]'
            container:
              - border-radius: 0
            track:
              - background: none
            thumb:
              - background: none
  cb-lcars-slider-horizontal-gauge:
    entity: '[[[ return variables.__get_random_entity("light"); ]]]'
    template:
      - cb-lcars-functions
      - cb-lcars-slider-horizontal
    triggers_update: '[[[ return variables.entity ]]]'
    variables:
      card:
        width: |
          [[[
            return variables.__getParentDimension(this,'width','px', { height: 45, width: 500 });
          ]]]
        height: |
          [[[
            return variables.__getParentDimension(this,'height','px', {height: 45, width: 500});
          ]]]
      entity: '[[[ return entity.entity_id ]]]'
      entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
      entity_match_slider: false
      slider:
        variables:
          color: |
            [[[ return  variables.entity_match_slider ? variables.entity_color :
            "var(--picard-lightest-blue)" ]]]
          color_alpha: 0.95
          border_color: |
            [[[ return  variables.entity_match_slider ? variables.entity_color :
            "var(--picard-blue)" ]]]
          border_alpha: 0.5
          border_width: 2px
          height: 10px
          width: '[[[ return variables.card_width ]]]'
          top_padding: 10px
          step: 5
      gauge:
        show_sub_meter: true
        meter:
          template:
            - cb-lcars-button-grid
          variables:
            card:
              height: '[[[ return variables.card.height ]]]'
            grid:
              X: 10
              'Y': 1
              gap: 0px
              buttons:
                - label: '10'
                - label: '20'
                - label: '30'
                - label: '40'
                - label: '50'
                - label: '60'
                - label: '70'
                - label: '80'
                - label: '90'
                - label: '100'
            button:
              show_label: true
              entity: '[[[ return variables.entity ]]]'
              triggers_update: '[[[ return variables.entity ]]]'
              template:
                - cb-lcars-button-picard
                - cb-lcars-button-picard-label-se
              variables:
                card:
                  width: |
                    [[[
                        return variables.__calculcate_grid_cell_dimension(variables.card.width, 10, 0, "5px")
                    ]]]
                  height: '[[[ return variables.card.height ]]]'
                  border:
                    right:
                      size: 2px
                    left:
                      size: 0
                    top:
                      size: 0
                    bottom:
                      size: 0
                  color:
                    background:
                      inactive: transparent
                      active: transparent
                      default: transparent
                text:
                  label:
                    font_size: 14px
                    padding:
                      right: 3px
                      top: 2px
                      bottom: 0px
                    color:
                      'off': var(--lcars-ui-primary)
                      'on': var(--lcars-ui-secondary)
        sub_meter:
          variables:
            card:
              height: 10px
            grid:
              X: 50
              'Y': 1
              gap: 0px
            gradient_start_color: none
            gradient_end_color: none
            button:
              entity: '[[[ return variables.entity ]]]'
              triggers_update: '[[[ return variables.entity ]]]'
              template:
                - cb-lcars-button-picard
                - cb-lcars-button-picard-label-se
              variables:
                card:
                  height: 10px
                  min_height: 10px
                  width: |
                    [[[
                        return variables.__calculcate_grid_cell_dimension(variables.card.width, 50, 0, "20px")
                    ]]]
                  border:
                    right:
                      size: 2px
                    left:
                      size: 0
                    top:
                      size: 2px
                    bottom:
                      size: 0
                  color:
                    background:
                      inactive: transparent
                      active: transparent
                      default: transparent
              show_label: false
      meter: '[[[ return variables.gauge.meter ]]]'
    styles:
      custom_fields:
        slider:
          - position: absolute
          - top: 0
          - left: >-
              [[[ return "calc(" + variables.slider.variables.border_width + " *
              -1)" ]]]
        sub_meter:
          - position: absolute
          - top: 0px
          - left: 0px
          - visibility: >-
              [[[ return variables.gauge.show_sub_meter ? "visible" : "hidden"
              ]]]
    custom_fields:
      slider:
        card:
          flipped: false
          vertical: false
          inverse: false
          styles:
            card:
              - height: '[[[ return variables.card.height ]]]'
              - width: '[[[ return variables.card.width ]]]'
              - background: none
            progress:
              - background-color: >-
                  [[[ return
                  variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                  ]]]
              - border: >-
                  [[[ return variables.slider.variables.border_width + " solid "
                  +
                  variables.__hex_to_rgba(variables.slider.variables.border_color,
                  variables.slider.variables.border_alpha)  ]]]
              - border-radius: 2px
              - height: '[[[ return variables.slider.variables.height ]]]'
              - width: '[[[ return variables.slider.variables.width ]]]'
              - top: '[[[ return variables.slider.variables.top_padding ]]]'
      sub_meter:
        card:
          type: custom:button-card
          template: cb-lcars-meter-horizontal
          variables: '[[[ return variables.gauge.sub_meter.variables ]]]'
  cb-lcars-defs:
    template:
        - cb-lcars-functions
    variables:
      ___helpers:
        alert_condition: input_select.lcars_ui_alert_condition
        lcars_ui_debug: input_boolean.lcars_ui_debug
        ha_lcars:
          lcars_sound: input_boolean.lcars_sound
          lcars_texture: input_boolean.lcars_texture
      __defs:
        font_url: >-
          https://fonts.googleapis.com/css2?family=Antonio:wght@100..700&display=swap
        themes:
          green_alert:
            colors:
              oranges:
                picard-darkest-orange: '#d91604'
                picard-dark-orange: '#ef1d10'
                picard-medium-dark-orange: '#e7442a'
                picard-orange: '#ff6753'
                picard-medium-light-orange: '#ff8470'
                picard-light-orange: '#ff977b'
                picard-lightest-orange: '#ffb399'
              grays:
                picard-darkest-gray: '#1e2229'
                picard-dark-gray: '#2f3749'
                picard-medium-dark-gray: '#52596e'
                picard-gray: '#6d748c'
                picard-medium-light-gray: '#9ea5ba'
                picard-light-gray: '#d2d5df'
                picard-lightest-gray: '#f3f4f7'
                picard-moonlight: '#dfe1e8'
              blues:
                picard-darkest-blue: '#002241'
                picard-dark-blue: '#1c3c55'
                picard-medium-dark-blue: '#2a7193'
                picard-blue: '#37a6d1'
                picard-medium-light-blue: '#67caf0'
                picard-light-blue: '#93e1ff'
                picard-lightest-blue: '#00eeee'
              greens:
                picard-darkest-green: '#0c2a15'
                picard-dark-green: '#083717'
                picard-medium-dark-green: '#095320'
                picard-green: '#266239'
                picard-medium-light-green: '#458359'
                picard-light-green: '#80bb93'
                picard-lightest-green: '#b8e0c1'
              yellows:
                picard-darkest-yellow: '#70602c'
                picard-dark-yellow: '#ac943b'
                picard-medium-dark-yellow: '#d2bf50'
                picard-yellow: '#f9ef97'
                picard-medium-light-yellow: '#fffac9'
                picard-light-yellow: '#e7e6de'
                picard-lightest-yellow: '#f5f5dc'
          red_alert:
            colors:
              oranges:
                picard-darkest-orange: '#8b0000'
                picard-dark-orange: '#a52a2a'
                picard-medium-dark-orange: '#b22222'
                picard-orange: '#dc143c'
                picard-medium-light-orange: '#ff0000'
                picard-light-orange: '#ff4500'
                picard-lightest-orange: '#ff6347'
              grays:
                picard-darkest-gray: '#8b0000'
                picard-dark-gray: '#a52a2a'
                picard-medium-dark-gray: '#b22222'
                picard-gray: '#dc143c'
                picard-medium-light-gray: '#ff0000'
                picard-light-gray: '#ff4500'
                picard-lightest-gray: '#ff7f50'
              blues:
                picard-darkest-blue: '#cd5c5c'
                picard-dark-blue: '#f08080'
                picard-medium-dark-blue: '#e9967a'
                picard-blue: '#fa8072'
                picard-medium-light-blue: '#ffa07a'
                picard-light-blue: '#ff6347'
                picard-lightest-blue: '#ff4500'
              greens:
                picard-darkest-green: '#dc143c'
                picard-dark-green: '#b22222'
                picard-medium-dark-green: '#a52a2a'
                picard-green: '#8b0000'
                picard-medium-light-green: '#ff0000'
                picard-light-green: '#ff4500'
                picard-lightest-green: '#ff6347'
              yellows:
                picard-darkest-yellow: '#8b0000'
                picard-dark-yellow: '#a52a2a'
                picard-medium-dark-yellow: '#b22222'
                picard-yellow: '#dc143c'
                picard-medium-light-yellow: '#ff0000'
                picard-light-yellow: '#ff4500'
                picard-lightest-yellow: '#ff6347'
          blue_alert:
            colors:
              oranges:
                picard-darkest-orange: '#00008b'
                picard-dark-orange: '#0000cd'
                picard-medium-dark-orange: '#4169e1'
                picard-orange: '#4682b4'
                picard-medium-light-orange: '#5f9ea0'
                picard-light-orange: '#87ceeb'
                picard-lightest-orange: '#b0e0e6'
              grays:
                picard-darkest-gray: '#1c1c3c'
                picard-dark-gray: '#2a2a5a'
                picard-medium-dark-gray: '#3a3a7a'
                picard-gray: '#4a4a9a'
                picard-medium-light-gray: '#5a5ab4'
                picard-light-gray: '#6a6ad4'
                picard-lightest-gray: '#7a7af4'
              blues:
                picard-darkest-blue: '#00008b'
                picard-dark-blue: '#0000cd'
                picard-medium-dark-blue: '#4169e1'
                picard-blue: '#4682b4'
                picard-medium-light-blue: '#5f9ea0'
                picard-light-blue: '#87ceeb'
                picard-lightest-blue: '#b0e0e6'
              greens:
                picard-darkest-green: '#1c1c3c'
                picard-dark-green: '#2a2a5a'
                picard-medium-dark-green: '#3a3a7a'
                picard-green: '#4a4a9a'
                picard-medium-light-green: '#5a5ab4'
                picard-light-green: '#6a6ad4'
                picard-lightest-green: '#7a7af4'
              yellows:
                picard-darkest-yellow: '#1c1c3c'
                picard-dark-yellow: '#2a2a5a'
                picard-medium-dark-yellow: '#3a3a7a'
                picard-yellow: '#4a4a9a'
                picard-medium-light-yellow: '#5a5ab4'
                picard-light-yellow: '#6a6ad4'
                picard-lightest-yellow: '#7a7af4'
          yellow_alert:
            colors:
              oranges:
                picard-darkest-orange: '#8b4513'
                picard-dark-orange: '#d2691e'
                picard-medium-dark-orange: '#ff8c00'
                picard-orange: '#ffa500'
                picard-medium-light-orange: '#ffb84d'
                picard-light-orange: '#ffd700'
                picard-lightest-orange: '#ffec8b'
              grays:
                picard-darkest-gray: '#4b4b00'
                picard-dark-gray: '#6b6b00'
                picard-medium-dark-gray: '#8b8b00'
                picard-gray: '#abab00'
                picard-medium-light-gray: '#cbcb00'
                picard-light-gray: '#ebeb00'
                picard-lightest-gray: '#fbfb00'
              blues:
                picard-darkest-blue: '#4b4b00'
                picard-dark-blue: '#6b6b00'
                picard-medium-dark-blue: '#8b8b00'
                picard-blue: '#abab00'
                picard-medium-light-blue: '#cbcb00'
                picard-light-blue: '#ebeb00'
                picard-lightest-blue: '#fbfb00'
              greens:
                picard-darkest-green: '#4b4b00'
                picard-dark-green: '#6b6b00'
                picard-medium-dark-green: '#8b8b00'
                picard-green: '#abab00'
                picard-medium-light-green: '#cbcb00'
                picard-light-green: '#ebeb00'
                picard-lightest-green: '#fbfb00'
              yellows:
                picard-darkest-yellow: '#8b4513'
                picard-dark-yellow: '#d2691e'
                picard-medium-dark-yellow: '#ff8c00'
                picard-yellow: '#ffa500'
                picard-medium-light-yellow: '#ffb84d'
                picard-light-yellow: '#ffd700'
                picard-lightest-yellow: '#ffec8b'
          black_alert:
            colors:
              oranges:
                picard-darkest-orange: '#0d0d0d'
                picard-dark-orange: '#1a1a1a'
                picard-medium-dark-orange: '#333333'
                picard-orange: '#4d4d4d'
                picard-medium-light-orange: '#666666'
                picard-light-orange: '#808080'
                picard-lightest-orange: '#999999'
              grays:
                picard-darkest-gray: '#0d0d0d'
                picard-dark-gray: '#1a1a1a'
                picard-medium-dark-gray: '#333333'
                picard-gray: '#4d4d4d'
                picard-medium-light-gray: '#666666'
                picard-light-gray: '#808080'
                picard-lightest-gray: '#999999'
              blues:
                picard-darkest-blue: '#0d0d0d'
                picard-dark-blue: '#1a1a1a'
                picard-medium-dark-blue: '#333333'
                picard-blue: '#4d4d4d'
                picard-medium-light-blue: '#666666'
                picard-light-blue: '#808080'
                picard-lightest-blue: '#999999'
              greens:
                picard-darkest-green: '#0d0d0d'
                picard-dark-green: '#1a1a1a'
                picard-medium-dark-green: '#333333'
                picard-green: '#4d4d4d'
                picard-medium-light-green: '#666666'
                picard-light-green: '#808080'
                picard-lightest-green: '#999999'
              yellows:
                picard-darkest-yellow: '#0d0d0d'
                picard-dark-yellow: '#1a1a1a'
                picard-medium-dark-yellow: '#333333'
                picard-yellow: '#4d4d4d'
                picard-medium-light-yellow: '#666666'
                picard-light-yellow: '#808080'
                picard-lightest-yellow: '#999999'
          gray_alert:
            colors:
              oranges:
                picard-darkest-orange: '#2b2b2b'
                picard-dark-orange: '#3b3b3b'
                picard-medium-dark-orange: '#4b4b4b'
                picard-orange: '#5b5b5b'
                picard-medium-light-orange: '#6b6b6b'
                picard-light-orange: '#7b7b7b'
                picard-lightest-orange: '#8b8b8b'
              grays:
                picard-darkest-gray: '#2b2b2b'
                picard-dark-gray: '#3b3b3b'
                picard-medium-dark-gray: '#4b4b4b'
                picard-gray: '#5b5b5b'
                picard-medium-light-gray: '#6b6b6b'
                picard-light-gray: '#7b7b7b'
                picard-lightest-gray: '#8b8b8b'
              blues:
                picard-darkest-blue: '#2b2b2b'
                picard-dark-blue: '#3b3b3b'
                picard-medium-dark-blue: '#4b4b4b'
                picard-blue: '#5b5b5b'
                picard-medium-light-blue: '#6b6b6b'
                picard-light-blue: '#7b7b7b'
                picard-lightest-blue: '#8b8b8b'
              greens:
                picard-darkest-green: '#2b2b2b'
                picard-dark-green: '#3b3b3b'
                picard-medium-dark-green: '#4b4b4b'
                picard-green: '#5b5b5b'
                picard-medium-light-green: '#6b6b6b'
                picard-light-green: '#7b7b7b'
                picard-lightest-green: '#8b8b8b'
              yellows:
                picard-darkest-yellow: '#2b2b2b'
                picard-dark-yellow: '#3b3b3b'
                picard-medium-dark-yellow: '#4b4b4b'
                picard-yellow: '#5b5b5b'
                picard-medium-light-yellow: '#6b6b6b'
                picard-light-yellow: '#7b7b7b'
                picard-lightest-yellow: '#8b8b8b'
  cb-lcars-header-base:
    template:
      - cb-lcars-button-base
      - cb-lcars-functions
    variables:
      label: ' '
      text:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: flex-start
          justify: flex-start
          color:
            default: var(--primary-text-color)
            'on': var(--primary-text-color)
            'off': var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
      card:
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
  cb-lcars-header:
    template:
      - cb-lcars-header-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
            left_radius: var(--ha-card-border-radius)
          left:
            size: 90px
      text:
        label:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        state:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        name:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
    styles:
      label:
        - border-top-right-radius: 0px
        - border-top-left-radius: |
            [[[
                let leftRadius = variables.card.border.top.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-header-open:
    template:
      - cb-lcars-header-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
  cb-lcars-header-contained:
    template:
      - cb-lcars-header-open
    variables:
      card:
        min_height: 10px
        border:
          left:
            size: 50px
          right:
            size: 50px
          top:
            size: 10px
            left_radius: var(--ha-card-border-radius)
            right_radius: var(--ha-card-border-radius)
          bottom:
            left_radius: 0px
            right_radius: 0px
    styles:
      label:
        - border-top-left-radius: |
            [[[
                let leftRadius = variables.card.border.top.left_radius;
                let leftRadiusWithUnit = isNaN(leftRadius) ? leftRadius : leftRadius + 'px';
                return "calc(" + leftRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
        - border-top-right-radius: |
            [[[
                let rightRadius = variables.card.border.top.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
  cb-lcars-header-right:
    template:
      - cb-lcars-header-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
            left_radius: 0px
            right_radius: var(--ha-card-border-radius)
          right:
            size: 90px
          bottom:
            right_radius: 0px
      text:
        label:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        state:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        name:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
    styles:
      label:
        - border-top-left-radius: 0px
        - border-top-right-radius: |
            [[[
                let rightRadius = variables.card.border.top.right_radius;
                let rightRadiusWithUnit = isNaN(rightRadius) ? rightRadius : rightRadius + 'px';
                return "calc(" + rightRadiusWithUnit + " / " + variables.card.border.inner.factor + ")";
            ]]]
