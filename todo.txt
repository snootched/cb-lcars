-load themes on startup
--loaded into window.cblcars
--added some functions..

-hosted persistent config file?
--frontend can read, not write

-blink in form

-picard header form

-custom features extension?

-debug - use input helper
const userSetting = hass.states['input_text.user_setting'].state; console.log(`User Setting: ${userSetting}`);


// Function to read user settings
async function readUserSettings() {
  const response = await fetch('/api/states/sensor.user_settings');
  if (response.ok) {
    const data = await response.json();
    return data.state;
  } else {
    console.error('Failed to fetch user settings');
    return null;
  }
}

// Example usage
document.addEventListener('DOMContentLoaded', async () => {
  const userSettings = await readUserSettings();
  console.log('User Settings:', userSettings);
});




// Function to get the hass object
function getHass() {
    const homeAssistant = document.querySelector('home-assistant');
    if (homeAssistant) {
      return homeAssistant.hass;
    } else {
      console.error('home-assistant element not found');
      return null;
    }
  }

  // Example usage: Read attributes
  function readAttributes(entityId) {
    const hass = getHass();
    if (!hass) {
      return null;
    }

    const entity = hass.states[entityId];
    if (!entity) {
      console.error(`Entity ${entityId} not found`);
      return null;
    }

    const attributes = entity.attributes;
    console.log(attributes);

    // Parse JSON attribute if needed
    const myJson = attributes.my_json ? JSON.parse(attributes.my_json) : {};
    console.log(myJson);

    return myJson;
  }

  // Call the function on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', () => {
    const userPrefs = readAttributes('input_text.user_setting');
    console.log('User Preferences:', userPrefs);
  });



  // Function to write attributes
function writeAttributes(entityId, newAttributes) {
    const hass = getHass();
    if (!hass) {
      return;
    }

    const newState = 'New Value'; // Example of updating the state as well
    const newAttributesJson = JSON.stringify(newAttributes);

    hass.callService('input_text', 'set_value', {
      entity_id: entityId,
      value: newState,
      attributes: {
        my_json: newAttributesJson
      }
    });
  }

  // Example usage
  document.addEventListener('DOMContentLoaded', () => {
    const userPrefs = readAttributes('input_text.user_setting');
    console.log('User Preferences:', userPrefs);

    // Update user preferences
    const newAttributes = { key: 'new_value' };
    writeAttributes('input_text.user_setting', newAttributes);
  });
