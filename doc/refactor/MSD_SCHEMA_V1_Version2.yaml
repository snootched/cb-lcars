# LCARS MSD Clean‑Slate Schema (v1 – UPDATED to support view_box:auto + anchors)
# This supersedes the earlier draft. Key additions:
#  - view_box may be the literal value: auto
#  - base_svg section introduced (optional) to load an SVG and (when view_box:auto) derive the authoritative viewBox
#  - anchors section added (author overrides / adds to SVG‑extracted anchors)
#  - Anchor precedence + merge semantics defined
#  - Overlays may reference anchors by id anywhere a point is accepted (anchor field, attach_to, position)
#
# Runtime Resolution Order for view_box:
#   1. If msd.view_box is an explicit 4-number array → use it.
#   2. Else if msd.view_box === 'auto' (or omitted) AND base_svg provided and successfully loaded → use SVG's viewBox.
#   3. Else fallback to [0,0,400,200].
#
# Anchor Collection & Merge:
#   - Extract from loaded SVG (if base_svg present) using rules:
#       <circle id="A" cx="" cy="">     => anchor A = [cx, cy]
#       <text   id="B" x=""  y="">      => anchor B = [x, y]
#       <g id="C"> (no coords)          => anchor C = null (placeholder – user may override later)
#   - Merge user-defined msd.anchors AFTER extraction; user entries override duplicates.
#   - Each user anchor must be [x,y] numbers (percent strings allowed; resolved against final view_box).
#   - Final merged anchor map exposed to overlay rendering & routing.
#
# Point Resolution (for any position/anchor fields):
#   - If value is a string and matches an anchor id → use that anchor's [x,y]
#   - Else if value is an array [x,y]:
#        Each coordinate may be:
#          number  => absolute viewBox units
#          "<pct>%" => percentage of viewBox width (x) or height (y)
#   - Else invalid → validation error.
#
# NOTE: Comments are for specification. A production schema loader should strip comments or ignore them.

msd:
  version: 1

  # Optional: Source SVG & auto viewBox extraction.
  # If present and view_box:'auto' (or omitted), the SVG's internal viewBox becomes the canonical coordinate system.
  base_svg:
    source: builtin:ncc-1701-a-blue   # Formats:
                                      #   builtin:<key>  (look up packaged SVG)
                                      #   /local/...svg  (from HA www directory)
                                      #   url:https://... (optional future extension)
    # (Optional) post-load transformations (future placeholders):
    # remove_ids: [idA, idB]          # Strip elements before anchor extraction (NOT IMPLEMENTED YET)
    # id_prefix: lcars_               # Prefix all extracted ids (NOT IMPLEMENTED YET)

  # Either an explicit [minX,minY,width,height] OR the literal 'auto'
  # Omit or set to 'auto' to derive from base_svg (if supplied); fallback default [0,0,400,200].
  view_box: auto

  # User-defined / overriding anchors. Keys = anchor IDs; values = [x,y]
  # Coordinates may be numbers or percentage strings ("50%").
  # Duplicate IDs from SVG override the extracted coordinates.
  anchors:
    cpu: [120, 80]
    mem: [260, 80]
    pct_anchor: ["75%", "50%"]
    # Example overriding an SVG anchor:
    # existing_svg_anchor: [400, 220]

  palettes:
    default:
      accent1: "var(--lcars-orange)"
      accent2: "var(--lcars-yellow)"
      danger:  "var(--lcars-red)"
      info:    "var(--lcars-cyan)"

  data_sources:
    cpu_temp:
      entity: sensor.cpu_temp
      window_seconds: 3600
      minEmitMs: 250
      coalesceMs: 120
      maxDelayMs: 800
      emitOnSameValue: false
      history: { preload: true, hours: 6 }

  profiles:
    - id: normal
      defaults:
        line: { color: var(--lcars-orange), width: 2, corner_style: round, corner_radius: 12 }
        text: { color: var(--lcars-orange), font_size: 14 }
    - id: red_alert
      defaults:
        line: { color: var(--lcars-red), width: 3 }
        text: { color: var(--lcars-red) }

  active_profiles: [ normal ]

  routing:
    default_mode: manhattan
    clearance: 8
    grid_resolution: 56
    # NEW channel shaping knobs:
    channel_target_coverage: 0.6
    channel_shaping_max_attempts: 12
    channel_shaping_span: 32
    channel_min_coverage_gain: 0.04
    grid_resolution_multipliers: [1, 1.5, 2]
    grid_resolution_max: 320
    smart_proximity: 6
    cost_defaults:
      distance: 1
      bend: 12
      proximity: 4
      channel: 0.6
      spacing: 8
    fallback:
      max_cost_multiple: 4.0
      enable_two_elbow: true
    channels:
      - id: main_bus
        rect: [400, 200, 800, 120]
      - id: aux_bus
        rect: [400, 600, 800, 120]
    smoothing_mode: none            # none|chaikin (invalid coerced to none)
    smoothing_iterations: 0
    smoothing_max_points: 160

  animations:
    - id: pulse_fast
      preset: pulse
      params: { duration: 1200, loop: true, alternate: true, max_scale: 1.15, min_opacity: 0.65 }
    - id: trace_cpu_route
      preset: motionpath
      params:
        path_selector: "#line_cpu"
        duration: 4000
        loop: true
        tracer: { r: 4, fill: var(--lcars-orange) }

  timelines:
    - id: intro_sequence
      globals: { autoplay: true, easing: easeInOutSine }
      steps:
        - targets: "#title_main"
          preset: fade
          params: { duration: 600 }
        - targets: "#line_cpu"
          offset: "+=150"
          preset: draw
          params: { duration: 1200 }

  overlays:
    - id: title_main
      type: text
      position: [40, 40]          # or "cpu" to reference anchor id
      style:
        value: "CPU"
        color: var(--lcars-orange)
        font_size: 24
        align: start
      animation_ref: pulse_fast

    - id: spark_temp
      type: sparkline
      position: [40, 80]
      size: [220, 60]
      style:
        source: cpu_temp
        color: var(--lcars-yellow)
        width: 2
        markers: { r: 2, fill: var(--lcars-yellow) }
        label_last:
          decimals: 1
          format: "{v}°C"
          offset: [8, -10]
          fill: var(--lcars-orange)
        grid: { x: 6, y: 4, color: "rgba(255,255,255,0.12)", opacity: 0.5 }

    - id: line_cpu
      type: line
      anchor: cpu
      attach_to: spark_temp
      route: auto
      route_mode: auto
      style:
        color: var(--lcars-orange)
        width: 2
        corner_style: round      # round | bevel | miter (see schema notes); round uses corner_radius
        corner_radius: 12
      animation_ref: trace_cpu_route

  rules:
    - id: cpu_hot
      priority: 20
      when:
        all:
          - entity: sensor.cpu_temp
            above: 75
      apply:
        overlays:
          - id: line_cpu
            style: { color: var(--lcars-red), width: 4 }
        profiles_add: [ red_alert ]
        animations:
          - ref: pulse_fast
            override: { params: { duration: 900 } }

  hud:
    workbench:
      snap_grid: 4
      show_rule_badges: true

# ------------------------------------------------------------------
# SCHEMA REFERENCE (UPDATED EXCERPT)
# ------------------------------------------------------------------
# msd.base_svg.source: "builtin:<key>" | "/local/path.svg"
# msd.view_box: [minX,minY,width,height] | auto (default)
# msd.anchors: { <id>: [x,y] } (numbers or percentage strings)
# Overlay point fields (anchor, attach_to, position) accept:
#   - anchor id (string) referencing merged anchor map
#   - [x,y] numbers
#   - [ "<pct>%", "<pct>%" ] (resolved after final view_box known)
#
# Resolution timing:
#   1. Load base_svg (if any)
#   2. If view_box:auto -> extract SVG viewBox
#   3. Extract SVG anchors
#   4. Merge user msd.anchors (override duplicates)
#   5. Resolve overlay point references
#
# Validation errors:
#   - anchor id referenced but absent after merge
#   - coordinate array not length 2 or contains invalid entries
#   - view_box neither array[4] nor 'auto'
#
# corner_style: round | bevel | miter (default miter). round uses corner_radius (arc substitution Wave 5.5); bevel = truncated corner; miter = sharp join.
# Corner Arc Notes (M5.5):
#   round => replaces elbows with arcs (SVG 'A' commands), radius clamped per elbow.
#   bevel / miter unchanged.
#   meta.arc available via routing.inspect(id).meta.arc