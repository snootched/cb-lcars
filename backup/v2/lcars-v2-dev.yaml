animated_background:
  default_url: /local/space_03.mp4
  included_users:
    - taba9
    - taba7
    - jweyermars
button_card_templates:
  cb-lcars-debug:
    variables:
      debug: true
      debug_hass: false
      debug_extras: null
      __title: '::CB-LCARS::DEBUG::>'
    custom_fields:
      debugger: |
        [[[
          if (!variables.debug) return

          const o = {
            variables: variables, 
            entity: entity ? entity : {},
            bc: this
          }

          if (variables.debug_hass) {
            o.hass = hass
          }

          if (variables.debug_extras) {
            o.extras = variables.debug_extras
          }

          console.debug(variables.__title, o)
        ]]]
    styles:
      custom_fields:
        debugger:
          - height: 0
          - width: 0
          - visibility: hidden
  cb-lcars-functions:
    variables:
      __calculcate_grid_cell_dimension: |
        [[[
          return function calculcate_grid_cell_dimension(cardDimension, gridCells, gridGap, defaultButtonCardDimension) {
            let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
            let grid_cells = gridCells ? parseInt(gridCells) : 0;
            let grid_gap = gridGap ? parseInt(gridGap) : 0;

            //console.debug("... card_dimension: " + card_dimension);
            //console.debug("... grid_cells: " + grid_cells);
            //console.debug("... grid_gap: " + grid_gap);
            
          
            // If card_dimension is not defined or is 0, return defaultButtonCardDimension (default or user overrides this)
            if (card_dimension === 0) {
              //console.debug("...returning defaultButtonCardDimension: " + defaultButtonCardDimension);
              return defaultButtonCardDimension;
            }
            // Calculate the button card dimension that would fit the given number of grid cells
            //let button_card_dimension = Math.floor((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);
            let button_card_dimension = ((card_dimension - grid_gap * (grid_cells - 1)) / grid_cells);

            //console.debug("...button_card_dimension calulated: " + button_card_dimension);
            
            return (button_card_dimension +"px");
          } 
        ]]]
      __calculate_grid_cells: |
        [[[
            return function calculate_grid_cells(cardDimension, buttonCardDimension, gridGap, defaultGridCells) {
            let card_dimension = cardDimension ? parseInt(cardDimension) : 0;
            let button_card_dimension = buttonCardDimension ? parseInt(buttonCardDimension) : 0;
            let grid_gap = gridGap ? parseInt(gridGap) : 0;
          
            //console.debug("... card_dimension: " + card_dimension);
            //console.debug("... grid_gap: " + grid_gap);
            //console.debug("... defaultGridCells: " + defaultGridCells);
            
            // If card_dimension is not defined or is 0, return defaultGridCells (default or user overrides this)
            if (card_dimension === 0) {
              //console.debug("...returning defaultGridCells!");
              return defaultGridCells;
            }
            // Calculate the number of grid cells that would fit
            let grid_dimension = Math.floor((card_dimension + grid_gap) / (button_card_dimension + grid_gap));
            //console.debug("...returing calc. grid_dimension: " + grid_dimension);
            return grid_dimension;
          }
        ]]]      
      __deepMerge: |
        [[[
          return function deepMerge(object1, object2) {
            if (Array.isArray(object1) && Array.isArray(object2)) {
              return [...object1, ...object2];
            } else if (typeof object1 === 'object' && typeof object2 === 'object') {
              return Object.entries(object2).reduce((acc, [key, value]) => {
                if (Object.keys(acc).includes(key) && typeof value === 'object') {
                  acc = { ...acc, [key]: deepMerge(acc[key], value) };
                } else {
                  acc = { ...acc, [key]: value };
                }
                
                return acc;
              }, { ...object1 });
            } else {
              return object2;
            }
          }
        ]]]
      __get_random_css_color: |
        [[[
           return function get_random_css_color() {
             var letters = '0123456789ABCDEF';
             var color = '#';
             for (var i = 0; i < 6; i++) {
               color += letters[Math.floor(Math.random() * 16)];
             }
             return color;
           }
        ]]]
      __get_light_css_color: |
        [[[
          return function get_light_css_color(entity) {
            let css_color = 'var(--lcars-ui-secondary)';
            let lightEntity = states[entity];
            if (lightEntity && lightEntity.attributes.rgb_color) {
              const light_color = lightEntity.attributes.rgb_color;
              css_color = `rgb(${light_color.join(', ')})`;
            }
            return css_color;
          }
        ]]]
      __get_light_css_color_string: |
        [[[
          return function get_light_css_color_string(entity) {
            const entityString = `'${entity}'`; // This will give you the entity variable with single quotes around it
            const lightEntity2 = states[entity];
            const lightEntity = states[entityString];
            console.debug("entity: " + entity);
            console.debug("entityString: " + entityString);
            console.debug("lightEntity: " + lightEntity);
            console.debug("lightEntity2: " + lightEntity2);
            console.debug("states: " + states);
            console.debug("states[living]: " + states['light.living_room_ambient'].attributes.rgb_color);
            console.debug("lightEntity2.attributes.rgb_color: " + lightEntity2.attributes.rgb_color);
            let cssColor = 'var(--lcars-ui-secondary)'; // default color
            if (lightEntity && lightEntity.attributes.rgb_color) {
              const lightColor = lightEntity.attributes.rgb_color;
              cssColor = `rgb(${lightColor.join(', ')})`;
            }
            return cssColor;
          }
        ]]]
      __hex_to_rgba: |
        [[[
          return function hex_to_rgba(input, alpha = 1) {
            if (input.startsWith('rgb')) {
              // If the input starts with 'rgb', return the input as is
              return input;
            }     let hex;
            if (input.startsWith('var(--')) {
                // If the input is a CSS variable in the format "var(--color)", extract the color variable
                hex = getComputedStyle(document.documentElement)
                    .getPropertyValue(input.slice(4, -1))
                    .trim();
            } else if (input.startsWith('--')) {
                // If the input is a CSS variable, get its value
                hex = getComputedStyle(document.documentElement)
                    .getPropertyValue(input)
                    .trim();
            } else {
                hex = input;
            }
            
            let r, g, b;
            if (hex.length === 7) {
                r = parseInt(hex.slice(1, 3), 16);
                g = parseInt(hex.slice(3, 5), 16);
                b = parseInt(hex.slice(5, 7), 16);
            } else if (hex.length === 4) {
                r = parseInt(hex[1] + hex[1], 16);
                g = parseInt(hex[2] + hex[2], 16);
                b = parseInt(hex[3] + hex[3], 16);
            } else {
                throw new Error('Invalid HEX color.');
            }
            return `rgba(${r}, ${g}, ${b}, ${alpha})`;
          }
        ]]]
      __extract_color_channel: |
        [[[
          return function extract_color_channel(color, channel) {
            // Convert the channel to lowercase
            channel = channel.toLowerCase();
            // Determine if the input is rgb or rgba
            let isRGBA = color.startsWith('rgba');
            // Split the color string into an array of numbers
            let numbers = color.slice(isRGBA ? 5 : 4, -1).split(',').map(Number);
            // Define the color channels
            let channels = {r: 0, g: 1, b: 2, a: 3};
            // Check if the specified channel exists
            if (channel in channels) {
              // If the input is rgb and the channel is 'a', return undefined
              if (!isRGBA && channel === 'a') {
                return undefined;
              }
              // Return the decimal value of the specified color channel
              return numbers[channels[channel]];
            } else {
              throw new Error('Invalid color channel. Please specify "r", "g", "b", or "a".');
            }
          }
        ]]]
      __extract_color_channel2: |
        [[[
          return function extract_color_channel2(rgba, channel) {
            // Convert the channel to lowercase
            channel = channel.toLowerCase();
            // Split the rgba string into an array of numbers
            let numbers = rgba.slice(5, -1).split(',').map(Number);
            // Define the color channels
            let channels = {r: 0, g: 1, b: 2, a: 3};
            // Check if the specified channel exists
            if (channel in channels) {
              // Return the decimal value of the specified color channel
              //console.log("....numbers = " + numbers);
              //console.log("....channels[channel] = " + numbers[channels[channel]]);
              return numbers[channels[channel]];
            } else {
              throw new Error('Invalid color channel. Please specify "r", "g", "b", or "a".');
            }
          }
        ]]]
      __interpolated_rgb: |
        [[[
          return function interpolated_rgb(start_rgb, end_rgb, step, total_steps) {

            let start_r = variables.__extract_color_channel(start_rgb, 'r');
            let start_g = variables.__extract_color_channel(start_rgb, 'g');
            let start_b = variables.__extract_color_channel(start_rgb, 'b');
          
            let end_r = variables.__extract_color_channel(end_rgb, 'r');
            let end_g = variables.__extract_color_channel(end_rgb, 'g');
            let end_b = variables.__extract_color_channel(end_rgb, 'b');
          
            let interpolated_r = Math.round(start_r + step * (end_r - start_r) / total_steps);
            let interpolated_g = Math.round(start_g + step * (end_g - start_g) / total_steps);
            let interpolated_b = Math.round(start_b + step * (end_b - start_b) / total_steps);
            //console.log("in function r="+interpolated_r + ",g=" +interpolated_g+ ",b=" + interpolated_b);
          
            return `rgb(${interpolated_r}, ${interpolated_g}, ${interpolated_b})`;

          }
        ]]]
  cb-lcars-actions-hue:
    tap_action:
      action: navigate
      navigation_path: |
        [[[
          return "\#hue_card:" + variables.action.hue_api + "_openHueScreen"
        ]]]
    double_tap_action:
      action: more-info
    hold_action:
      action: none
  cb-lcars-actions-toggle:
    tap_action:
      action: toggle
      haptic: success
    double_tap_action:
      action: more-info
      haptic: success
    hold_action:
      action: more-info
      haptic: success
  cb-lcars-actions-more-info:
    tap_action:
      action: more-info
      haptic: success
    double_tap_action:
      action: more-info
      haptic: success
    hold_action:
      action: more-info
      haptic: success
  cb-lcars-actions-disable:
    tap_action:
      action: none
      haptic: failure
    double_tap_action:
      action: none
      haptic: failure
    hold_action:
      action: none
      haptic: failure
  cb-lcars-animate-press:
    variables:
      ripple_color: var(--lcars-card-top-color)
    styles:
      card:
        - '--mdc-ripple-color': '[[[ return variables.ripple_color; ]]]'
        - '--mdc-ripple-press-opacity': 0.5
  cb-lcars-state-blink:
    variables:
      blink_card_background_color: var(--error-color)
      blink_seconds: 2s
      color: var(--error-color)
      blink_state_mode: 'on'
    state:
      - value: '[[[ return variables.blink_state_mode; ]]]'
        color: '[[[ return variables.color; ]]]'
        styles:
          card:
            - animation-duration: '[[[ return variables.blink_seconds; ]]]'
            - animation-timing-function: ease-out
            - animation-name: blink
            - animation-iteration-count: infinite
            - animation-delay: 1s
            - background-color: '[[[ return variables.blink_card_background_color; ]]]'
  cb-lcars-card-base:
    template: cb-lcars-functions
    show_icon: false
    show_label: false
    show_name: false
    show_state: false
    styles:
      card:
        - background-color: |
            [[[
              if (states['input_boolean.lcars_ui_debug'].state === 'on') {
                return variables.__get_random_css_color();
              } else {
                return 'transparent';
              }
            ]]]    
  cb-lcars-base:
    label: ' '
    variables:
      text:
        label:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            'on': var(--primary-text-color)
            'off': var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
        name:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            'on': var(--primary-text-color)
            'off': var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
        state:
          font_size: 20px
          font_weight: normal
          align: left
          align_items: center
          justify: center
          transform: none
          padding:
            top: 10px
            left: 0px
            right: 0px
            bottom: 10px
          color:
            default: var(--primary-text-color)
            'on': var(--primary-text-color)
            'off': var(--primary-text-color)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
      card:
        height: null
        min_height: 10px
        width: null
        color:
          active: var(--lcars-ui-secondary)
          inactive: var(--lcars-ui-tertiary)
          background:
            default: none
            active: transparent
            inactive: transparent
        border:
          top:
            left_radius: 0px
            right_radius: 0px
            size: 0px
          bottom:
            left_radius: 0px
            right_radius: 0px
            size: 0px
          left:
            size: 0px
          right:
            size: 0px
          inner:
            factor: 2
            min_radius: 30px
            width: 35px
          color: var(--lcars-card-top-color)
      icon:
        box_size: 35px
        size: 24px
        justify: left
        color:
          default: black
          active: null
          inactive: null
          background:
            active: null
            inactive: null
    show_label: false
    show_state: false
    show_icon: false
    show_name: false
    styles:
      img_cell:
        - justify-content: '[[[ return variables.icon.justify ]]]'
      card:
        - height: '[[[ return variables.card.height; ]]]'
        - min-height: '[[[ return variables.card.min_height; ]]]'
        - width: '[[[ return variables.card.width; ]]]'
        - border-top: >-
            [[[ return variables.card.border.top.size + " solid " +
            variables.card.border.color ]]]
        - border-left: >-
            [[[ return variables.card.border.left.size + " solid " +
            variables.card.border.color ]]]
        - border-right: >-
            [[[ return variables.card.border.right.size + " solid " +
            variables.card.border.color ]]]
        - border-bottom: >-
            [[[ return variables.card.border.bottom.size + " solid " +
            variables.card.border.color ]]]
        - background: '[[[ return variables.card.color.background.default ]]]'
        - border-top-left-radius: '[[[ return variables.card.border.top.left_radius + " !important" ]]]'
        - border-top-right-radius: >-
            [[[ return variables.card.border.top.right_radius + " !important"
            ]]]
        - border-bottom-left-radius: >-
            [[[ return variables.card.border.bottom.left_radius + " !important"
            ]]]
        - border-bottom-right-radius: >-
            [[[ return variables.card.border.bottom.right_radius + " !important"
            ]]]
        - position: relative
      label:
        - display: flex
        - justify-content: '[[[ return variables.text.label.justify ]]]'
        - align-items: '[[[ return variables.text.label.align_items ]]]'
        - text-transform: '[[[ return variables.text.label.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.text.label.padding.left + " -
            " + variables.text.label.padding.right + ")";]]]
        - height: >-
            [[[ return "calc(100% - " + variables.text.label.padding.top + " - "
            + variables.text.label.padding.bottom + ")";]]]
        - color: '[[[ return variables.text.label.color.default ]]]'
        - font-size: '[[[ return variables.text.label.font_size ]]]'
        - font-weight: '[[[ return variables.text.label.font_weight ]]]'
        - justify-self: start
        - text-align: '[[[ return variables.text.label.align ]]]'
        - padding-top: '[[[ return variables.text.label.padding.top ]]]'
        - padding-left: '[[[ return variables.text.label.padding.left ]]]'
        - padding-right: '[[[ return variables.text.label.padding.right  ]]]'
        - padding-bottom: '[[[ return variables.text.label.padding.bottom; ]]]'
        - outline: >-
            [[[ return variables.card.border.inner.width + " solid " +
            variables.card.border.color; ]]]
      state:
        - display: flex
        - justify-content: '[[[ return variables.text.state.justify ]]]'
        - align-items: '[[[ return variables.text.state.align_items ]]]'
        - text-transform: '[[[ return variables.text.state.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.text.state.padding.left + " -
            " + variables.text.state.padding.right + ")";]]]
        - height: >-
            [[[ return "calc(100% - " + variables.text.state.padding.top + " - "
            + variables.text.state.padding.bottom + ")";]]]
        - color: '[[[ return variables.text.state.color.default ]]]'
        - font-size: '[[[ return variables.text.state.font_size ]]]'
        - font-weight: '[[[ return variables.text.state.font_weight ]]]'
        - justify-self: start
        - text-align: '[[[ return variables.text.state.align ]]]'
        - padding-top: '[[[ return variables.text.state.padding.top ]]]'
        - padding-left: '[[[ return variables.text.state.padding.left ]]]'
        - padding-right: '[[[ return variables.text.state.padding.right ]]]'
        - padding-bottom: '[[[ return variables.text.state.padding.bottom ]]]'
        - outline: >-
            [[[ return variables.card.border.inner.width + " solid " +
            variables.card.border.color; ]]]
      name:
        - display: flex
        - justify-content: '[[[ return variables.text.name.justify ]]]'
        - align-items: '[[[ return variables.text.name.align_items ]]]'
        - text-transform: '[[[ return variables.text.name.transform ]]]'
        - border-left: 0
        - border-top: 0
        - border-top-left-radius: 0px
        - border-top-right-radius: 0px
        - background: none !important
        - position: absolute
        - top: 0px
        - left: 0px
        - width: >-
            [[[ return "calc(100% - " + variables.text.name.padding.left + " - "
            + variables.text.name.padding.right + ")";]]]
        - height: >-
            [[[ return "calc(100% - " + variables.text.name.padding.top + " - "
            + variables.text.name.padding.bottom + ")";]]]
        - color: '[[[ return variables.text.name.color.default ]]]'
        - font-size: '[[[ return variables.text.name.font_size ]]]'
        - font-weight: '[[[ return variables.text.name.font_weight ]]]'
        - justify-self: start
        - text-align: '[[[ return variables.text.name.align ]]]'
        - padding-top: '[[[ return variables.text.name.padding.top ]]]'
        - padding-left: '[[[ return variables.text.name.padding.left ]]]'
        - padding-right: '[[[ return variables.text.name.padding.right ]]]'
        - padding-bottom: '[[[ return variables.text.name.padding.bottom ]]]'
        - outline: >-
            [[[ return variables.card.border.inner.width + " solid " +
            variables.card.border.color; ]]]
    state:
      - value: 'on'
        id: state_on
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.active ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.active ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.active ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.active ]]]
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.active ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.active ||
                variables.card.color.background.active ]]]
      - value: 'off'
        id: state_off
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.inactive ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.inactive ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.inactive ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.inactive ]]]          
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]
      - value: open
        id: state_open
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - color: '[[[ return variables.card.color.active ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - value: closed
        id: state_closed
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - color: '[[[ return variables.card.color.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
      - value: heat
        id: state_heat
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.hvac_heat ]]]'
          label:
            - color: '[[[ return variables.text.label.color.hvac_heat ]]]'
          name:
            - color: '[[[ return variables.text.name.color.hvac_heat ]]]'
      - value: cool
        id: state_cool
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.hvac_cool ]]]'
          label:
            - color: '[[[ return variables.text.label.color.hvac_cool ]]]'
          name:
            - color: '[[[ return variables.text.name.color.hvac_cool ]]]'
      - operator: template
        value: |
          [[[
            return entity !== undefined && ['00', '0'].includes(states[entity.entity_id].state);
          ]]]
        id: state_zero
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.zero ]]]'
          label:
            - color: '[[[ return variables.text.label.color.zero ]]]'
          name:
            - color: '[[[ return variables.text.name.color.zero ]]]'
      - operator: template
        value: |
          [[[
            return entity !== undefined && states[entity.entity_id].state !== '0';
          ]]]
        id: state_nonzero
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.non_zero ]]]'
          label:
            - color: '[[[ return variables.text.label.color.non_zero ]]]'
          name:
            - color: '[[[ return variables.text.name.color.non_zero ]]]'
      - operator: default
        id: state_default
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.default ]]]'
          label:
            - color: '[[[ return variables.text.label.color.default ]]]'
          name:
            - color: '[[[ return variables.text.name.color.default ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]    
  cb-lcars-button-base:
    template:
      - cb-lcars-base
      - cb-lcars-actions-toggle
    show_icon: false
    show_name: false
    show_label: true
    variables:
      label: ' '
      card:
        height: 60px
        min_height: 45px
        color:
          active: var(--lcars-ui-secondary)
          inactive: var(--lcars-ui-tertiary)
          background:
            default: null
            active: var(--lcars-ui-secondary)
            inactive: var(--lcars-ui-tertiary)
      text:
        label:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            'on': black
            'off': black
            zero: black
            non_zero: black
        state:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            'on': black
            'off': black
            zero: black
            non_zero: black
        name:
          padding:
            top: 5px
            bottom: 5px
            right: 24px
            left: 24px
          transform: uppercase
          font_size: null
          justify: right
          align_items: end
          color:
            default: black
            'on': black
            'off': black
            zero: black
            non_zero: black
      icon:
        size: 24px
        color:
          default: black
        justify: left
        border:
          top:
            size: 0px
            color: transparent
          bottom:
            size: 0px
            color: transparent
          left:
            size: 6px
            color: transparent
            padding: 0.5%
            margin: 0
          right:
            size: 6px
            color: black
            padding: 0.5%
            margin: null
    size: 35px
    styles:
      grid:
        - grid-template-areas: '"i n" "i s" "i l"'
      icon:
        - color: '[[[ return variables.icon.color.default ]]]'
        - display: flex
        - align-items: center
        - justify-content: left
        - height: '[[[ return variables.card.height || variables.card.min_height; ]]]'
        - border-left: >-
            [[[ return variables.icon.border.left.color + " solid " +
            variables.icon.border.left.size ]]]
        - border-right: >-
            [[[ return variables.icon.border.right.color + " solid " +
            variables.icon.border.right.size ]]]
        - '--mdc-icon-size': '[[[ return variables.icon.size; ]]]'
        - margin-left: '[[[ return variables.icon.border.left.margin ]]]'
        - margin-right: '[[[ return variables.icon.border.right.margin ]]]'
        - padding-left: '[[[ return variables.icon.border.left.padding ]]]'
        - padding-right: '[[[ return variables.icon.border.right.padding ]]]'
  cb-lcars-button-lozenge:
    template: cb-lcars-button-base
    variables:
      card:
        border:
          top:
            left_radius: null
            right_radius: null
          bottom:
            left_radius: null
            right_radius: null
  cb-lcars-button-lozenge-right:
    template: cb-lcars-button-lozenge
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        justify: right
        border:
          left:
            color: black
          right:
            color: transparent
  cb-lcars-button-bullet:
    template: cb-lcars-button-lozenge
    variables:
      card:
        border:
          top:
            left_radius: 0px
          bottom:
            left_radius: 0px
  cb-lcars-button-bullet-right:
    template: cb-lcars-button-lozenge-right
    variables:
      card:
        border:
          top:
            right_radius: 0px
          bottom:
            right_radius: 0px
  cb-lcars-button-capped:
    template: cb-lcars-button-lozenge
    variables:
      card:
        border:
          top:
            right_radius: 0px
          bottom:
            right_radius: 0px
  cb-lcars-button-capped-right:
    template: cb-lcars-button-lozenge-right
    variables:
      card:
        border:
          top:
            left_radius: 0px
          bottom:
            left_radius: 0px
  cb-lcars-header:
    template: cb-lcars-base
    show_label: true
    variables:
      card:
        height: 60px
        border:
          top:
            size: 20px
            left_radius: var(--ha-card-border-radius)
          left:
            size: 90px
      text:
        label:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        state:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        name:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
    styles:
      label:
        - border-top-right-radius: 0px
        - border-top-left-radius: >-
            [[[ return "calc(" + variables.card.border.top.left_radius + " / " +
            variables.card.border.inner.factor +" )";]]]
  cb-lcars-header-open:
    template: cb-lcars-base
    show_label: true
    variables:
      card:
        border:
          top:
            size: 20px
  cb-lcars-header-contained:
    template: cb-lcars-header-open
    variables:
      card:
        min_height: 40px
        border:
          left:
            size: 50px
          right:
            size: 50px
          top:
            size: 10px
            left_radius: var(--ha-card-border-radius)
            right_radius: var(--ha-card-border-radius)
          bottom:
            left_radius: 0px
            right_radius: 0px
    styles:
      label:
        - border-top-left-radius: >-
            [[[ return "calc(" + variables.card.border.top.left_radius + " / " +
            variables.card.border.inner.factor +" )";]]]
        - border-top-right-radius: >-
            [[[ return "calc(" + variables.card.border.top.right_radius + " / "
            + variables.card.border.inner.factor +" )";]]]
  cb-lcars-header-right:
    template: cb-lcars-base
    show_label: true
    variables:
      card:
        height: 60px
        border:
          top:
            size: 20px
            left_radius: 0px
            right_radius: var(--ha-card-border-radius)
          right:
            size: 90px
          bottom:
            right_radius: 0px
      text:
        label:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        state:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        name:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
    styles:
      label:
        - border-top-left-radius: 0px
        - border-top-right-radius: >-
            [[[ return "calc(" + variables.card.border.top.right_radius + " / "
            + variables.card.border.inner.factor +" )";]]]
  cb-lcars-callout-base:
    variables:
      card:
        border:
          top:
            left_radius: 0
            right_radius: 0
          bottom:
            left_radius: 0
            right_radius: 0
    styles:
      label:
        - border-top-right-radius: 0px
        - border-top-left-radius: 0px
        - border-bottom-right-radius: 0px
        - border-bottom-left-radius: 0px
  cb-lcars-header-callout:
    template:
      - cb-lcars-header
      - cb-lcars-callout-base
    variables:
      card:
        border:
          top:
            size: 10px
          left:
            size: 10px
  cb-lcars-header-callout-right:
    template:
      - cb-lcars-header-right
      - cb-lcars-callout-base
    variables:
      card:
        border:
          top:
            size: 10px
          right:
            size: 10px
  cb-lcars-footer-base:
    template: cb-lcars-base
    variables:
      card:
        border:
          color: var(--lcars-card-bottom-color)
  cb-lcars-footer:
    template: cb-lcars-footer-base
    show_label: true
    variables:
      card:
        height: 60px
        border:
          left:
            size: 90px
          bottom:
            size: 20px
            left_radius: var(--ha-card-border-radius)
      text:
        label:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        state:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
        name:
          padding:
            top: 10px
            left: 20px
            right: 0px
            bottom: 10px
          align: left
          justify: left
    styles:
      label:
        - border-bottom-left-radius: >-
            [[[ return "calc(" + variables.card.border.bottom.left_radius + " /
            " + variables.card.border.inner.factor +" )";]]]
        - border-bottom-right-radius: 0px
  cb-lcars-footer-open:
    template: cb-lcars-footer-base
    show_label: true
    variables:
      card:
        border:
          bottom:
            size: 20px
  cb-lcars-footer-contained:
    template: cb-lcars-footer-open
    show_label: true
    variables:
      card:
        min_height: 40px
        border:
          left:
            size: 50px
          right:
            size: 50px
          bottom:
            size: 10px
            left_radius: var(--ha-card-border-radius)
            right_radius: var(--ha-card-border-radius)
          top:
            left_radius: 0px
            right_radius: 0px
    styles:
      label:
        - border-bottom-left-radius: >-
            [[[ return "calc(" + variables.card.border.bottom.left_radius + " /
            " + variables.card.border.inner.factor +" )";]]]
        - border-bottom-right-radius: >-
            [[[ return "calc(" + variables.card.border.bottom.right_radius + " /
            " + variables.card.border.inner.factor +" )";]]]
  cb-lcars-footer-right:
    template: cb-lcars-footer-base
    show_label: true
    variables:
      card:
        height: 60px
        border:
          right:
            size: 90px
          bottom:
            size: 20px
            right_radius: var(--ha-card-border-radius)
      text:
        label:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        state:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
        name:
          padding:
            top: 10px
            left: 0px
            right: 20px
            bottom: 10px
          align: left
          justify: right
    styles:
      label:
        - border-bottom-left-radius: 0px
        - border-bottom-right-radius: >-
            [[[ return "calc(" + variables.card.border.bottom.right_radius + " /
            " + variables.card.border.inner.factor +" )";]]]
  cb-lcars-footer-callout:
    template:
      - cb-lcars-footer
      - cb-lcars-callout-base
    variables:
      card:
        border:
          bottom:
            size: 10px
          left:
            size: 10px
  cb-lcars-footer-callout-right:
    template:
      - cb-lcars-footer-right
      - cb-lcars-callout-base
    variables:
      card:
        border:
          bottom:
            size: 10px
          right:
            size: 10px
  cb-lcars-header-picard:
    template:
      - cb-lcars-card-base
    variables:
      card:
        height: 100px
        width: 400px
        border:
          top:
            left_radius: var(--ha-card-border-radius)
            right_radius: 0px !important
          bottom:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      card_label: ' '
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 20px
          left:
            size: 180px
          bottom:
            size: 0
          right:
            size: 0
      lcars_outer:
        card:
          color: var(--lcars-card-top-color)
          border:
            left:
              size: >-
                [[[ return "calc( ((" + variables.lcars.border.left.size + " - "
                + variables.lcars.border.gap + ") / " +
                variables.lcars.border.factor + ") * (" +
                variables.lcars.border.factor + " - 1)" + ")";]]]
            top:
              size: >-
                [[[ return "calc((" + variables.lcars.border.top.size + " - " +
                variables.lcars.border.gap + ") / 2)";]]]
      lcars_inner:
        card:
          color: var(--lcars-card-top-color)
          border:
            left:
              size: >-
                [[[ return "calc((" + variables.lcars.border.left.size + " - " +
                variables.lcars.border.gap + " ) / " +
                variables.lcars.border.factor + ")" ;]]]
            top:
              size: >-
                [[[ return "calc((" + variables.lcars.border.top.size + " - " +
                variables.lcars.border.gap + ") / 2)";]]]
              left_radius: >-
                [[[ return "calc((" + variables.card.border.top.left_radius + "
                ) / " + variables.card.border.inner.factor +" )";]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.card.height; ]]]'
        - width: '[[[ return variables.card.width; ]]]'
        - border-top-left-radius: '[[[ return variables.card.border.top.left_radius ]]]'
        - border-top-right-radius: '[[[ return variables.card.border.top.right_radius ]]]'
        - border-bottom-left-radius: '[[[ return variables.card.border.bottom.left_radius ]]]'
        - border-bottom-right-radius: '[[[ return variables.card.border.bottom.right_radius ]]]'
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - top: >-
              [[[ return "calc( (" + variables.lcars_outer.card.border.top.size
              + " + " + variables.lcars.border.gap + ")  ) "; ]]]
          - left: >-
              [[[ return "calc( (" + variables.lcars_outer.card.border.left.size
              + " + " + variables.lcars.border.gap + ")  ) "; ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:button-card
          template:
            - cb-lcars-header
          variables:
            card:
              width: '[[[ return variables.card.width; ]]]'
              height: '[[[ return variables.card.height; ]]]'
              border:
                top:
                  left_radius: '[[[ return variables.card.border.top.left_radius ]]]'
                  size: '[[[ return variables.lcars_outer.card.border.top.size ]]]'
                left:
                  size: '[[[ return variables.lcars_outer.card.border.left.size ]]]'
                  right_radius: 0px
                inner:
                  factor: '[[[ return variables.card.border.inner.factor; ]]]'
                  width: '[[[ return variables.card.border.inner.width ]]]'
                color: '[[[ return variables.lcars_outer.card.color ]]]'
      lcars_inner:
        card:
          type: custom:button-card
          template:
            - cb-lcars-header
          label: '[[[ return variables.card_label; ]]]'
          variables:
            card:
              width: '[[[ return variables.card.width ]]]'
              height: '[[[ return variables.card.height ]]]'
              border:
                color: '[[[ return variables.lcars_inner.card.color ]]]'
                left:
                  size: '[[[ return variables.lcars_inner.card.border.left.size ]]]'
                top:
                  size: '[[[ return variables.lcars_inner.card.border.top.size ]]]'
                  left_radius: >-
                    [[[ return variables.lcars_inner.card.border.top.left_radius
                    ]]]
                  right_radius: 0px
                inner:
                  factor: >-
                    [[[ return variables.lcars_inner.card.border.inner.factor
                    ]]]
  cb-lcars-header-picard-right:
    template:
      - cb-lcars-card-base
    variables:
      card:
        height: 100px
        width: 400px
        border:
          top:
            left_radius: 0px !important
            right_radius: var(--ha-card-border-radius)
          bottom:
            left_radius: 0px !important
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      card_label: ' '
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 20px
          left:
            size: 0
          bottom:
            size: 0
          right:
            size: 180px
      lcars_outer:
        card:
          color: var(--lcars-card-top-color)
          border:
            right:
              size: >-
                [[[ return "calc( ((" + variables.lcars.border.right.size + " -
                " + variables.lcars.border.gap + ") / " +
                variables.lcars.border.factor + ") * (" +
                variables.lcars.border.factor + " - 1)" + ")";]]]
            top:
              size: >-
                [[[ return "calc((" + variables.lcars.border.top.size + " - " +
                variables.lcars.border.gap + ") / 2)";]]]
      lcars_inner:
        card:
          color: var(--lcars-card-top-color)
          border:
            right:
              size: >-
                [[[ return "calc((" + variables.lcars.border.right.size + " - "
                + variables.lcars.border.gap + " ) / " +
                variables.lcars.border.factor + ")" ;]]]
            top:
              size: >-
                [[[ return "calc((" + variables.lcars.border.top.size + " - " +
                variables.lcars.border.gap + ") / 2)";]]]
              right_radius: >-
                [[[ return "calc((" + variables.card.border.top.right_radius + "
                ) / " + variables.card.border.inner.factor +" )";]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.card.height; ]]]'
        - width: '[[[ return variables.card.width; ]]]'
        - border-top-left-radius: '[[[ return variables.card.border.top.left_radius ]]]'
        - border-top-right-radius: '[[[ return variables.card.border.top.right_radius ]]]'
        - border-bottom-left-radius: '[[[ return variables.card.border.bottom.left_radius ]]]'
        - border-bottom-right-radius: '[[[ return variables.card.border.bottom.right_radius ]]]'
      custom_fields:
        lcars_outer:
          - position: absolute
          - top: 0
          - right: 0
        lcars_inner:
          - position: absolute
          - top: >-
              [[[ return "calc( (" + variables.lcars_outer.card.border.top.size
              + " + " + variables.lcars.border.gap + ")  ) "; ]]]
          - right: >-
              [[[ return "calc( (" +
              variables.lcars_outer.card.border.right.size + " + " +
              variables.lcars.border.gap + ")  ) "; ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:button-card
          template:
            - cb-lcars-header-right
          variables:
            card:
              width: '[[[ return variables.card.width; ]]]'
              height: '[[[ return variables.card.height; ]]]'
              border:
                top:
                  right_radius: '[[[ return variables.card.border.top.right_radius ]]]'
                  left_radius: 0
                  size: '[[[ return variables.lcars_outer.card.border.top.size ]]]'
                left:
                  size: 0px
                right:
                  size: '[[[ return variables.lcars_outer.card.border.right.size ]]]'
                inner:
                  factor: '[[[ return variables.card.border.inner.factor; ]]]'
                  width: '[[[ return variables.card.border.inner.width ]]]'
                color: '[[[ return variables.lcars_outer.card.color ]]]'
      lcars_inner:
        card:
          type: custom:button-card
          template:
            - cb-lcars-header-right
          label: '[[[ return variables.card_label; ]]]'
          variables:
            card:
              width: '[[[ return variables.card.width ]]]'
              height: '[[[ return variables.card.height ]]]'
              border:
                color: '[[[ return variables.lcars_inner.card.color ]]]'
                right:
                  size: '[[[ return variables.lcars_inner.card.border.right.size ]]]'
                top:
                  size: '[[[ return variables.lcars_inner.card.border.top.size ]]]'
                  right_radius: >-
                    [[[ return
                    variables.lcars_inner.card.border.top.right_radius ]]]
                  left_radius: 0px
                inner:
                  factor: >-
                    [[[ return variables.lcars_inner.card.border.inner.factor
                    ]]]
  cb-lcars-footer-picard:
    template:
      - cb-lcars-card-base
    variables:
      card:
        height: 100px
        width: 400px
        border:
          top:
            left_radius: 0px !important
            right_radius: 0px !important
          bottom:
            left_radius: var(--ha-card-border-radius)
            right_radius: 0px !important
          inner:
            factor: 1
            width: 35px
      card_label: ' '
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 0
          left:
            size: 180px
          bottom:
            size: 20px
          right:
            size: 0
      lcars_outer:
        card:
          color: var(--lcars-card-bottom-color)
          border:
            left:
              size: >-
                [[[ return "calc( ((" + variables.lcars.border.left.size + " - "
                + variables.lcars.border.gap + ") / " +
                variables.lcars.border.factor + ") * (" +
                variables.lcars.border.factor + " - 1)" + ")";]]]
            bottom:
              size: >-
                [[[ return "calc((" + variables.lcars.border.bottom.size + " - "
                + variables.lcars.border.gap + ") / 2)";]]]
      lcars_inner:
        card:
          color: var(--lcars-card-bottom-color)
          border:
            left:
              size: >-
                [[[ return "calc((" + variables.lcars.border.left.size + " - " +
                variables.lcars.border.gap + " ) / " +
                variables.lcars.border.factor + ")" ;]]]
            bottom:
              size: >-
                [[[ return "calc((" + variables.lcars.border.bottom.size + " - "
                + variables.lcars.border.gap + ") / 2)";]]]
              left_radius: >-
                [[[ return "calc((" + variables.card.border.bottom.left_radius +
                " ) / " + variables.card.border.inner.factor +" )";]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.card.height; ]]]'
        - width: '[[[ return variables.card.width; ]]]'
        - border-top-left-radius: '[[[ return variables.card.border.top.left_radius ]]]'
        - border-top-right-radius: '[[[ return variables.card.border.top.right_radius ]]]'
        - border-bottom-left-radius: '[[[ return variables.card.border.bottom.left_radius ]]]'
        - border-bottom-right-radius: '[[[ return variables.card.border.bottom.right_radius ]]]'
      custom_fields:
        lcars_outer:
          - position: absolute
          - bottom: 0
          - left: 0
        lcars_inner:
          - position: absolute
          - bottom: >-
              [[[ return "calc( (" +
              variables.lcars_outer.card.border.bottom.size + " + " +
              variables.lcars.border.gap + ")  ) "; ]]]
          - left: >-
              [[[ return "calc( (" + variables.lcars_outer.card.border.left.size
              + " + " + variables.lcars.border.gap + ")  ) "; ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:button-card
          template:
            - cb-lcars-footer
          variables:
            card:
              width: '[[[ return variables.card.width; ]]]'
              height: '[[[ return variables.card.height; ]]]'
              border:
                bottom:
                  left_radius: '[[[ return variables.card.border.bottom.left_radius ]]]'
                  size: '[[[ return variables.lcars_outer.card.border.bottom.size ]]]'
                left:
                  size: '[[[ return variables.lcars_outer.card.border.left.size ]]]'
                  right_radius: 0px
                inner:
                  factor: '[[[ return variables.card.border.inner.factor; ]]]'
                  width: '[[[ return variables.card.border.inner.width ]]]'
                color: '[[[ return variables.lcars_outer.card.color ]]]'
      lcars_inner:
        card:
          type: custom:button-card
          template:
            - cb-lcars-footer
          label: '[[[ return variables.card_label; ]]]'
          variables:
            card:
              width: '[[[ return variables.card.width ]]]'
              height: '[[[ return variables.card.height ]]]'
              border:
                color: '[[[ return variables.lcars_inner.card.color ]]]'
                left:
                  size: '[[[ return variables.lcars_inner.card.border.left.size ]]]'
                bottom:
                  size: '[[[ return variables.lcars_inner.card.border.bottom.size ]]]'
                  left_radius: >-
                    [[[ return
                    variables.lcars_inner.card.border.bottom.left_radius ]]]
                  right_radius: 0px
                inner:
                  factor: >-
                    [[[ return variables.lcars_inner.card.border.inner.factor
                    ]]]
  cb-lcars-footer-picard-right:
    template:
      - cb-lcars-card-base
    variables:
      card:
        height: 100px
        width: 400px
        border:
          top:
            left_radius: 0px !important
            right_radius: 0px !important
          bottom:
            left_radius: 0px !important
            right_radius: var(--ha-card-border-radius)
          inner:
            factor: 1
            width: 35px
      card_label: ' '
      lcars:
        border:
          gap: 4px
          factor: 4
          top:
            size: 0
          left:
            size: 0
          bottom:
            size: 20px
          right:
            size: 180px
      lcars_outer:
        card:
          color: var(--lcars-card-bottom-color)
          border:
            right:
              size: >-
                [[[ return "calc( ((" + variables.lcars.border.right.size + " -
                " + variables.lcars.border.gap + ") / " +
                variables.lcars.border.factor + ") * (" +
                variables.lcars.border.factor + " - 1)" + ")";]]]
            bottom:
              size: >-
                [[[ return "calc((" + variables.lcars.border.bottom.size + " - "
                + variables.lcars.border.gap + ") / 2)";]]]
      lcars_inner:
        card:
          color: var(--lcars-card-bottom-color)
          border:
            right:
              size: >-
                [[[ return "calc((" + variables.lcars.border.right.size + " - "
                + variables.lcars.border.gap + " ) / " +
                variables.lcars.border.factor + ")" ;]]]
            bottom:
              size: >-
                [[[ return "calc((" + variables.lcars.border.bottom.size + " - "
                + variables.lcars.border.gap + ") / 2)";]]]
              right_radius: >-
                [[[ return "calc((" + variables.card.border.bottom.right_radius
                + " ) / " + variables.card.border.inner.factor +" )";]]]
            inner:
              factor: 2
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.card.height; ]]]'
        - width: '[[[ return variables.card.width; ]]]'
        - border-top-left-radius: '[[[ return variables.card.border.top.left_radius ]]]'
        - border-top-right-radius: '[[[ return variables.card.border.top.right_radius ]]]'
        - border-bottom-left-radius: '[[[ return variables.card.border.bottom.left_radius ]]]'
        - border-bottom-right-radius: '[[[ return variables.card.border.bottom.right_radius ]]]'
      custom_fields:
        lcars_outer:
          - position: absolute
          - bottom: 0
          - right: 0
        lcars_inner:
          - position: absolute
          - bottom: >-
              [[[ return "calc( (" +
              variables.lcars_outer.card.border.bottom.size + " + " +
              variables.lcars.border.gap + ")  ) "; ]]]
          - right: >-
              [[[ return "calc( (" +
              variables.lcars_outer.card.border.right.size + " + " +
              variables.lcars.border.gap + ")  ) "; ]]]
    custom_fields:
      lcars_outer:
        card:
          type: custom:button-card
          template:
            - cb-lcars-footer-right
          variables:
            card:
              width: '[[[ return variables.card.width; ]]]'
              height: '[[[ return variables.card.height; ]]]'
              border:
                bottom:
                  right_radius: '[[[ return variables.card.border.bottom.right_radius ]]]'
                  size: '[[[ return variables.lcars_outer.card.border.bottom.size ]]]'
                right:
                  size: '[[[ return variables.lcars_outer.card.border.right.size ]]]'
                  left_radius: 0px
                inner:
                  factor: '[[[ return variables.card.border.inner.factor; ]]]'
                  width: '[[[ return variables.card.border.inner.width ]]]'
                color: '[[[ return variables.lcars_outer.card.color ]]]'
      lcars_inner:
        card:
          type: custom:button-card
          template:
            - cb-lcars-footer-right
          label: '[[[ return variables.card_label; ]]]'
          variables:
            card:
              width: '[[[ return variables.card.width ]]]'
              height: '[[[ return variables.card.height ]]]'
              border:
                color: '[[[ return variables.lcars_inner.card.color ]]]'
                right:
                  size: '[[[ return variables.lcars_inner.card.border.right.size ]]]'
                bottom:
                  size: '[[[ return variables.lcars_inner.card.border.bottom.size ]]]'
                  right_radius: >-
                    [[[ return
                    variables.lcars_inner.card.border.bottom.right_radius ]]]
                  left_radius: 0px
                inner:
                  factor: >-
                    [[[ return variables.lcars_inner.card.border.inner.factor
                    ]]]
  cb-lcars-label:
    template: cb-lcars-base
    show_label: true
    variables:
      card:
        min_height: 40px
        color:
          background:
            inactive: transparent
      text:
        label:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
          color:
            'on': var(--lcars-green)
            'off': var(--lcars-blue)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
        state:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
          color:
            'on': var(--lcars-green)
            'off': var(--lcars-blue)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
        name:
          font_size: 40px
          font_weight: bold
          padding:
            top: 0px
            bottom: 5px
          transform: uppercase
          align: center
          justify: center
          color:
            'on': var(--lcars-green)
            'off': var(--lcars-blue)
            zero: var(--lcars-green)
            non_zero: var(--lcars-blue)
            hvac_heat: var(--lcars-orange)
            hvac_cool: var(--lcars-blue)
            hvac_other: var(--lcars-purple)
  cb-lcars-button-square:
    template: cb-lcars-button-base
    show_icon: false
  cb-lcars-button-picard:
    template: cb-lcars-button-base
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.lcars_color ]]]'
            'on': '[[[ return variables.card.color.active ]]]'
            'off': '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.active ]]]'
            non_zero: '[[[ return variables.card.color.inactive ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.lcars_color ]]]'
            'on': '[[[ return variables.card.color.active ]]]'
            'off': '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.active ]]]'
            non_zero: '[[[ return variables.card.color.inactive ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          color:
            default: '[[[ return variables.lcars_color ]]]'
            'on': '[[[ return variables.card.color.active ]]]'
            'off': '[[[ return variables.card.color.inactive ]]]'
            zero: '[[[ return variables.card.color.active ]]]'
            non_zero: '[[[ return variables.card.color.inactive ]]]'
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
      icon:
        color:
          default: null
          active: '[[[ return variables.card.color.active ]]]'
          inactive: '[[[ return variables.card.color.inactive ]]]'
      card:
        border:
          top:
            size: 4px
          left:
            size: 4px
          right:
            size: 4px
          bottom:
            size: 4px
        color:
          background:
            default: transparent
            active: transparent
            inactive: transparent
  cb-lcars-button-picard-dense:
    template: cb-lcars-button-picard
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-right:
    template: cb-lcars-button-picard
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        justify: right
        border:
          left:
            color: black
          right:
            color: transparent
  cb-lcars-button-picard-dense-right:
    template: cb-lcars-button-picard-right
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-label-east:
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-west:
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-ne:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-se:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-nw:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-label-sw:
    variables:
      text:
        label:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-state-east:
    variables:
      text:
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-west:
    variables:
      text:
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-ne:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-se:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-nw:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-state-sw:
    variables:
      text:
        state:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-name-east:
    variables:
      text:
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-west:
    variables:
      text:
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          justify: left
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-ne:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-se:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: right
          align_items: flex-end
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-nw:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-start
          padding:
            top: 5px
            left: 10px
            right: 10px
            bottom: 5px
  cb-lcars-button-picard-name-sw:
    variables:
      text:
        name:
          font_size: 18px
          font_weight: normal
          justify: left
          align_items: flex-end
          padding:
            padding:
              top: 5px
              left: 10px
              right: 10px
              bottom: 5px
  cb-lcars-button-picard-filled:
    template: cb-lcars-button-base
    variables:
      text:
        label:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            'on': black
            'off': black
            zero: var(--picard-green)
            non_zero: var(--picard-blue)
            hvac_heat: var(--picard-pale-orange)
            hvac_cool: var(--picard-blue)
            hvac_other: var(--picard-black-cherry)
        state:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            'on': black
            'off': black
            zero: var(--picard-green)
            non_zero: var(--picard-blue)
            hvac_heat: var(--picard-pale-orange)
            hvac_cool: var(--picard-blue)
            hvac_other: var(--picard-black-cherry)
        name:
          font_weight: normal
          font_size: 22px
          align_items: center
          padding:
            top: 0px
            left: 10px
            right: 10px
            bottom: 5px
          color:
            default: black
            'on': black
            'off': black
            zero: var(--picard-green)
            non_zero: var(--picard-blue)
            hvac_heat: var(--picard-pale-orange)
            hvac_cool: var(--picard-blue)
            hvac_other: var(--picard-black-cherry)
    state:
      - value: open
        id: state_open
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - color: '[[[ return variables.card.color.active ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - value: closed
        id: state_closed
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - color: '[[[ return variables.card.color.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
      - value: heat
        id: state_heat
        styles:
          card:
            - background-color: '[[[ return variables.text.state.color.hvac_heat ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - value: cool
        id: state_cool
        styles:
          card:
            - background-color: '[[[ return variables.text.state.color.hvac_cool ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - operator: template
        value: |
          [[[
            return entity !== undefined && ['00', '0'].includes(states[entity.entity_id].state);
          ]]]
        id: state_zero
        styles:
          card:
            - background-color: '[[[ return variables.text.state.color.zero ]]]'
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
      - operator: template
        value: |
          [[[
            return entity !== undefined && states[entity.entity_id].state !== '0';
          ]]]
        id: state_nonzero
        styles:
          card:
            - background-color: '[[[ return variables.text.state.color.non_zero ]]]'
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
      - value: 'on'
        id: state_on
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.active ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.active ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.active ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.active ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.active ]]]
          state:
            - color: '[[[ return variables.text.state.color.on ]]]'
          label:
            - color: '[[[ return variables.text.label.color.on ]]]'
          name:
            - color: '[[[ return variables.text.name.color.on ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.active ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.active ||
                variables.card.color.background.active ]]]
      - value: 'off'
        id: state_off
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
            - border-top: >-
                [[[ return variables.card.border.top.size + " solid " +
                variables.card.color.inactive ]]]
            - border-left: >-
                [[[ return variables.card.border.left.size + " solid " +
                variables.card.color.inactive ]]]
            - border-right: >-
                [[[ return variables.card.border.right.size + " solid " +
                variables.card.color.inactive ]]]
            - border-bottom: >-
                [[[ return variables.card.border.bottom.size + " solid " +
                variables.card.color.inactive ]]]          
          state:
            - color: '[[[ return variables.text.state.color.off ]]]'
          label:
            - color: '[[[ return variables.text.label.color.off ]]]'
          name:
            - color: '[[[ return variables.text.name.color.off ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]
      - operator: default
        id: state_default
        styles:
          card:
            - background-color: '[[[ return variables.card.color.background.inactive ]]]'
          state:
            - color: '[[[ return variables.text.state.color.default ]]]'
          label:
            - color: '[[[ return variables.text.label.color.default ]]]'
          name:
            - color: '[[[ return variables.text.name.color.default ]]]'
          icon:
            - color: >-
                [[[ return variables.icon.color.inactive ||
                variables.icon.color.default ]]]
            - background: >-
                [[[ return variables.icon.color.background.inactive ||
                variables.card.color.background.inactive ]]]   
  cb-lcars-button-picard-filled-dense:
    template: cb-lcars-button-picard-filled
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-filled-right:
    template: cb-lcars-button-picard-filled
    variables:
      text:
        label:
          justify: left
        state:
          justify: left
        name:
          justify: left
      icon:
        justify: right
        border:
          left:
            color: black
          right:
            color: transparent
  cb-lcars-button-picard-filled-dense-right:
    template: cb-lcars-button-picard-filled-right
    variables:
      card:
        height: 50px
  cb-lcars-button-picard-icon:
    template:
      - cb-lcars-button-picard-filled-dense
      - cb-lcars-actions-toggle
    variables:
      card:
        width: 40px
        height: 40px
        min_height: 40px
        border:
          top:
            left_radius: 10px
            right_radius: 10px
          bottom:
            left_radius: 10px
            right_radius: 10px
      icon:
        border:
          left: 0px
          right: 0px
        align-items: center
        justify: center
    styles:
      grid:
        - grid-template-areas: '"i"'
    size: 30px
    show_icon: true
    show_label: false
  cb-lcars-button-grid:
    template:
      - cb-lcars-card-base
      - cb-lcars-functions
    variables:
      card:
        width: null
        height: null
      grid:
        auto_calc_X: true
        auto_calc_Y: true
        buttons: []
        X: 3
        'Y': 2
        template_columns: null
        auto_rows: null
        gap: 5px
      button:
        type: custom:button-card
        variables:
          card:
            width: 180px
            height: 45px
            min_height: 10px
            color:
              active: var(--lcars-ui-secondary)
              inactive: var(--lcars-ui-primary)
              background:
                active: var(--lcars-ui-secondary)
                inactive: var(--lcars-ui-primary)
              default: null
          icon:
            border:
              right:
                padding: 2%
            color:
              active: null
              inactive: null
            background:
              active: null
              inactive: null
        template:
          - cb-lcars-button-picard-filled
          - cb-lcars-button-picard-label-se
          - cb-lcars-button-picard-name-nw
          - cb-lcars-button-picard-state-sw
          - cb-lcars-actions-disable
        size: 22px
        show_name: false
        show_state: false
        show_label: true
        show_icon: false
      y_grid_X: >
        [[[ return variables.grid.auto_calc_X ?
        variables.__calculate_grid_cells(variables.card.width,
        variables.button.variables.card.width, variables.grid.gap,
        variables.grid.X) : variables.grid.X ]]]
      y_grid_Y: >
        [[[ return variables.grid.auto_calc_Y ?
        variables.__calculate_grid_cells(variables.card.height,
        variables.button.variables.card.height, variables.grid.gap,
        variables.grid.Y) : variables.grid.Y ]]]
      y_total_cards: '[[[ return variables.y_grid_X * variables.y_grid_Y; ]]]'
      z_card_width: >
        [[[ return variables.card.width || "calc( ((" +
        variables.button.variables.card.width + " + " + variables.grid.gap + " )
        *" + variables.y_grid_X + ") - " + variables.grid.gap + ")";

        ]]]
      z_card_height: >
        [[[ return variables.card.height || "calc( ((" +
        variables.button.variables.card.height + " + " + variables.grid.gap + "
        ) *" + variables.y_grid_Y + ") - " + variables.grid.gap + ")";

        ]]]
    styles:
      card:
        - height: '[[[ return variables.z_card_height ]]]'
        - width: '[[[ return variables.z_card_width ]]]'
        - border-radius: 0 !important
      custom_fields:
        button_grid:
          - position: absolute
          - top: 0px
          - left: 0px
    custom_fields:
      button_grid:
        card:
          type: custom:layout-card
          layout_type: custom:grid-layout
          layout:
            grid-template-columns: >-
              [[[ return variables.grid.template_columns || "repeat(" +
              variables.y_grid_X + ", " + variables.button.variables.card.width
              + ")"; ]]]
            grid-auto-rows: >-
              [[[ return variables.grid.auto_rows ||
              variables.button.variables.card.height; ]]]
            grid-gap: '[[[ return variables.grid.gap; ]]]'
            card_margin: 0
            padding: 0
            margin: '-4px -4px 0px -4px'
          cards: |
            [[[
              let resultArray = [];

              for (let x = 1; x <= variables.y_total_cards; x++) {
                let cardObject = variables.grid.buttons && variables.grid.buttons[x-1] ? variables.grid.buttons[x-1] : {};

                let defaultVariables = variables.button;
                //cardObject.variables = {...defaultVariables, ...cardObject.variables};
                cardObject = variables.__deepMerge(defaultVariables, cardObject);
                
                let additionalObject = {
                  view_layout: {
                    show: '[[[ return variables.y_total_cards >= x ? "always" : "never"; ]]]'
                  },
                  show_label: variables.button.show_label,
                  label: variables.button.label || (((Math.floor(Math.random() * 256).toString(16).padStart(2, '0')) + "-" + (Math.floor(Math.random() * 4096).toString(16).padStart(3, '0')))),
                };
                //resultArray.push({...additionalObject, ...cardObject});
                resultArray.push(variables.__deepMerge({...additionalObject}, cardObject));
              }
              return resultArray;
            ]]]
  cb-lcars-button-grid-old:
    template:
      - cb-lcars-card-base
      - cb-lcars-functions
    variables:
      grid:
        buttons: []
        X: 3
        'Y': 2
        template_columns: null
        auto_rows: null
        gap: 5px
      button:
        type: custom:button-card
        variables:
          card:
            width: 180px
            height: 45px
            min_height: 45px
            color:
              active: var(--lcars-ui-secondary)
              inactive: var(--lcars-ui-primary)
              background:
                active: var(--picard-cyan)
                inactive: var(--lcars-ui-primary)
              default: null
          icon:
            border:
              right:
                padding: 2%
            color:
              active: null
              inactive: null
            background:
              active: null
              inactive: null
        template:
          - cb-lcars-button-picard-filled
          - cb-lcars-button-picard-label-se
          - cb-lcars-button-picard-name-nw
          - cb-lcars-button-picard-state-sw
          - cb-lcars-actions-disable
        size: 22px
        show_name: false
        show_state: false
        show_label: true
        show_icon: false
      card:
        width: null
        height: null
      y_total_cards: '[[[ return variables.grid.X * variables.grid.Y; ]]]'
      z_card_width: >
        [[[ return variables.card.width || "calc((" +

        variables.button.variables.card.width + " + " + variables.grid.gap + ")
        * " + variables.grid.X + ")";

        ]]]
      z_card_height: >
        [[[ return variables.card.height || "calc( " +

        "(" + variables.button.variables.card.height + " + " +
        variables.grid.gap + ") " + 

        " * " +

        "( " + variables.y_total_cards + " / " + variables.grid.X + "))";

        ]]]
    styles:
      card:
        - height: '[[[ return variables.z_card_height ]]]'
        - width: '[[[ return variables.z_card_width ]]]'
        - border-radius: 0 !important
      custom_fields:
        button_grid:
          - position: absolute
          - top: 0px
          - left: 0px
    custom_fields:
      button_grid:
        card:
          type: custom:layout-card
          layout_type: custom:grid-layout
          layout:
            grid-template-columns: >-
              [[[ return variables.grid.template_columns || "repeat(" +
              variables.grid.X + ", " + variables.button.variables.card.width +
              ")"; ]]]
            grid-auto-rows: >-
              [[[ return variables.grid.auto_rows ||
              variables.button.variables.card.height; ]]]
            grid-gap: '[[[ return variables.grid.gap; ]]]'
            card_margin: 0
            padding: 0
            margin: '-4px -4px 0px -4px'
          cards: |
            [[[
              let resultArray = [];

              for (let x = 1; x <= variables.y_total_cards; x++) {
                let cardObject = variables.grid.buttons && variables.grid.buttons[x-1] ? variables.grid.buttons[x-1] : {};

                let defaultVariables = variables.button;
                //cardObject.variables = {...defaultVariables, ...cardObject.variables};
                cardObject = variables.__deepMerge(defaultVariables, cardObject);
                
                let additionalObject = {
                  view_layout: {
                    show: '[[[ return variables.y_total_cards >= x ? "always" : "never"; ]]]'
                  },
                  show_label: variables.button.show_label,
                  label: variables.button.label || (((Math.floor(Math.random() * 256).toString(16).padStart(2, '0')) + "-" + (Math.floor(Math.random() * 4096).toString(16).padStart(3, '0')))),
                };
                //resultArray.push({...additionalObject, ...cardObject});
                resultArray.push(variables.__deepMerge({...additionalObject}, cardObject));
              }
              return resultArray;
            ]]]
  cb-lcars-button-grid-icons:
    type: custom:button-card
    template:
      - cb-lcars-button-grid
    variables:
      grid:
        X: 5
        'Y': 1
      button:
        variables:
          card:
            width: 40px
            height: 40px
        template:
          - cb-lcars-button-picard-icon
        show_icon: true
        show_label: false
  cb-lcars-meter:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
      - cb-lcars-button-grid
    variables:
      card:
        height: null
        width: null
      button:
        variables:
          card:
            height: 20px
            min_height: 5px
            width: 100px
        show_label: false
        template:
          - cb-lcars-button-lozenge
      gradient_start_color: var(--error-color)
      gradient_start_rgb: |
        [[[ 
          return variables.__hex_to_rgba(variables.gradient_start_color)
         ]]]
      gradient_end_color: var(--lcars-blue)
      gradient_end_rgb: |
        [[[ 
          return variables.__hex_to_rgba(variables.gradient_end_color) 
        ]]]
      _gradient:
        X: 1
        'Y': 10
        gap: 5px
      gradient_X: >-
        [[[ return variables.__calculate_grid_cells(variables.card.width,
        variables.button.variables.card.width, variables._gradient.gap,
        variables._gradient.X) ]]]
      gradient_Y: >-
        [[[ return variables.__calculate_grid_cells(variables.card.height,
        variables.button.variables.card.height, variables._gradient.gap,
        variables._gradient.Y) ]]]
      grid:
        X: '[[[ return variables.gradient_X ]]]'
        'Y': '[[[ return variables.gradient_Y ]]]'
        gap: '[[[ return variables._gradient.gap ]]]'
        buttons: |
          [[[ 
            let buttons = [];
            let total_steps = (variables.gradient_X > variables.gradient_Y) ? variables.gradient_X : variables.gradient_Y;
            //console.debug("grid_X: " + variables.grid_X);
            //console.debug("total_steps: " + total_steps);
            for(let i = 0; i < total_steps ; i++) {
              buttons.push({
                variables: {
                  card: {
                    color: {
                      background: {
                        inactive: variables.__interpolated_rgb(variables.gradient_start_rgb,variables.gradient_end_rgb, i, total_steps)
                      },
                    },
                  },
                },
              });
            }
            
            return buttons;
          ]]]
  cb-lcars-meter-old:
    template:
      - cb-lcars-functions
      - cb-lcars-button-grid
    variables:
      gradient_start_color: var(--error-color)
      gradient_start_rgb: |
        [[[ 
          return variables.__hex_to_rgba(variables.gradient_start_color)
         ]]]
      gradient_end_color: var(--lcars-blue)
      gradient_end_rgb: |
        [[[ 
          return variables.__hex_to_rgba(variables.gradient_end_color) 
        ]]]
      grid_AUTO_GAP: 10px
      grid_X: 1
      grid_Y: |
        [[[
          let card_height = variables.card_height ? parseInt(variables.card_height) : 0;
          let button_card_height = variables.button.variables.card_height ? parseInt(variables.button.variables.card_height) : 0;
          let grid_gap = variables.grid_AUTO_GAP ? parseInt(variables.grid_AUTO_GAP) : 0;

          // If card_height is not defined or is 0, return 10
          if (card_height === 0) {
            return 10;
          }
          // Calculate the number of grid cells that would fit
          let grid_Y = Math.floor(card_height + grid_gap / (button_card_height + grid_gap));
          return grid_Y;
        ]]]      
      button:
        variables:
          card_height: 20px
          card_min_height: 20px
          card_width: 100px
        show_label: false
        template: cb-lcars-lozenge
      grid_gap: '[[[ return variables.grid_AUTO_GAP ]]]'
      grid_buttons: |
        [[[ 
          let buttons = [];
          let total_steps = (variables.grid_X > variables.grid_Y) ? variables.grid_X : variables.grid_Y;
          for(let i = 0; i < total_steps ; i++) {
            buttons.push({
              variables: {
                card_inactive_background_color: variables.__interpolated_rgb(variables.gradient_start_rgb,variables.gradient_end_rgb, i, total_steps)
              }
            });
          }
          return buttons;
        ]]]
  cb-lcars-meter-horizontal:
    template:
      - cb-lcars-meter
    variables:
      button:
        variables:
          card:
            width: 10px
            height: 20px
        template:
          - cb-lcars-button-picard-filled
      _gradient:
        gap: 5px
        'Y': 1
        X: 25
  cb-lcars-slider:
    template:
      - cb-lcars-card-base
      - cb-lcars-functions
    entity: ''
    triggers_update: '[[[ return variables.entity ]]]'
    variables:
      card:
        width: 80px
        height: 300px
      entity: '[[[ return entity.entity_id ]]]'
      entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
      entity_match_slider_start: false
      entity_match_slider_end: false
      meter:
        template:
          - cb-lcars-meter
        variables:
          gradient_start_color: >
            [[[ return  variables.entity_match_slider_start ?
            variables.entity_color :

            "var(--error-color)" ]]]
          gradient_end_color: >
            [[[ return  variables.entity_match_slider_end ?
            variables.entity_color :

            "var(--success-color)" ]]]
          card:
            height: '[[[ return variables.card.height ]]]'
            width: '[[[ return variables.card.width ]]]'
          button:
            variables:
              card:
                height: 15px
                width: '[[[ return variables.card.width ]]]'
      slider:
        variables:
          mask_color: rgb(0,0,0,0.8)
          step: 1
    styles:
      card:
        - width: '[[[ return variables.card.width ]]]'
        - height: '[[[ return variables.card.height ]]]'
        - border-radius: 0 !important
        - background: none
      custom_fields:
        meter:
          - position: absolute
          - left: 0px
          - top: 0px
        slider:
          - position: absolute
          - left: 0px
          - top: 0px
          - z-index: 1
          - width: '[[[ return variables.card.width ]]]'
          - height: '[[[ return variables.card.height ]]]'
    custom_fields:
      meter:
        card:
          type: custom:button-card
          template: '[[[ return variables.meter.template ]]]'
          variables: '[[[ return variables.meter.variables ]]]'
      slider:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: brightness
          flipped: true
          inverse: true
          vertical: true
          step: '[[[ return variables.slider.variables.step; ]]]'
          styles:
            card:
              - width: '[[[ return variables.card.width ]]]'
              - height: '[[[ return variables.card.height ]]]'
              - background: none
              - border-radius: 0
            progress:
              - background-color: '[[[ return variables.slider.variables.mask_color; ]]]'
            container:
              - border-radius: 0
            track:
              - background: none
            thumb:
              - background: none
  cb-lcars-slider-old:
    variables:
      meter:
        template:
          - cb-lcars-meter
        variables:
          gradient_start_color: var(--error-color)
          gradient_end_color: var(--success-color)
          card_height: '[[[ return variables.card_height ]]]'
          card_width: '[[[ return variables.card_width ]]]'
          button:
            variables:
              card_height: 15px
              card_min_height: 15px
              card_width: '[[[ return variables.card_width ]]]'
      slider:
        variables:
          mask_color: rgb(0,0,0,0.8)
          step: 1
      card_width: 80px
      card_height: 300px
      entity: ''
    triggers_update: '[[[ return variables.entity ]]]'
    styles:
      card:
        - width: '[[[ return variables.card_width ]]]'
        - height: '[[[ return variables.card_height ]]]'
        - border-radius: 0 !important
        - background: none
      custom_fields:
        meter:
          - position: absolute
          - left: 0px
          - top: 0px
        slider:
          - position: absolute
          - left: 0px
          - top: 0px
          - z-index: 1
          - width: '[[[ return variables.card_width ]]]'
          - height: '[[[ return variables.card_height ]]]'
    custom_fields:
      meter:
        card:
          type: custom:button-card
          template: '[[[ return variables.meter.template ]]]'
          variables: '[[[ return variables.meter.variables; ]]]'
      slider:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: brightness
          flipped: true
          inverse: true
          vertical: true
          step: '[[[ return variables.slider.variables.step; ]]]'
          styles:
            card:
              - width: '[[[ return variables.card_width ]]]'
              - height: '[[[ return variables.card_height ]]]'
              - background: none
              - border-radius: 0
            progress:
              - background-color: '[[[ return variables.slider.variables.mask_color; ]]]'
            container:
              - border-radius: 0
            track:
              - background: none
            thumb:
              - background: none
  cb-lcars-slider-horizontal:
    template: cb-lcars-slider
    entity: ''
    variables:
      meter:
        template: cb-lcars-meter-horizontal
        variables:
          _gradient:
            gap: 5px
          button:
            template: cb-lcars-button-picard-filled
            variables:
              card:
                height: '[[[ return variables.card.height ]]]'
                width: 10px
      card:
        width: 375px
        height: 45px
    triggers_update: '[[[ return variables.entity  ]]]'
    custom_fields:
      slider:
        card:
          vertical: false
  cb-lcars-slider-gauge:
    template:
      - cb-lcars-card-base
      - cb-lcars-functions
    entity: ''
    triggers_update: '[[[ return variables.entity ]]]'
    variables:
      card:
        width: 80px
        height: 400px
      entity: '[[[ return entity.entity_id ]]]'
      entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
      entity_match_slider: false
      meter:
        template:
          - cb-lcars-button-grid
        variables:
          card:
            height: '[[[ return variables.card.height ]]]'
          grid:
            X: 1
            'Y': 10
            gap: 0px
            buttons:
              - label: '100'
              - label: '90'
              - label: '80'
              - label: '70'
              - label: '60'
              - label: '50'
              - label: '40'
              - label: '30'
              - label: '20'
              - label: '10'
          button:
            show_label: true
            template:
              - cb-lcars-button-picard
              - cb-lcars-button-picard-label-ne
            variables:
              card:
                height: |
                  [[[
                      return variables.__calculcate_grid_cell_dimension(variables.card.height, 10, 0, "20px")
                  ]]]
                width: '[[[ return variables.card.width ]]]'
                border:
                  right:
                    size: 0
                  left:
                    size: 0
                  top:
                    size: 2px
                  bottom:
                    size: 0
                color:
                  background:
                    inactive: transparent
                    default: transparent
              text:
                label:
                  font_size: 14px
                  padding:
                    right: 0px
                    top: 2px
                  color:
                    'off': var(--lcars-ui-primary)
      slider:
        variables:
          color: |
            [[[ return  variables.entity_match_slider ? variables.entity_color :
            "var(--picard-cyan)" ]]]
          color_alpha: 0.95
          border_color: |
            [[[ return  variables.entity_match_slider ? variables.entity_color :
            "var(--picard-blue)" ]]]  
          border_alpha: 0.5
          border_width: 2px
          height: '[[[ return variables.card.height ]]]'
          width: 15px
          left_padding: 5px
          step: 1
    styles:
      card:
        - width: '[[[ return variables.card.width ]]]'
        - height: '[[[ return variables.card.height ]]]'
        - border-radius: 0 !important
        - background: none
      custom_fields:
        meter:
          - position: absolute
          - left: 0px
          - top: 0px
        slider:
          - position: absolute
          - left: 0px
          - top: 0px
          - z-index: 1
          - width: '[[[ return variables.card.width ]]]'
          - height: '[[[ return variables.card.height ]]]'
    custom_fields:
      meter:
        card:
          type: custom:button-card
          template: '[[[ return variables.meter.template ]]]'
          variables: '[[[ return variables.meter.variables ]]]'
      slider:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: brightness
          flipped: false
          inverse: false
          vertical: true
          step: '[[[ return variables.slider.variables.step; ]]]'
          styles:
            card:
              - width: '[[[ return variables.card.width ]]]'
              - height: '[[[ return variables.card.height ]]]'
              - background: none
              - border-radius: 0
            progress:
              - background-color: >-
                  [[[ return
                  variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                  ]]]
              - border: >-
                  [[[ return variables.slider.variables.border_width + " solid "
                  +
                  variables.__hex_to_rgba(variables.slider.variables.border_color,
                  variables.slider.variables.border_alpha)  ]]]
              - width: '[[[ return variables.slider.variables.width ]]]'
              - height: '[[[ return variables.slider.variables.height ]]]'
              - left: '[[[ return variables.slider.variables.left_padding ]]]'
            container:
              - border-radius: 0
            track:
              - background: none
            thumb:
              - background: none
  cb-lcars-slider-gauge-old:
    template:
      - cb-lcars-card-base
    entity: ''
    variables:
      card:
        width: 80px
        height: 400px
      entity: '[[[ return entity.entity_id ]]]'
      meter:
        template:
          - cb-lcars-button-grid
        variables:
          card:
            height: '[[[ return variables.card.height ]]]'
          grid:
            X: 1
            'Y': 10
            gap: 0px
            buttons:
              - label: '100'
              - label: '90'
              - label: '80'
              - label: '70'
              - label: '60'
              - label: '50'
              - label: '40'
              - label: '30'
              - label: '20'
              - label: '10'
          button:
            show_label: true
            template:
              - cb-lcars-button-picard
              - cb-lcars-button-picard-label-ne
            variables:
              card:
                height: |
                  [[[
                      return variables.__calculcate_grid_cell_dimension(variables.card.height, 10, 0, "20px")
                  ]]]
                width: '[[[ return variables.card.width ]]]'
                border:
                  right:
                    size: 0
                  left:
                    size: 0
                  top:
                    size: 2px
                  bottom:
                    size: 0
                color:
                  background:
                    inactive: transparent
                    default: transparent
              text:
                label:
                  font_size: 14px
                  padding:
                    right: 0px
                    top: 2px
                  color:
                    'off': var(--lcars-ui-primary)
      slider:
        variables:
          color: var(--picard-cyan)
          color_alpha: 0.95
          border_color: var(--picard-blue)
          border_alpha: 0.5
          border_width: 2px
          height: '[[[ return variables.card.height ]]]'
          width: 15px
          top_padding: 10px
          step: 1
    triggers_update: '[[[ return variables.entity ]]]'
    styles:
      card:
        - width: '[[[ return variables.card.width ]]]'
        - height: '[[[ return variables.card.height ]]]'
        - border-radius: 0 !important
        - background: none
      custom_fields:
        meter:
          - position: absolute
          - left: 0px
          - top: 0px
        slider:
          - position: absolute
          - left: 0px
          - top: 0px
          - z-index: 1
          - width: '[[[ return variables.card.width ]]]'
          - height: '[[[ return variables.card.height ]]]'
    custom_fields:
      meter:
        card:
          type: custom:button-card
          template: '[[[ return variables.meter.template ]]]'
          variables: '[[[ return variables.meter.variables ]]]'
      slider:
        card:
          type: custom:my-slider-v2
          entity: '[[[ return variables.entity ]]]'
          mode: brightness
          flipped: false
          inverse: false
          vertical: true
          step: '[[[ return variables.slider.variables.step; ]]]'
          styles:
            card:
              - width: '[[[ return variables.slider.variables.width ]]]'
              - height: '[[[ return variables.slider.variables.height ]]]'
              - background: none
              - border-radius: 0
            progress:
              - background-color: >-
                  [[[ return
                  variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                  ]]]
              - border: >-
                  [[[ return variables.slider.variables.border_width + " solid "
                  +
                  variables.__hex_to_rgba(variables.slider.variables.border_color,
                  variables.slider.variables.border_alpha)  ]]]
            container:
              - border-radius: 0
            track:
              - background: none
            thumb:
              - background: none
  cb-lcars-slider-horizontal-gauge:
    entity: ''
    template:
      - cb-lcars-functions
      - cb-lcars-slider-horizontal
    triggers_update: '[[[ return variables.entity ]]]'
    variables:
      card:
        width: 500px
        height: 45px
      entity: '[[[ return entity.entity_id ]]]'
      entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
      entity_match_slider: false
      slider:
        variables:
          color: |
            [[[ return  variables.entity_match_slider ? variables.entity_color :
            "var(--picard-cyan)" ]]]
          color_alpha: 0.95
          border_color: |
            [[[ return  variables.entity_match_slider ? variables.entity_color :
            "var(--picard-blue)" ]]]
          border_alpha: 0.5
          border_width: 2px
          height: 10px
          width: '[[[ return variables.card_width ]]]'
          top_padding: 10px
          step: 5
      gauge:
        show_sub_meter: true
        meter:
          template:
            - cb-lcars-button-grid
          variables:
            card:
              height: '[[[ return variables.card.height ]]]'
            grid:
              X: 10
              'Y': 1
              gap: 0px
              buttons:
                - label: '10'
                - label: '20'
                - label: '30'
                - label: '40'
                - label: '50'
                - label: '60'
                - label: '70'
                - label: '80'
                - label: '90'
                - label: '100'
            button:
              show_label: true
              template:
                - cb-lcars-button-picard
                - cb-lcars-button-picard-label-se
              variables:
                card:
                  width: |
                    [[[
                        return variables.__calculcate_grid_cell_dimension(variables.card.width, 10, 0, "5px")
                    ]]]
                  height: '[[[ return variables.card.height ]]]'
                  border:
                    right:
                      size: 2px
                    left:
                      size: 0
                    top:
                      size: 0
                    bottom:
                      size: 0
                  color:
                    background:
                      inactive: transparent
                      default: transparent
                text:
                  label:
                    font_size: 14px
                    padding:
                      right: 3px
                      top: 2px
                      bottom: 0px
                    color:
                      'off': var(--lcars-ui-primary)
        sub_meter:
          variables:
            card:
              height: 10px
            grid:
              X: 50
              'Y': 1
              gap: 0px
            gradient_start_color: none
            gradient_end_color: none
            button:
              template:
                - cb-lcars-button-picard
                - cb-lcars-button-picard-label-se
              variables:
                card:
                  height: 10px
                  min_height: 10px
                  width: |
                    [[[
                        return variables.__calculcate_grid_cell_dimension(variables.card.width, 50, 0, "20px")
                    ]]]
                  border:
                    right:
                      size: 2px
                    left:
                      size: 0
                    top:
                      size: 2px
                    bottom:
                      size: 0
                  color:
                    background:
                      inactive: transparent
                      default: transparent
              show_label: false
      meter: '[[[ return variables.gauge.meter ]]]'
    styles:
      custom_fields:
        slider:
          - position: absolute
          - top: 0
          - left: >-
              [[[ return "calc(" + variables.slider.variables.border_width + " *
              -1)" ]]]
        sub_meter:
          - position: absolute
          - top: 0px
          - left: 0px
          - visibility: >-
              [[[ return variables.gauge.show_sub_meter ? "visible" : "hidden"
              ]]]
    custom_fields:
      slider:
        card:
          flipped: false
          vertical: false
          inverse: false
          styles:
            card:
              - height: '[[[ return variables.card.height ]]]'
              - width: '[[[ return variables.card.width ]]]'
              - background: none
            progress:
              - background-color: >-
                  [[[ return
                  variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                  ]]]
              - border: >-
                  [[[ return variables.slider.variables.border_width + " solid "
                  +
                  variables.__hex_to_rgba(variables.slider.variables.border_color,
                  variables.slider.variables.border_alpha)  ]]]
              - border-radius: 2px
              - height: '[[[ return variables.slider.variables.height ]]]'
              - width: '[[[ return variables.slider.variables.width ]]]'
              - top: '[[[ return variables.slider.variables.top_padding ]]]'
      sub_meter:
        card:
          type: custom:button-card
          template: cb-lcars-meter-horizontal
          variables: '[[[ return variables.gauge.sub_meter.variables ]]]'
  cb-lcars-slider-horizontal-gauge-old:
    template:
      - cb-lcars-functions
      - cb-lcars-slider-horizontal
    variables:
      card_width: 500px
      card_height: 45px
      entity: ''
      slider:
        variables:
          color: var(--picard-cyan)
          color_alpha: 0.95
          border_color: var(--picard-blue)
          border_alpha: 0.5
          border_width: 2px
          height: 10px
          width: '[[[ return variables.card_width ]]]'
          top_padding: 10px
          step: 5
      gauge:
        show_sub_meter: true
        meter:
          template: cb-lcars-meter-horizontal
          variables:
            grid_X: 10
            grid_gap: 0px
            gradient_start_rgb: none
            gradient_end_rgb: none
            grid_buttons:
              - label: 10
              - label: 20
              - label: 30
              - label: 40
              - label: 50
              - label: 60
              - label: 70
              - label: 80
              - label: 90
              - label: 100
            button:
              template:
                - cb-lcars-button-picard
                - cb-lcars-button-picard-label-se
              variables:
                font_size: 14px
                card_height: '[[[ return variables.card_height ]]]'
                card_min_height: 45px
                card_width: '[[[ return "calc("+variables.card_width+" / 10)" ]]]'
                border_right: 2px
                border_top: 0
                border_left: 0
                border_bottom: 0
                text_padding_bottom: 0px
                text_padding_right: 3px
                lcars_color: var(--lcars-ui-primary)
                text_color_off: var(--lcars-ui-primary)
                card_inactive_background_color: non
              label: '#'
              show_label: true
        sub_meter:
          variables:
            grid_X: 50
            grid_gap: 0px
            gradient_start_rgb: none
            gradient_end_rgb: none
            button:
              template:
                - cb-lcars-button-picard
                - cb-lcars-button-picard-label-se
              variables:
                card_height: 10px
                card_min_height: 10px
                card_width: '[[[ return "calc("+variables.card_width+" / 50)" ]]]'
                border_right: 1px
                border_top: 0
                border_left: 0
                border_bottom: 0
                text_padding_bottom: 0px
                lcars_color: var(--lcars-ui-primary)
                text_color_off: var(--lcars-ui-primary)
                card_inactive_background_color: none
              show_label: false
      meter: '[[[ return variables.gauge.meter ]]]'
    styles:
      custom_fields:
        slider:
          - position: absolute
          - top: '[[[ return variables.slider.variables.top_padding ]]]'
          - left: >-
              [[[ return "calc(" + variables.slider.variables.border_width + " *
              -1)" ]]]
        sub_meter:
          - position: absolute
          - top: 0px
          - left: 0px
    custom_fields:
      slider:
        card:
          flipped: false
          vertical: false
          inverse: false
          styles:
            card:
              - height: '[[[ return variables.slider.variables.height ]]]'
              - width: '[[[ return variables.slider.variables.width ]]]'
            progress:
              - background-color: >-
                  [[[ return
                  variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                  ]]]
              - border: >-
                  [[[ return variables.slider.variables.border_width + " solid "
                  +
                  variables.__hex_to_rgba(variables.slider.variables.border_color,
                  variables.slider.variables.border_alpha)  ]]]
              - border-radius: 2px
      sub_meter:
        card:
          type: custom:button-card
          template: cb-lcars-meter-horizontal
          variables: '[[[ return variables.gauge.sub_meter.variables ]]]'
  cb-lcars-multimeter:
    template:
      - cb-lcars-functions
      - cb-lcars-card-base
    entity: light.tv
    triggers_update: '[[[ return variables.entity ]]]'
    variables:
      card:
        width: 500px
        height: 60px
      panel:
        width: 380px
        height: 50px
        padding:
          top: 5px
          left: 5px
          right: 0px
          bottom: 0px
        mode: slider
      entity: '[[[ return entity.entity_id ]]]'
      entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
      entity_match_gauge: false
      entity_match_slider: '[[[ return variables.entity_match_gauge ]]]'
      entity_match_header: false
      entity_match_slider_start: false
      entity_match_slider_end: false
      slider:
        entity: '[[[ return variables.entity ]]]'
        entity_match_slider_start: '[[[ return variables.entity_match_slider_start ]]]'
        entity_match_slider_end: '[[[ return variables.entity_match_slider_end ]]]'
      gauge:
        entity: '[[[ return variables.entity ]]]'
        entity_match_slider: '[[[ return variables.entity_match_slider ]]]'
      label: null
      header_button:
        variables:
          text:
            label:
              font_size: 24px
            state:
              font_size: 24px
            name:
              font_size: 24px
          card:
            color:
              active: >
                [[[ return  variables.entity_match_header ?
                variables.entity_color :

                "var(--lcars-ui-secondary)" ]]]
              inactive: var(--lcars-ui-primary)
              background:
                active: >
                  [[[ return  variables.entity_match_header ?
                  variables.entity_color :

                  "var(--lcars-ui-secondary)" ]]]
                inactive: var(--lcars-ui-primary)
              border: null
          icon:
            color:
              active: null
              inactive: null
              background:
                active: null
                inactive: null
      y_panel_width_padded: >-
        [[[ return  (parseInt(variables.panel.width) -
        parseInt(variables.panel.padding.left) -
        parseInt(variables.panel.padding.right))+"px" ]]]
      y_panel_height_padded: >-
        [[[ return  (parseInt(variables.panel.height) -
        parseInt(variables.panel.padding.top) -
        parseInt(variables.panel.padding.bottom))+"px" ]]]
      y_trim_height: >-
        [[[ return "calc(" + variables.card.height + " - " +
        variables.panel.height + ")" ]]]
      y_trim_width: '[[[ return variables.panel.width ]]]'
      y_header_height: '[[[ return variables.card.height ]]]'
      y_header_width: >-
        [[[ return "calc(" + variables.card.width + " - " +
        variables.panel.width + ")" ]]]
      z_button_card:
        type: custom:button-card
        template:
          - cb-lcars-button-grid
        variables:
          card:
            width: '[[[ return variables.card.width ]]]'
            height: '[[[ return variables.card.height ]]]'
          button: '[[[ return variables.header_button ]]]'
          grid:
            X: 2
            'Y': 1
            buttons:
              - variables:
                  card:
                    width: '[[[ return variables.y_header_width ]]]'
                    height: '[[[ return variables.y_header_height ]]]'
                  text:
                    label:
                      font_size: >-
                        [[[ return
                        variables.header_button.variables.text.label.font_size
                        ]]]
                    state:
                      font_size: >-
                        [[[ return
                        variables.header_button.variables.text.state.font_size
                        ]]]
                    name:
                      font_size: >-
                        [[[ return
                        variables.header_button.variables.text.name.font_size
                        ]]]
                show_label: true
                label: '[[[ return variables.label ]]]'
                template:
                  - cb-lcars-button-picard-filled
                entity: '[[[ return variables.entity ]]]'
              - variables:
                  card:
                    width: '[[[ return variables.y_trim_width ]]]'
                    height: '[[[ return variables.y_trim_height ]]]'
                    min_height: '[[[ return variables.y_trim_height ]]]'
                show_label: false
                entity: '[[[ return variables.entity ]]]'
            template_columns: >-
              [[[ return  variables.y_header_width + " " +
              variables.y_trim_width  ]]]
            gap: 0px
      z_gauge_card:
        type: custom:button-card
        template:
          - cb-lcars-slider-horizontal-gauge
        variables:
          card:
            height: '[[[ return variables.panel.height ]]]'
            width: '[[[ return variables.panel.width ]]]'
          entity: '[[[ return variables.gauge.entity || null ]]]'
          gauge: '[[[ return variables.gauge ]]]'
          entity_match_slider: '[[[ return variables.gauge.entity_match_slider ]]]'
      z_slider_card:
        type: custom:button-card
        template:
          - cb-lcars-functions
          - cb-lcars-slider-horizontal
        variables:
          card:
            height: '[[[ return variables.y_panel_height_padded ]]]'
            width: '[[[ return variables.y_panel_width_padded ]]]'
          entity: '[[[ return variables.slider.entity || null ]]]'
          entity_match_slider_start: '[[[ return variables.slider.entity_match_slider_start ]]]'
          entity_match_slider_end: '[[[ return variables.slider.entity_match_slider_end ]]]'
          meter: |
            [[[
            let meterObject = (variables.slider && variables.slider.meter) ?
            variables.slider.meter : {}; 
            let defaultVariables = {
              variables: {
                button: {
                  template: "cb-lcars-button-picard-filled",
                  variables: {
                    card: {
                      height: variables.y_panel_height_padded,
                     },
                   },
                }
              }
            };
            //meterObject = {...defaultVariables, ...meterObject};
            meterObject = variables.__deepMerge(defaultVariables,meterObject);

            return meterObject;
            ]]]
      z_icon_grid:
        type: custom:button-card
        template:
          - cb-lcars-button-grid-icons
        variables: >
          [[[

          let iconObject = (variables.icon_grid &&
          variables.icon_grid.variables) ? variables.icon_grid.variables : {};

          let defaultVariables = {
            card: {
              height: variables.y_panel_height_padded,
              width: variables.y_panel_width_padded,
              },
            grid: {
              gap: "9px",
            },
             button: {
              variables: {
                card: {
                  width: "45px",
                  height: "45px"
                }
              }
           }
          };

          iconObject = variables.__deepMerge(defaultVariables,iconObject);

          return iconObject;

          ]]]
    styles:
      card:
        - background: none
        - width: '[[[ return variables.card.width; ]]]'
        - height: '[[[  return variables.card.height; ]]]'
        - border-radius: 0 !important
      custom_fields:
        panel:
          - position: absolute
          - right: 0px
          - bottom: 0px
        button:
          - position: absolute
          - left: 0px
          - top: 0px
    custom_fields:
      button:
        card: '[[[ return variables.z_button_card ]]]'
      panel:
        card: |
          [[[
          let panel_card;
          switch (variables.panel.mode) {
            case 'icons':
            case 'icon_grid':
              panel_card = variables.z_icon_grid;
              break;
            case 'slider':
              panel_card = variables.z_slider_card;
              break;
            case 'gauge':
              panel_card = variables.z_gauge_card;
              break;
            default:
              panel_card = null;
          }
          return panel_card;
          ]]]
  cb-lcars-multimeter-old:
    template:
      - cb-lcars-functions
    triggers_update: '[[[ return variables.entity ]]]'
    variables:
      card_width: 500px
      card_height: 60px
      panel_width: 380px
      panel_height: 50px
      panel_padding: 5px
      panel_mode: gauge
      entity: ''
      entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
      entity_match_gauge: false
      entity_match_header: false
      entity_match_slider: false
      slider:
        entity: '[[[ return variables.entity ]]]'
      gauge:
        entity: '[[[ return variables.entity ]]]'
      label: null
      header_button:
        variables:
          font_size: 24px
          card_active_color: >-
            [[[ return  variables.entity_match_header ? variables.entity_color :
            "var(--lcars-ui-secondary)" ]]]
          card_active_background_color: >-
            [[[ return  variables.entity_match_header ? variables.entity_color :
            "var(--lcars-ui-secondary)" ]]]
          card_inactive_color: var(--lcars-ui-primary)
          card_inactive_background_color: var(--lcars-ui-primary)
          lcars_color: null
          icon_active_color: null
          icon_inactive_color: null
          icon_active_background_color: null
          icon_inactive_background_color: null
      y_panel_width_padded: >-
        [[[ return  (parseInt(variables.panel_width) -
        parseInt(variables.panel_padding))+"px" ]]]
      y_panel_height_padded: >-
        [[[ return  (parseInt(variables.panel_height) -
        parseInt(variables.panel_padding))+"px" ]]]
      y_trim_height: >-
        [[[ return "calc(" + variables.card_height + " - " +
        variables.panel_height + ")" ]]]
      y_trim_width: '[[[ return variables.panel_width ]]]'
      y_header_height: '[[[ return variables.card_height ]]]'
      y_header_width: >-
        [[[ return "calc(" + variables.card_width + " - " +
        variables.panel_width + ")" ]]]
      z_button_card:
        type: custom:button-card
        template:
          - cb-lcars-button-grid
        variables:
          card_width: '[[[ return variables.card_width ]]]'
          card_height: '[[[ return variables.card_height ]]]'
          grid_X: 2
          grid_Y: 1
          button: '[[[ return variables.header_button ]]]'
          grid_buttons:
            - variables:
                card_width: '[[[ return variables.y_header_width ]]]'
                card_height: '[[[ return variables.y_header_height ]]]'
                font_size: '[[[ return variables.header_button.variables.font_size ]]]'
              show_label: true
              label: '[[[ return variables.label ]]]'
              template:
                - cb-lcars-button-picard-filled
              entity: '[[[ return variables.entity ]]]'
            - variables:
                card_width: '[[[ return variables.y_trim_width ]]]'
                card_height: '[[[ return variables.y_trim_height ]]]'
                card_min_height: '[[[ return variables.y_trim_height ]]]'
              show_label: false
              entity: '[[[ return variables.entity ]]]'
          grid_template_columns: >-
            [[[ return  variables.y_header_width + " " + variables.y_trim_width 
            ]]]
          grid_gap: 0px
      z_gauge_card:
        type: custom:button-card
        template:
          - cb-lcars-slider-horizontal-gauge
        variables:
          card_height: '[[[ return variables.panel_height ]]]'
          card_width: '[[[ return variables.panel_width ]]]'
          entity: '[[[ return variables.gauge.entity || null ]]]'
          gauge: '[[[ return variables.gauge ]]]'
      z_slider_card:
        type: custom:button-card
        template:
          - cb-lcars-slider-horizontal
        variables:
          card_height: '[[[ return variables.y_panel_height_padded ]]]'
          card_width: '[[[ return variables.y_panel_width_padded ]]]'
          entity: '[[[ return variables.slider.entity || null ]]]'
          meter: |
            [[[
            let meterObject = (variables.slider && variables.slider.meter) ?
            variables.slider.meter : {}; let defaultVariables = {
              variables: {
                button: {
                  template: "cb-lcars-lozenge",
                  variables: {
                    card_height: variables.y_panel_height_padded,
                    

                  },
                  template: "cb-lcars-button-picard-filled"
                }
              }
            };
            meterObject = {...defaultVariables, ...meterObject};
            return meterObject;
            ]]]
      z_icon_grid:
        type: custom:button-card
        template:
          - cb-lcars-button-grid-icons
        variables: >
          [[[

          let iconObject = (variables.icon_grid &&
          variables.icon_grid.variables) ? variables.icon_grid.variables : {};

          let defaultVariables = {
            card_height: variables.y_panel_height_padded,
            card_width: variables.y_panel_width_padded,
            grid_X: "7",
            grid_gap: "9px",
             button: {
              variables: {
                card_width: "45px",
                card_height: "45px"
              }
            }
          }; iconObject = {...defaultVariables, ...iconObject};

          return iconObject;

          ]]]
    styles:
      card:
        - background: none
        - width: '[[[ return variables.card_width; ]]]'
        - height: '[[[  return variables.card_height; ]]]'
        - border-radius: 0 !important
      custom_fields:
        panel:
          - position: absolute
          - right: 0px
          - bottom: 0px
        button:
          - position: absolute
          - left: 0px
          - top: 0px
    custom_fields:
      button:
        card: '[[[ return variables.z_button_card ]]]'
      panel:
        card: |
          [[[
          let panel_card;
          switch (variables.panel_mode) {
            case 'icons':
            case 'icon_grid':
              panel_card = variables.z_icon_grid;
              break;
            case 'slider':
              panel_card = variables.z_slider_card;
              break;
            case 'gauge':
              panel_card = variables.z_gauge_card;
              break;
            default:
              panel_card = null;
          }
          return panel_card;
          ]]]
  cb-lcars-dpad:
    variables:
      card_size: 300px
      dpad_button_scale: 6.5
      dpad_button_min_height: 10px
      button_ripple_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-color") ]]]
      svg_background_color: '#1111ee'
      svg_dpad_up_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-color") ]]]
      svg_dpad_up_color_active: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-active-color")
        ]]]
      svg_dpad_down_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-color") ]]]
      svg_dpad_down_color_active: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-active-color")
        ]]]
      svg_dpad_left_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-color") ]]]
      svg_dpad_left_color_active: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-active-color")
        ]]]
      svg_dpad_right_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-color") ]]]
      svg_dpad_right_color_active: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-active-color")
        ]]]
      svg_dpad_center_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-color") ]]]
      svg_dpad_center_color_active: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--state-active-color")
        ]]]
      svg_dpad_up_left_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--lcars-card-button")
        ]]]
      svg_dpad_up_left_color_active: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--lcars-ui-primary")
        ]]]
      svg_dpad_up_right_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--lcars-card-button")
        ]]]
      svg_dpad_up_right_color_active: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--lcars-ui-primary")
        ]]]
      svg_dpad_down_left_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--lcars-card-button")
        ]]]
      svg_dpad_down_left_color_active: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--lcars-ui-primary")
        ]]]
      svg_dpad_down_right_color: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--lcars-card-button")
        ]]]
      svg_dpad_down_right_color_active: >-
        [[[ return
        getComputedStyle(document.body).getPropertyValue("--lcars-ui-primary")
        ]]]
      dpad_center_entity: null
      dpad_center_entity_active_state: 'on'
      dpad_up_entity: input_boolean.lcars_ui_fullscreen
      dpad_up_entity_active_state: 'on'
      dpad_up_left_entity: null
      dpad_up_left_entity_active_state: 'on'
      dpad_up_left_show_label: true
      dpad_up_left_label: null
      dpad_up_left_show_name: false
      dpad_up_left_show_state: false
      dpad_up_right_entity: null
      dpad_up_right_entity_active_state: 'on'
      dpad_up_right_show_label: true
      dpad_up_right_label: null
      dpad_up_right_show_name: false
      dpad_up_right_show_state: false
      dpad_down_entity: null
      dpad_down_entity_active_state: 'on'
      dpad_down_left_entity: null
      dpad_down_left_entity_active_state: 'on'
      dpad_down_left_show_label: true
      dpad_down_left_label: null
      dpad_down_left_show_name: false
      dpad_down_left_show_state: false
      dpad_down_right_entity: null
      dpad_down_right_entity_active_state: 'on'
      dpad_down_right_show_label: true
      dpad_down_right_label: null
      dpad_down_right_show_name: false
      dpad_down_right_show_state: false
      dpad_left_entity: null
      dpad_left_entity_active_state: 'on'
      dpad_right_entity: null
      dpad_right_entity_active_state: 'on'
      dpad_center_card_background: transparent
      dpad_center_card_inactive_background_color: transparent
      dpad_center_card_active_background_color: transparent
      dpad_up_card_background: transparent
      dpad_up_card_inactive_background_color: transparent
      dpad_up_card_active_background_color: transparent
      dpad_up_left_card_background: transparent
      dpad_up_left_card_inactive_background_color: transparent
      dpad_up_left_card_active_background_color: transparent
      dpad_up_right_card_background: transparent
      dpad_up_right_card_inactive_background_color: transparent
      dpad_up_right_card_active_background_color: transparent
      dpad_down_card_background: transparent
      dpad_down_card_inactive_background_color: transparent
      dpad_down_card_active_background_color: transparent
      dpad_down_left_card_background: transparent
      dpad_down_left_card_inactive_background_color: transparent
      dpad_down_left_card_active_background_color: transparent
      dpad_down_right_card_background: transparent
      dpad_down_right_card_inactive_background_color: transparent
      dpad_down_right_card_active_background_color: transparent
      dpad_left_card_background: transparent
      dpad_left_card_inactive_background_color: transparent
      dpad_left_card_active_background_color: transparent
      dpad_right_card_background: transparent
      dpad_right_card_inactive_background_color: transparent
      dpad_right_card_active_background_color: transparent
    triggers_update:
      - '[[[ return variables.dpad_up_entity; ]]]'
      - '[[[ return variables.dpad_down_entity; ]]]'
      - '[[[ return variables.dpad_left_entity; ]]]'
      - '[[[ return variables.dpad_right_entity; ]]]'
      - '[[[ return variables.dpad_center_entity; ]]]'
      - '[[[ return variables.dpad_up_left_entity; ]]]'
      - '[[[ return variables.dpad_up_right_entity; ]]]'
      - '[[[ return variables.dpad_down_left_entity; ]]]'
      - '[[[ return variables.dpad_down_right_entity; ]]]'
    styles:
      card:
        - height: '[[[ return variables.card_size ]]]'
        - width: '[[[ return variables.card_size ]]]'
        - background: |
            [[[
              let button_ripple_color = variables.button_ripple_color;
              let svg_dpad_up_bg = (variables.dpad_up_entity && states[variables.dpad_up_entity] && states[variables.dpad_up_entity].state === variables.dpad_up_entity_active_state) ? variables.svg_dpad_up_color_active : variables.svg_dpad_up_color;
              let svg_dpad_down_bg = (variables.dpad_down_entity && states[variables.dpad_down_entity] && states[variables.dpad_down_entity].state === variables.dpad_down_entity_active_state) ? variables.svg_dpad_down_color_active : variables.svg_dpad_down_color;
              let svg_dpad_left_bg = (variables.dpad_left_entity && states[variables.dpad_left_entity] && states[variables.dpad_left_entity].state === variables.dpad_left_entity_active_state) ? variables.svg_dpad_left_color_active : variables.svg_dpad_left_color;
              let svg_dpad_right_bg = (variables.dpad_right_entity && states[variables.dpad_right_entity] && states[variables.dpad_right_entity].state === variables.dpad_right_entity_active_state) ? variables.svg_dpad_right_color_active : variables.svg_dpad_right_color;
              let svg_dpad_center_bg = (variables.dpad_center_entity && states[variables.dpad_center_entity] && states[variables.dpad_center_entity].state === variables.dpad_center_entity_active_state) ? variables.svg_dpad_center_color_active : variables.svg_dpad_center_color;

              let svg_dpad_up_left_bg = (variables.dpad_up_left_entity && states[variables.dpad_up_left_entity] && states[variables.dpad_up_left_entity].state === variables.dpad_up_left_entity_active_state) ? variables.svg_dpad_up_left_color_active : variables.svg_dpad_up_left_color;
              let svg_dpad_up_right_bg = (variables.dpad_up_right_entity && states[variables.dpad_up_right_entity] && states[variables.dpad_up_right_entity].state === variables.dpad_up_right_entity_active_state) ? variables.svg_dpad_up_right_color_active : variables.svg_dpad_up_right_color;
              let svg_dpad_down_left_bg = (variables.dpad_down_left_entity && states[variables.dpad_down_left_entity] && states[variables.dpad_down_left_entity].state === variables.dpad_down_left_entity_active_state) ? variables.svg_dpad_down_left_color_active : variables.svg_dpad_down_left_color;
              let svg_dpad_down_right_bg = (variables.dpad_down_right_entity && states[variables.dpad_down_right_entity] && states[variables.dpad_down_right_entity].state === variables.dpad_down_right_entity_active_state) ? variables.svg_dpad_down_right_color_active : variables.svg_dpad_down_right_color;
              
              
              
              let svg_background_color = variables.svg_background_color;
              let svgString = `<?xml version="1.0" encoding="UTF-8"?>
              <svg width="80mm" height="80mm" version="1.1" viewBox="0 0 80 80" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:xlink="http://www.w3.org/1999/xlink">
               <metadata>
                <rdf:RDF>
                 <cc:Work rdf:about="">
                  <dc:format>image/svg+xml</dc:format>
                  <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
                  <dc:title/>
                 </cc:Work>
                </rdf:RDF>
               </metadata>
                <defs>
                  <style type="text/css"><![CDATA[
                  .lcars-svg-bg {
                  fill: ${svg_background_color};
                  }
                  .lcars-d-pad-bg {
                  fill: ${button_ripple_color};
                  }
                  .lcars-dpad-left-bg {
                  fill: ${svg_dpad_left_bg};
                  }
                  .lcars-dpad-right-bg {
                  fill: ${svg_dpad_right_bg};
                  }
                  .lcars-dpad-up-bg {
                  fill: ${svg_dpad_up_bg};
                  }
                  .lcars-dpad-down-bg {
                  fill: ${svg_dpad_down_bg};
                  }
                  .lcars-dpad-center-bg {
                  fill: ${svg_dpad_center_bg};
                  }
                  .lcars-dpad-up-left-bg {
                  fill: ${svg_dpad_up_left_bg};
                  }
                  .lcars-dpad-up-right-bg {
                  fill: ${svg_dpad_up_right_bg};
                  }
                  .lcars-dpad-down-left-bg {
                  fill: ${svg_dpad_down_left_bg};
                  }
                  .lcars-dpad-down-right-bg {
                  fill: ${svg_dpad_down_right_bg};
                  }
                  ]]></style>
                </defs>
               <g transform="translate(0,-217)">
                
                <path id="path892" d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-up-left-bg"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-up-right-bg" transform="matrix(-1, 0, 0, 1, 80, 0.0000019179001355951186)"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-down-left-bg" transform="matrix(1, 0, 0, -1, -8.208900226236437e-8, 514)"></path>
                <path d="m33 250v-32.35c-15.992 2.4474-29.977 16.417-32.424 32.35z" class="lcars-dpad-down-right-bg" transform="matrix(-1, 0, 0, -1, 80, 514)"></path>

                <path d="m34 227h12v-9.5c-3.8785-0.47437-8.044-0.4824-12 0z" class="lcars-dpad-up-bg"/>
                <path d="m44.2 219.2v5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m10 263v-12h-9.5c-0.47437 3.8785-0.4824 8.044 0 12z" class="lcars-dpad-left-bg"/>
                <path d="m2.199 252.8h5.0271" style="fill:none;opacity:.889;stroke-width:1.2;stroke:#000"/>
                <path d="m70 251v12h9.5c0.47437-3.8785 0.4824-8.044 0-12z" class="lcars-dpad-right-bg"/>
                <path d="m77.801 261.2h-5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m46 287h-12v9.5c3.8785 0.47437 8.044 0.4824 12 0z" class="lcars-dpad-down-bg"/>
                <path d="m35.8 294.8v-5.0271" style="fill:none;stroke-width:1.2;stroke:#000"/>
                <path d="m11 251v12h23v23h12v-23h23v-12h-23v-23h-12v23z" class="lcars-dpad-center-bg"/>
                <path d="m34 230.49h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 233.2h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 236.48h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 244.9h12" style="fill:none;stroke-width:.75;stroke:#000"/>
                <path d="m34 276h12" style="fill:none;stroke-width:.75;stroke:#000"/>
               </g>
              </svg>`;
              let encodedSvgString = encodeURIComponent(svgString);
              let backgroundImage = `url('data:image/svg+xml,${encodedSvgString}')`;
              return backgroundImage;
            ]]]
        - background-position: center
        - background-size: '[[[ return variables.card_size ]]]'
        - background-color: none
      custom_fields:
        dpad_up_button:
          - position: absolute
          - top: 0px
          - left: >
              [[[ return "calc((" + variables.card_size + "/2) - (" +
              variables.card_size + " / " + variables.dpad_button_scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_down_button:
          - position: absolute
          - bottom: 0px
          - left: >
              [[[ return "calc((" + variables.card_size + "/2) - (" +
              variables.card_size + " / " + variables.dpad_button_scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_left_button:
          - position: absolute
          - left: 0px
          - top: >
              [[[ return "calc((" + variables.card_size + "/2) - (" +
              variables.card_size + " / " + variables.dpad_button_scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_right_button:
          - position: absolute
          - right: 0px
          - top: >
              [[[ return "calc((" + variables.card_size + "/2) - (" +
              variables.card_size + " / " + variables.dpad_button_scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_center_button:
          - position: absolute
          - right: |
              [[[ return "calc(" + variables.card_size + " /4 )";]]]
          - top: >
              [[[ return "calc((" + variables.card_size + "/2) - (" +
              variables.card_size + " / " + variables.dpad_button_scale +
              "/2))"; ]]]
          - z-index: 100
        dpad_up_left_button:
          - position: absolute
          - top: 0px
          - left: 0px
          - z-index: 99
        dpad_up_right_button:
          - position: absolute
          - top: 0px
          - right: 0px
          - z-index: 99
        dpad_down_left_button:
          - position: absolute
          - bottom: 0px
          - left: 0px
          - z-index: 99
        dpad_down_right_button:
          - position: absolute
          - bottom: 0px
          - right: 0px
          - z-index: 99
    custom_fields:
      dpad_center_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad_center_entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.button_ripple_color; ]]]'
            card_min_height: '[[[ return variables.dpad_button_min_height; ]]]'
            card_width: |
              [[[ return "calc(" + variables.card_size + " /2 )";]]]
            card_height: |
              [[[ return "calc(" + variables.card_size + " / " +
              variables.dpad_button_scale + " )";]]]
            card_background: '[[[ return variables.dpad_center_card_background ]]]'
            card_active_background_color: '[[[ return variables.dpad_center_card_active_background_color ]]]'
            card_inactive_background_color: >-
              [[[ return variables.dpad_center_card_inactive_background_color
              ]]]
      dpad_up_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad_up_entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.button_ripple_color; ]]]'
            card_min_height: '[[[ return variables.dpad_button_min_height; ]]]'
            card_width: >
              [[[ return "calc(" + variables.card_size + " / " +
              variables.dpad_button_scale + ")";]]]
            card_height: |
              [[[ return "calc(" + variables.card_size + " / " +
              variables.dpad_button_scale + ")";]]]
            card_background: '[[[ return variables.dpad_up_card_background ]]]'
            card_active_background_color: '[[[ return variables.dpad_up_card_active_background_color ]]]'
            card_inactive_background_color: '[[[ return variables.dpad_up_card_inactive_background_color ]]]'
      dpad_down_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad_down_entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.button_ripple_color; ]]]'
            card_min_height: '[[[ return variables.dpad_button_min_height; ]]]'
            card_width: >
              [[[ return "calc(" + variables.card_size + " / " +
              variables.dpad_button_scale + ")";]]]
            card_height: |
              [[[ return "calc(" + variables.card_size + " / " +
              variables.dpad_button_scale + ")";]]]
            card_background: '[[[ return variables.dpad_down_card_background ]]]'
            card_active_background_color: '[[[ return variables.dpad_down_card_active_background_color ]]]'
            card_inactive_background_color: '[[[ return variables.dpad_down_card_inactive_background_color ]]]'
      dpad_left_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad_left_entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.button_ripple_color; ]]]'
            card_min_height: '[[[ return variables.dpad_button_min_height; ]]]'
            card_width: >
              [[[ return "calc(" + variables.card_size + " / " +
              variables.dpad_button_scale + ")";]]]
            card_height: |
              [[[ return "calc(" + variables.card_size + " / " +
              variables.dpad_button_scale + ")";]]]
            card_background: '[[[ return variables.dpad_left_card_background ]]]'
            card_active_background_color: '[[[ return variables.dpad_left_card_active_background_color ]]]'
            card_inactive_background_color: '[[[ return variables.dpad_left_card_inactive_background_color ]]]'
      dpad_right_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad_right_entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-button-square
          variables:
            ripple_color: '[[[ return variables.button_ripple_color; ]]]'
            card_min_height: '[[[ return variables.dpad_button_min_height; ]]]'
            card_width: >
              [[[ return "calc(" + variables.card_size + " / " +
              variables.dpad_button_scale + ")";]]]
            card_height: |
              [[[ return "calc(" + variables.card_size + " / " +
              variables.dpad_button_scale + ")";]]]
            card_background: '[[[ return variables.dpad_right_card_background ]]]'
            card_active_background_color: '[[[ return variables.dpad_right_card_active_background_color ]]]'
            card_inactive_background_color: '[[[ return variables.dpad_right_card_inactive_background_color ]]]'
      dpad_up_left_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad_up_left_entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.button_ripple_color; ]]]'
            card_width: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
            card_height: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
            card_background: '[[[ return variables.dpad_up_left_card_background ]]]'
            card_active_background_color: '[[[ return variables.dpad_up_left_card_active_background_color ]]]'
            card_inactive_background_color: >-
              [[[ return variables.dpad_up_left_card_inactive_background_color
              ]]]
            card_border_top_left_radius: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
          label: '[[[ return variables.dpad_up_left_label ]]]'
          show_name: '[[[ return variables.dpad_up_left_show_name ]]]'
          show_label: '[[[ return variables.dpad_up_left_show_label]]]'
          show_state: '[[[ return variables.dpad_up_left_show_state ]]]'
      dpad_up_right_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad_up_right_entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.button_ripple_color; ]]]'
            card_width: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
            card_height: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
            card_background: '[[[ return variables.dpad_up_right_card_background ]]]'
            card_active_background_color: >-
              [[[ return variables.dpad_up_right_card_active_background_color
              ]]]
            card_inactive_background_color: >-
              [[[ return variables.dpad_up_right_card_inactive_background_color
              ]]]
            card_border_top_right_radius: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
          label: '[[[ return variables.dpad_up_right_label ]]]'
          show_name: '[[[ return variables.dpad_up_right_show_name ]]]'
          show_label: '[[[ return variables.dpad_up_right_show_label]]]'
          show_state: '[[[ return variables.dpad_up_right_show_state ]]]'
      dpad_down_left_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad_down_left_entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.button_ripple_color; ]]]'
            card_width: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
            card_height: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
            card_background: '[[[ return variables.dpad_down_left_card_background ]]]'
            card_active_background_color: >-
              [[[ return variables.dpad_down_left_card_active_background_color
              ]]]
            card_inactive_background_color: >-
              [[[ return variables.dpad_down_left_card_inactive_background_color
              ]]]
            card_border_bottom_left_radius: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
          label: '[[[ return variables.dpad_down_left_label ]]]'
          show_name: '[[[ return variables.dpad_down_left_show_name ]]]'
          show_label: '[[[ return variables.dpad_down_left_show_label]]]'
          show_state: '[[[ return variables.dpad_down_left_show_state ]]]'
      dpad_down_right_button:
        card:
          type: custom:button-card
          entity: '[[[ return variables.dpad_down_right_entity; ]]]'
          template:
            - cb-lcars-animate-press
            - cb-lcars-base
          variables:
            ripple_color: '[[[ return variables.button_ripple_color; ]]]'
            card_width: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
            card_height: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
            card_background: '[[[ return variables.dpad_down_right_card_background ]]]'
            card_active_background_color: >-
              [[[ return variables.dpad_down_right_card_active_background_color
              ]]]
            card_inactive_background_color: >-
              [[[ return
              variables.dpad_down_right_card_inactive_background_color ]]]
            card_border_bottom_right_radius: |
              [[[ return "calc(" + variables.card_size + " / 2)";]]]
          label: '[[[ return variables.dpad_down_right_label ]]]'
          show_name: '[[[ return variables.dpad_down_right_show_name ]]]'
          show_label: '[[[ return variables.dpad_down_right_show_label]]]'
          show_state: '[[[ return variables.dpad_down_right_show_state ]]]'
  cb-lcars-picard-vertical:
    variables:
      card_height: 60px
      card_width: 400px
      card_border_top_left_radius: 0px !important
      card_border_top_right_radius: 0px !important
      card_border_bottom_left_radius: 0px !important
      card_border_bottom_right_radius: 0px !important
      card_inner_border_factor: 1
      picard_border_gap: 10px
      picard_border_ratio_factor: 2
      picard_lcars_1_label: ' '
      picard_lcars_2_label: ' '
      picard_lcars_1_color: var(--lcars-card-top-color)
      picard_lcars_2_color: var(--lcars-card-top-color)
      picard_lcars_1_height: '[[[ return variables.card_height; ]]]'
      picard_lcars_2_height: '[[[ return variables.card_height; ]]]'
      picard_lcars_1_width: null
      picard_lcars_2_width: null
      z_picard_lcars_1_width: >-
        [[[ return variables.picard_lcars_1_width || "calc((" +
        variables.card_width + " - " + variables.picard_border_gap + ") /2)";
        ]]]
      z_picard_lcars_2_width: >-
        [[[ return variables.picard_lcars_2_width || "calc((" +
        variables.card_width + " - " + variables.picard_border_gap + ") /2)";
        ]]]
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.card_height; ]]]'
        - width: '[[[ return variables.card_width; ]]]'
        - border-top-left-radius: '[[[ return variables.card_border_top_left_radius; ]]]'
        - border-top-right-radius: '[[[ return variables.card_border_top_right_radius; ]]]'
        - border-bottom-left-radius: '[[[ return variables.card_border_bottom_left_radius; ]]]'
        - border-bottom-right-radius: '[[[ return variables.card_border_bottom_right_radius; ]]]'
      custom_fields:
        lcars_1:
          - position: absolute
          - top: 0
          - left: 0
        lcars_2:
          - position: absolute
          - top: 0
          - right: 0
    custom_fields:
      lcars_1:
        card:
          type: custom:button-card
          template:
            - cb-lcars-button-picard-filled
          show_label: true
          label: '[[[ return variables.picard_lcars_1_label; ]]]'
          variables:
            card_inactive_background_color: '[[[ return variables.picard_lcars_1_color; ]]]'
            card_width: '[[[ return variables.z_picard_lcars_1_width; ]]]'
            card_height: '[[[ return variables.picard_lcars_1_height; ]]]'
            card_min_height: '[[[ return variables.picard_lcars_1_height; ]]]'
      lcars_2:
        card:
          type: custom:button-card
          template:
            - cb-lcars-button-picard-filled
          show_label: true
          label: '[[[ return variables.picard_lcars_2_label; ]]]'
          variables:
            card_inactive_background_color: '[[[ return variables.picard_lcars_2_color; ]]]'
            card_width: '[[[ return variables.z_picard_lcars_2_width; ]]]'
            card_height: '[[[ return variables.picard_lcars_2_height; ]]]'
            card_min_height: '[[[ return variables.picard_lcars_2_height; ]]]'
  cb-lcars-picard-horizontal:
    variables:
      card_height: 60px
      card_width: 400px
      card_border_top_left_radius: 0px !important
      card_border_top_right_radius: 0px !important
      card_border_bottom_left_radius: 0px !important
      card_border_bottom_right_radius: 0px !important
      card_inner_border_factor: 1
      picard_border_gap: 5px
      picard_border_ratio_factor: 2
      picard_lcars_1_label: ' '
      picard_lcars_2_label: ' '
      picard_lcars_1_color: var(--lcars-card-top-color)
      picard_lcars_2_color: var(--lcars-card-top-color)
      picard_lcars_1_height: null
      picard_lcars_2_height: null
      picard_lcars_1_width: '[[[ return variables.card_width; ]]]'
      picard_lcars_2_width: '[[[ return variables.card_width; ]]]'
      z_picard_lcars_1_height: >-
        [[[ return variables.picard_lcars_1_height || "calc((" +
        variables.card_height + " - " + variables.picard_border_gap + ") /2)";
        ]]]
      z_picard_lcars_2_height: >-
        [[[ return variables.picard_lcars_2_height || "calc((" +
        variables.card_height + " - " + variables.picard_border_gap + ") /2)";
        ]]]
    styles:
      card:
        - background-color: transparent
        - height: '[[[ return variables.card_height; ]]]'
        - width: '[[[ return variables.card_width; ]]]'
        - border-top-left-radius: '[[[ return variables.card_border_top_left_radius; ]]]'
        - border-top-right-radius: '[[[ return variables.card_border_top_right_radius; ]]]'
        - border-bottom-left-radius: '[[[ return variables.card_border_bottom_left_radius; ]]]'
        - border-bottom-right-radius: '[[[ return variables.card_border_bottom_right_radius; ]]]'
      custom_fields:
        lcars_1:
          - position: absolute
          - top: 0
          - left: 0
        lcars_2:
          - position: absolute
          - bottom: 0
          - left: 0
    custom_fields:
      lcars_1:
        card:
          type: custom:button-card
          template:
            - cb-lcars-button-picard-filled
          show_label: true
          label: '[[[ return variables.picard_lcars_1_label; ]]]'
          variables:
            card_inactive_background_color: '[[[ return variables.picard_lcars_1_color; ]]]'
            card_width: '[[[ return variables.picard_lcars_1_width; ]]]'
            card_height: '[[[ return variables.z_picard_lcars_1_height; ]]]'
            card_min_height: '[[[ return variables.z_picard_lcars_height; ]]]'
      lcars_2:
        card:
          type: custom:button-card
          template:
            - cb-lcars-button-picard-filled
          show_label: true
          label: '[[[ return variables.picard_lcars_2_label; ]]]'
          variables:
            card_inactive_background_color: '[[[ return variables.picard_lcars_2_color; ]]]'
            card_width: '[[[ return variables.picard_lcars_2_width; ]]]'
            card_height: '[[[ return variables.z_picard_lcars_height; ]]]'
            card_min_height: '[[[ return variables.z_picard_lcars_2_height; ]]]'
views:
  - title: lcars-template-gallery
    path: lcars-template-gallery
    type: sections
    sections:
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-base
            label: cb-lcars-base
            show_label: true
            variables:
              card:
                height: 20px
          - type: custom:button-card
            template: cb-lcars-header-open
            label: lcars-header-open
            show_label: true
            variables:
              card:
                height: 45px
          - type: custom:button-card
            template:
              - cb-lcars-header
            label: lcars-header
          - type: custom:button-card
            template: cb-lcars-header-right
            label: lcars-header-right
          - type: custom:button-card
            template: cb-lcars-header-contained
            label: lcars-header-contained
          - type: custom:button-card
            template: cb-lcars-header-callout
            label: cb-lcars-header-callout
          - type: custom:button-card
            template: cb-lcars-header-callout-right
            label: cb-lcars-header-callout-right
        title: LCARS Headers
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-footer-base
            label: cb-lcars-footer-base
            show_label: true
            variables:
              card:
                height: 20px
          - type: custom:button-card
            template: cb-lcars-footer-open
            label: lcars-footer-open
            show_label: true
            variables:
              card:
                height: 45px
          - type: custom:button-card
            template: cb-lcars-footer
            label: lcars-footer
          - type: custom:button-card
            template: cb-lcars-footer-right
            label: lcars-footer-right
          - type: custom:button-card
            template: cb-lcars-footer-contained
            label: lcars-footer-contained
          - type: custom:button-card
            template: cb-lcars-footer-callout
            label: cb-lcars-footer-callout
          - type: custom:button-card
            template: cb-lcars-footer-callout-right
            label: cb-lcars-footer-callout-right
        title: LCARS Footers
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-header-picard
            variables:
              card_label: lcars-header-picard-left
          - type: custom:button-card
            template: cb-lcars-header-picard-right
            variables:
              card_label: lcars-header-picard-right
          - type: custom:button-card
            template: cb-lcars-footer-picard
            variables:
              card_label: lcars-footer-picard-left
          - type: custom:button-card
            template: cb-lcars-footer-picard-right
            variables:
              card_label: lcars-footer-picard-right
          - type: custom:button-card
            template: cb-lcars-header-picard
            variables:
              card_label: lcars-header-picard-left
              picard_border_ratio_factor: 1.3
        title: LCARS Headers Picard
      - type: grid
        cards:
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-base
            label: lcars-button-base
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-square
            label: lcars-button-square
        title: LCARS Button Bases
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-button-picard
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard
          - type: custom:button-card
            template: cb-lcars-button-picard
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard
            show_icon: true
          - type: custom:button-card
            template: cb-lcars-button-picard-right
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-right
          - type: custom:button-card
            template: cb-lcars-button-picard-right
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-right
            show_icon: true
          - type: custom:button-card
            template: cb-lcars-button-picard
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard
            variables:
              text:
                color:
                  'on': var(--picard-blue)
              card:
                color:
                  active: var(--picard-blue)
          - type: custom:button-card
            template: cb-lcars-button-picard-dense
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-dense
          - type: custom:button-card
            template: cb-lcars-button-picard-dense
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-dense
            show_icon: true
          - type: custom:button-card
            template: cb-lcars-button-picard-dense-right
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-dense-right
          - type: custom:button-card
            template:
              - cb-lcars-button-picard
              - cb-lcars-button-picard-label-ne
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-label-ne
        title: Picard Button [open)
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-button-picard-filled
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled
          - type: custom:button-card
            template: cb-lcars-button-picard-filled
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled
            show_icon: true
          - type: custom:button-card
            template: cb-lcars-button-picard-filled-right
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled-right
          - type: custom:button-card
            template: cb-lcars-button-picard-filled-right
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled-right
            show_icon: true
          - type: custom:button-card
            template: cb-lcars-button-picard-filled
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled
            show_icon: true
            variables:
              icon:
                color:
                  active: transparent
                  inactive: transparent
                  background:
                    active: var(--picard-blue)
                    inactive: transparent
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled
              - cb-lcars-button-picard-label-ne
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-label-ne
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled
              - cb-lcars-button-picard-label-sw
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-label-sw
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled
              - cb-lcars-button-picard-label-se
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-label-se
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled
              - cb-lcars-button-picard-label-nw
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-label-nw
          - type: custom:button-card
            template: cb-lcars-button-picard-filled-dense
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled-dense
          - type: custom:button-card
            template: cb-lcars-button-picard-filled-dense
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled-dense
            show_icon: true
          - type: custom:button-card
            template: cb-lcars-button-picard-filled-dense-right
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled-dense-right
          - type: custom:button-card
            template: cb-lcars-button-picard-filled-dense-right
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled-dense-right
            show_icon: true
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled
              - cb-lcars-button-picard-label-se
              - cb-lcars-button-picard-state-nw
              - cb-lcars-button-picard-name-ne
            entity: input_boolean.enable_verbal_notifications
            label: lcars-button-picard-filled
            show_icon: true
            show_state: true
            show_name: true
            variables:
              text:
                label:
                  font_size: 22px
                  font_weight: bold
              icon:
                color:
                  active: transparent
                  inactive: transparent
                  background:
                    active: var(--picard-blue)
                    inactive: transparent
        title: Picard Button [filled]
      - type: grid
        cards:
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-lozenge
            label: lcars-button-lozenge
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-lozenge
            label: lcars-button-lozenge
            show_icon: true
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-lozenge-right
            label: lcars-button-lozenge-right
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-lozenge-right
            label: lcars-button-lozenge-right
            show_icon: true
        title: LCARS Lozenge
      - type: grid
        cards:
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-bullet
            label: lcars-button-bullet
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-bullet
            label: lcars-button-bullet
            show_icon: true
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-lozenge
            label: lcars-button-lozenge
            show_icon: true
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-bullet-right
            label: lcars-button-bullet-right
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-bullet-right
            label: lcars-button-bullet-right
            show_icon: true
        title: LCARS Bullet
      - type: grid
        cards:
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-capped
            label: lcars-button-capped
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-capped
            label: lcars-button-capped
            show_icon: true
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-capped-right
            label: lcars-button-capped-right
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            template: cb-lcars-button-capped-right
            label: lcars-button-capped-right
            show_icon: true
        title: LCARS Capped
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-label
            label: lcars-label (a button really)
            show_label: true
            variables:
              font_size: 22px
          - type: custom:button-card
            template: cb-lcars-label
            label: lcars-label
            entity: input_boolean.enable_verbal_notifications
            show_state: true
            show_label: false
          - type: custom:button-card
            template: cb-lcars-label
            label: lcars-label
            entity: input_boolean.enable_verbal_notifications
            show_state: true
            show_label: false
            variables:
              label: ' '
              text:
                state:
                  font_size: 40px
                  font_weight: bold
                  padding:
                    top: 0px
                    bottom: 5px
                  transform: uppercase
                  align: center
                  justify: center
                  color:
                    'on': var(--picard-blue)
                    'off': var(--picard-orange)
                    zero: var(--lcars-green)
                    non_zero: var(--lcars-blue)
                    hvac_heat: var(--lcars-orange)
                    hvac_cool: var(--lcars-blue)
                    hvac_other: var(--lcars-purple)
          - type: custom:button-card
            template: cb-lcars-label
            label: engineering ii
            show_label: true
            variables:
              text:
                label:
                  font_size: 42px
                  font_weight: lighter
                  color:
                    default: var(--picard-pale-orange)
          - type: custom:button-card
            template: cb-lcars-label
            label: engineering ii
            show_label: true
            variables:
              text:
                label:
                  font_size: 60px
                  font_weight: lighter
                  color:
                    default: var(--picard-pale-orange)
                    'on': null
                  align: center
                  padding:
                    left: 40px
                    bottom: 10px
              card:
                height: 60px
                width: 490px
                border:
                  left:
                    size: 80px
                  right:
                    size: 40px
                  color: var(--lcars-card-bottom-color)
        title: TODO lcars-label
      - type: grid
        cards: []
        title: 'TODO: lcars capped labels'
      - type: grid
        cards: []
        title: blank
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-header-picard
            variables:
              card_label: Card Label
              card:
                height: 200px
                width: 400px
                border:
                  top:
                    left_radius: 90px
                  inner:
                    factor: 2
              lcars:
                border:
                  gap: 4px
                  factor: 4
                  top:
                    size: 20px
                  left:
                    size: 180px
              lcars_outer:
                card:
                  border:
                    left:
                      size: 60px
                    top:
                      size: 60px
                  color: var(--lcars-blue)
              lcars_inner:
                card:
                  border:
                    left:
                      size: 0px
                    top:
                      size: 45px
                    inner:
                      factor: 0.7
                  color: var(--lcars-card-top-color)
          - type: custom:button-card
            template:
              - cb-lcars-footer-picard
            variables:
              card:
                height: 160px
                width: 400px
                border:
                  bottom:
                    left_radius: 90px
                  inner:
                    factor: 2
              lcars:
                border:
                  gap: 4px
                  factor: 4
                  bottom:
                    size: 20px
                  left:
                    size: 180px
              lcars_outer:
                card:
                  border:
                    left:
                      size: 60px
                    bottom:
                      size: 60px
                  color: var(--lcars-blue)
              lcars_inner:
                card:
                  border:
                    left:
                      size: 0px
                    bottom:
                      size: 45px
                    inner:
                      factor: 0.7
                  color: var(--lcars-card-top-color)
          - type: custom:button-card
            template:
              - cb-lcars-header-picard-right
            variables:
              card:
                height: 160px
                width: 400px
                border:
                  top:
                    right_radius: 90px
                  inner:
                    factor: 2
              lcars:
                border:
                  gap: 4px
                  factor: 4
                  top:
                    size: 20px
                  right:
                    size: 180px
              lcars_outer:
                card:
                  border:
                    right:
                      size: 60px
                    top:
                      size: 60px
                  color: var(--lcars-blue)
              lcars_inner:
                card:
                  border:
                    right:
                      size: 0px
                    top:
                      size: 45px
                    inner:
                      factor: 0.7
                  color: var(--lcars-card-top-color)
          - type: custom:button-card
            template:
              - cb-lcars-footer-picard-right
            variables:
              card:
                height: 160px
                width: 400px
                border:
                  bottom:
                    right_radius: 90px
                  inner:
                    factor: 2
              lcars:
                border:
                  gap: 4px
                  factor: 4
                  bottom:
                    size: 20px
                  right:
                    size: 180px
              lcars_outer:
                card:
                  border:
                    right:
                      size: 60px
                    bottom:
                      size: 60px
                  color: var(--lcars-blue)
              lcars_inner:
                card:
                  border:
                    right:
                      size: 0px
                    bottom:
                      size: 45px
                    inner:
                      factor: 0.7
                  color: var(--lcars-card-top-color)
        title: Picard Elbow Variations
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-footer-picard
            variables:
              card:
                height: 176px
                width: 350px
                border:
                  bottom:
                    left_radius: 160px
                  inner:
                    factor: 1.27
                    width: 50px
              lcars:
                border:
                  gap: 5px
                  factor: 4
                  bottom:
                    size: 20px
                  left:
                    size: 180px
              lcars_outer:
                card:
                  border:
                    left:
                      size: 45px
                    bottom:
                      size: 45px
              lcars_inner:
                card:
                  border:
                    left:
                      size: 155px
                    bottom:
                      size: 45px
                    inner:
                      factor: 1.5
                  color: var(--picard-light-gray)
          - type: custom:button-card
            template:
              - cb-lcars-footer-picard-right
            variables:
              card:
                height: 180px
                width: 300px
                border:
                  bottom:
                    right_radius: 160px
                  inner:
                    factor: 1.4
                    width: 50px
              lcars:
                border:
                  gap: 5px
                  bottom:
                    size: 20px
                  right:
                    size: 180px
              lcars_outer:
                card:
                  border:
                    right:
                      size: 45px
                    bottom:
                      size: 45px
                  color: var(--lcars-ui-secondary)
              lcars_inner:
                card:
                  border:
                    right:
                      size: 10px
                    bottom:
                      size: 10px
                    inner:
                      factor: 4
                  color: var(--lcars-ui-primary)
          - type: custom:button-card
            template:
              - cb-lcars-footer-picard-right
            variables:
              card:
                height: 170px
                width: 300px
                border:
                  bottom:
                    right_radius: 80px
                  inner:
                    factor: 1.6
                    width: 50px
              lcars:
                border:
                  gap: 5px
                  bottom:
                    size: 20px
                  right:
                    size: 180px
              lcars_outer:
                card:
                  border:
                    right:
                      size: 130px
                    bottom:
                      size: 45px
                  color: var(--lcars-ui-secondary)
              lcars_inner:
                card:
                  border:
                    right:
                      size: 165px
                    bottom:
                      size: 0px
                    inner:
                      factor: 1
                  color: var(--lcars-card-bottom-color)
          - type: custom:button-card
            styles:
              card:
                - background-color: |
                    [[[
                      if (states['input_boolean.lcars_ui_debug'].state === 'on') {
                        return 'rgba(150,0,0,0.3)';
                      } else {
                        return 'transparent';
                      }
                    ]]]
                - width: 300px
                - height: 175px
                - border-radius: 0 !important
              custom_fields:
                elbow:
                  - position: absolute
                  - bottom: 0
                  - right: 0
                inner_elbow:
                  - position: absolute
                  - left: 0px
                  - top: 0px
            custom_fields:
              inner_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-picard-right
                  variables:
                    card:
                      height: 139px
                      width: 100px
                      border:
                        inner:
                          factor: 1
                          width: 50px
                        bottom:
                          right_radius: 80px
                    lcars:
                      border:
                        gap: 4px
                    lcars_outer:
                      card:
                        color: transparent
                        border:
                          bottom:
                            size: 20px
                          right:
                            size: 15px
                    lcars_inner:
                      card:
                        color: var(--lcars-ui-secondary)
                        border:
                          bottom:
                            size: 5px
                            right_radius: 60px
                          right:
                            size: 5px
                          inner:
                            factor: 1
              elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-picard-right
                  variables:
                    card:
                      height: 175px
                      width: 500px
                      border:
                        bottom:
                          right_radius: 80px
                        inner:
                          factor: 1.2
                          width: 50px
                    lcars:
                      border:
                        gap: 4px
                    lcars_outer:
                      card:
                        color: var(--lcars-ui-secondary)
                        border:
                          bottom:
                            size: 6px
                          right:
                            size: 6px
                    lcars_inner:
                      card:
                        color: var(--lcars-card-bottom-color)
                        border:
                          bottom:
                            size: 45px
                          right:
                            size: 205px
                          inner:
                            factor: 1
        title: More Elbow variations (LCARS2)
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-picard-horizontal
            variables:
              card_height: 200px
              card_width: 400px
              picard_border_gap: 5px
              picard_lcars_1_width: 400px
              picard_lcars_1_label: cb-lcars-picard-horizontal
              picard_lcars_2_label: default-50/50-split
          - type: custom:button-card
            template:
              - cb-lcars-picard-horizontal
            variables:
              card_height: 200px
              card_width: 400px
              picard_border_gap: 5px
              picard_lcars_1_color: var(--picard-orange)
              picard_lcars_2_color: var(--picard-blue)
              picard_lcars_1_height: 100px
              picard_lcars_2_height: 60px
              picard_lcars_1_width: 400px
              picard_lcars_1_label: picard-horizontal-1
              picard_lcars_2_label: picard-horizontal-2
          - type: custom:button-card
            template: cb-lcars-picard-vertical
            variables:
              card_height: 80px
              card_width: 400px
              picard_border_gap: 5px
              picard_lcars_1_label: picard-vertical
              picard_lcars_2_label: 50/50-split
          - type: custom:button-card
            template: cb-lcars-picard-vertical
            variables:
              card_height: 80px
              card_width: 400px
              picard_border_gap: 5px
              picard_lcars_1_color: var(--picard-orange)
              picard_lcars_2_color: var(--picard-blue)
              picard_lcars_1_width: 250px
              picard_lcars_2_width: 140px
              picard_lcars_1_label: picard-vertical-1
              picard_lcars_2_label: picard-vertical-2
        title: Picard Panels (!!replace with grid panels)
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-picard-horizontal
            variables:
              card_height: 200px
              card_width: 400px
              picard_border_gap: 5px
              picard_lcars_1_width: 400px
              picard_lcars_1_label: cb-lcars-picard-horizontal
              picard_lcars_2_label: default-50/50-split
            styles:
              card:
                - transform: skew(-15deg);
          - type: custom:button-card
            styles:
              card:
                - background-color: |
                    [[[
                      if (states['input_boolean.lcars_ui_debug'].state === 'on') {
                        return 'rgba(150,0,0,0.3)';
                      } else {
                        return 'transparent';
                      }
                    ]]]
                - width: 300px
                - height: 175px
                - border-radius: 0 !important
                - transform: skew(-20deg)
              custom_fields:
                elbow:
                  - position: absolute
                  - bottom: 0
                  - right: 0
                inner_elbow:
                  - position: absolute
                  - left: 0px
                  - top: 0px
            custom_fields:
              inner_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-picard-right
                  variables:
                    card:
                      height: 139px
                      width: 100px
                      border:
                        inner:
                          factor: 1
                          width: 50px
                        bottom:
                          right_radius: 80px
                    lcars:
                      border:
                        gap: 4px
                    lcars_outer:
                      card:
                        color: transparent
                        border:
                          bottom:
                            size: 20px
                          right:
                            size: 15px
                    lcars_inner:
                      card:
                        color: var(--lcars-ui-secondary)
                        border:
                          bottom:
                            size: 5px
                            right_radius: 60px
                          right:
                            size: 5px
                          inner:
                            factor: 1
              elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-picard-right
                  variables:
                    card:
                      height: 175px
                      width: 500px
                      border:
                        bottom:
                          right_radius: 80px
                        inner:
                          factor: 1.2
                          width: 50px
                    lcars:
                      border:
                        gap: 4px
                    lcars_outer:
                      card:
                        color: var(--lcars-ui-secondary)
                        border:
                          bottom:
                            size: 6px
                          right:
                            size: 6px
                    lcars_inner:
                      card:
                        color: var(--lcars-card-bottom-color)
                        border:
                          bottom:
                            size: 45px
                          right:
                            size: 205px
                          inner:
                            factor: 1
        title: Skewed Panels
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-button-picard-icon
            entity: input_boolean.enable_verbal_notifications
          - type: custom:button-card
            template: cb-lcars-button-picard-icon
            entity: input_boolean.enable_verbal_notifications
            variables:
              icon:
                color:
                  active: white
                  inactive: black
                  background:
                    active: blue
                    inactive: blue
              card:
                color:
                  background:
                    active: blue
                    inactive: blue
          - type: custom:button-card
            template:
              - cb-lcars-button-grid-icons
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              grid:
                X: 5
                'Y': 1
                buttons:
                  - entity: light.tv
              button:
                variables:
                  card:
                    width: 40px
                    height: 40px
                  icon:
                    color:
                      active: blue
                      inactive: red
                template:
                  - cb-lcars-button-picard-icon
                show_icon: true
                show_label: false
                size: 24px
          - type: custom:button-card
            template:
              - cb-lcars-button-grid-icons
            variables:
              grid:
                buttons:
                  - entity: input_boolean.enable_verbal_notifications
                  - entity: input_boolean.lcars_sound
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-blue)
                  - variables:
                      icon:
                        color:
                          background:
                            inactive: var(--lcars-red)
                    icon: si:startrek
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-red)
                      icon:
                        color:
                          background:
                            inactive: var(--lcars-blue)
                            active: var(--lcars-red)
                        inactive: var(--lcars-blue)
                        active: var(--lcars-blue)
                    icon: none
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-button-grid-icons
            variables:
              button:
                variables:
                  card:
                    color:
                      background:
                        inactive: '[[[ return variables.__get_random_css_color() ]]]'
              grid:
                X: 8
                'Y': 1
                buttons:
                  - variables:
                      card:
                        color:
                          background:
                            inactive: '[[[ return variables.__get_random_css_color() ]]]'
                  - variables:
                      card:
                        color:
                          background:
                            inactive: '[[[ return variables.__get_random_css_color() ]]]'
                  - variables:
                      card:
                        color:
                          background:
                            inactive: '[[[ return variables.__get_random_css_color() ]]]'
                  - variables:
                      card:
                        color:
                          background:
                            inactive: '[[[ return variables.__get_random_css_color() ]]]'
                  - variables:
                      card:
                        color:
                          background:
                            inactive: '[[[ return variables.__get_random_css_color() ]]]'
                  - variables:
                      card:
                        color:
                          background:
                            inactive: '[[[ return variables.__get_random_css_color() ]]]'
                  - variables:
                      card:
                        color:
                          background:
                            inactive: '[[[ return variables.__get_random_css_color() ]]]'
                  - variables:
                      card:
                        color:
                          background:
                            inactive: '[[[ return variables.__get_random_css_color() ]]]'
        title: Icon and Icon Grids
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              grid:
                X: 3
                'Y': 3
                buttons:
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-color
                    variables:
                      card:
                        color:
                          background:
                            active: blue
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-icon
                    show_icon: true
                    variables:
                      card:
                        color:
                          background:
                            active: yellow
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-icon-color
                    show_icon: true
                    variables:
                      card:
                        color:
                          background:
                            active: green
                      icon:
                        color:
                          background:
                            active: white
                          active: red
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-icon
                    show_icon: true
                    variables:
                      card:
                        color:
                          background:
                            active: yellow
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-lozenge
                    show_icon: false
                    variables:
                      card:
                        color:
                          background:
                            active: cyan
                    template:
                      - cb-lcars-button-lozenge
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              button:
                template:
                  - cb-lcars-button-lozenge
                variables:
                  card:
                    color:
                      background:
                        inactive: var(--lcars-blue)
                    height: 65px
              grid:
                gap: 19px
          - type: custom:button-card
            view_layout:
              grid-area: header
            styles:
              card:
                - background: transparent
                - height: 130px
                - width: 923px
                - border-radius: 0 !important
              custom_fields:
                button_grid:
                  - position: absolute
                  - left: 0px
                  - top: 0px
            custom_fields:
              button_grid:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-button-grid
                  variables:
                    card:
                      width: 923px
                      height: 140px
                    grid:
                      auto_calc_X: false
                      X: 4
                      auto_calc_Y: false
                      'Y': 2
                      template_columns: 180px 180px 180px 275px
                      buttons:
                        - entity: person.dexter
                          label: the dex
                          template:
                            - cb-lcars-button-picard-filled
                            - cb-lcars-animate-press
                          state:
                            - id: state_on
                              value: home
                            - id: state_off
                              value: not_home
                          tap_action:
                            action: more-info
                          hold_action:
                            action: none
                          double_tap_action:
                            action: none
                          variables:
                            text:
                              font_size: 22px
                            card:
                              color:
                                background:
                                  inactive: var(--warning-color)
                                  active: var(--picard-blue)
                        - entity: person.luna
                          label: luna
                          template:
                            - cb-lcars-button-picard-filled
                            - cb-lcars-button-picard-label-se
                            - cb-lcars-animate-press
                          state:
                            - id: state_on
                              value: home
                            - id: state_off
                              value: not_home
                          tap_action:
                            action: more-info
                          hold_action:
                            action: none
                          double_tap_action:
                            action: none
                          variables:
                            card:
                              background:
                                inactive: var(--lcars-ui-secondary)
                                active: var(--warning-color)
                        - show_icon: true
                          icon: si:startrek
                          size: 24px
                          tap_action:
                            action: toggle
                          variables:
                            icon:
                              color:
                                active: red
                                inactive: blue
                              background:
                                active: var(--picard-blue)
                                inactive: transparent
                            card:
                              color:
                                active: var(--picard-green)
                                inactive: var(--error-color)
                                default: var(--error-color)
                                background:
                                  inactive: var(--lcars-ui-secondary)
                                  active: var(--picard-starlight)
                              width: 180px
                              min_height: 45px
                              height: null
                          entity: input_boolean.enable_verbal_notifications
                          label: tts alerts
                        - entity: switch.adguard_home_protection
                          label: ad-guard
                          variables:
                            card:
                              width: 275px
                              color:
                                background:
                                  active: var(--lcars-ui-secondary)
                                  inactive: var(--error-color)
                        - entity: person.dexter
                          template:
                            - cb-lcars-button-picard-filled
                            - cb-lcars-button-picard-name-east
                            - cb-lcars-button-picard-state-nw
                          show_label: false
                          show_name: true
                          show_state: true
                          tap_action:
                            action: more-info
                          hold_action:
                            action: none
                          double_tap_action:
                            action: none
                          variables:
                            card:
                              height: 80px
                        - variables:
                            card:
                              height: 80px
                        - variables:
                            card:
                              height: 80px
                        - variables:
                            card:
                              width: 275px
                              height: 80px
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
              - cb-lcars-card-base
            variables:
              card:
                width: 990px
                height: 400px
              grid:
                auto_calc_X: false
                auto_calc_Y: true
                X: 2
              button:
                variables:
                  card:
                    color:
                      background:
                        inactive: var(--picard-darkest-gray)
        title: LCARS Button Grids
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-meter
        title: Meter (default 10-step)
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-meter
            variables:
              gradient_start_color: var(--picard-cyan)
              gradient_end_color: var(--picard-dark-blue)
          - type: custom:button-card
            template: cb-lcars-meter
            variables:
              gradient_start_color: var(--picard-cyan)
              gradient_end_color: var(--picard-dark-blue)
              button:
                variables:
                  card:
                    height: 15px
                template:
                  - cb-lcars-button-picard-filled
        title: Meter (custom color/button shape)
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-meter
            variables:
              gradient_start_color: var(--warning-color)
              gradient_end_color: var(--picard-starlight)
              button:
                variables:
                  card:
                    height: 10px
                template:
                  - cb-lcars-button-picard-filled
              _gradient:
                gap: 1px
                'Y': 18
          - type: custom:button-card
            template:
              - cb-lcars-meter
            variables:
              _gradient:
                'Y': 20
                gap: 1px
              gradient_start_color: var(--lcars-blue)
              gradient_end_color: var(--lcars-orange)
              button:
                variables:
                  card:
                    height: 10px
          - type: custom:button-card
            template:
              - cb-lcars-meter
            variables:
              _gradient:
                'Y': 20
                gap: 1px
              gradient_start_color: var(--lcars-blue)
              gradient_end_color: var(--lcars-orange)
              button:
                variables:
                  card:
                    height: 10px
                    width: 10px
        title: Meter (more fun)
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-meter-horizontal
        title: Meter Horizontal
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-meter-horizontal
            variables:
              gradient_start_color: var(--lcars-blue)
              gradient_end_color: var(--lcars-gray)
          - type: custom:button-card
            template: cb-lcars-meter-horizontal
            variables:
              _gradient:
                gap: 15px
                X: 15
              gradient_start_color: var(--picard-cyan)
              gradient_end_color: var(--picard-dark-blue)
              button:
                variables:
                  card:
                    width: 20px
                    height: 20px
                template:
                  - cb-lcars-button-lozenge
        title: Meter Horizontal (custom color/shape)
      - type: grid
        cards: []
        title: blank
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-slider
            variables:
              entity: light.desk
          - type: custom:button-card
            template: cb-lcars-slider
            variables:
              entity: light.desk
              slider:
                variables:
                  mask_color: rgba(0,0,0,1)
        title: LCARS Slider (entity control)
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-slider-horizontal
            variables:
              entity: light.desk
          - type: custom:button-card
            template: cb-lcars-slider-horizontal
            entity: light.tv
            variables:
              meter:
                variables:
                  gradient_start_color: var(--picard-dark-blue)
                  gradient_end_color: var(--picard-cyan)
                  button:
                    template: cb-lcars-button-lozenge
              slider:
                variables:
                  mask_color: rgba(0,255,0,0.7)
          - type: custom:button-card
            template: cb-lcars-slider-horizontal
            entity: light.tv
            variables:
              card:
                height: 20px
              meter:
                variables:
                  gradient_start_color: var(--picard-dark-blue)
                  gradient_end_color: var(--picard-orange)
                  _gradient:
                    gap: 10px
                    X: 8
                  button:
                    variables:
                      card:
                        width: 30px
                        height: 20px
                    template:
                      - cb-lcars-button-lozenge
              slider:
                variables:
                  mask_color: rgba(0,0,0,0.7)
          - type: custom:button-card
            entity: light.tv
            template: cb-lcars-slider-horizontal-gauge
            variables:
              gauge:
                show_sub_meter: true
          - type: custom:button-card
            entity: light.tv
            template: cb-lcars-slider-horizontal-gauge
            variables:
              entity_match_slider: true
              gauge:
                show_sub_meter: false
        title: LCARS Slider Horiz (entity control)
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-slider-gauge
            entity: light.tv
            variables:
              card:
                height: 300px
          - type: custom:button-card
            template:
              - cb-lcars-slider-gauge
            entity: light.tv
            variables:
              card:
                height: 400px
                width: 50px
              slider:
                variables:
                  color: var(--error-color)
                  color_alpha: 0.7
                  border_color: none
              meter:
                variables:
                  button:
                    variables:
                      text:
                        label:
                          color:
                            'off': var(--warning-color)
                            default: var(--warning-color)
                      card:
                        border:
                          color: var(--error-color)
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-multimeter
            variables:
              entity: light.tv
          - type: custom:button-card
            template: cb-lcars-multimeter
            variables:
              entity: light.tv
              label: my label
          - type: custom:button-card
            template: cb-lcars-multimeter
            variables:
              entity: light.tv
              label: btn.orange
              header_button:
                variables:
                  card:
                    color:
                      background:
                        active: var(--picard-orange)
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.tv
              entity_match_header: true
              label: match ent.
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.tv
              entity_match_header: true
              entity_match_slider_end: true
              label: match sld end
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.tv
              entity_match_header: true
              entity_match_slider_start: true
              label: match sld start
          - type: custom:button-card
            template: cb-lcars-multimeter
            variables:
              entity: ''
              label: icons
              panel:
                mode: icons
          - type: custom:button-card
            template: cb-lcars-multimeter
            variables:
              entity: light.tv
              label: gauge
              panel:
                mode: gauge
        title: Multimeter (gauge/slider/icons)
      - type: grid
        cards: []
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-multimeter
            entity: switch.living_room_recordings
            variables:
              card:
                width: 360px
                height: 55px
              panel:
                mode: icons
                width: 220px
                height: 45px
              label: living room
              icon_grid:
                variables:
                  button:
                    variables:
                      card:
                        height: 40px
                        color:
                          background:
                            inactive: var(--warning-color)
                            active: var(--picard-blue)
                      icon:
                        color:
                          background:
                            inactive: var(--warning-color)
                            active: var(--picard-blue)
                  grid:
                    X: 4
                    buttons:
                      - entity: switch.living_room_recordings
                      - entity: switch.living_room_detect
                      - entity: switch.living_room_snapshots
                      - entity: switch.living_room_push_notifications
                        variables:
                          icon:
                            color:
                              background:
                                inactive: var(--picard-dark-blue)
                                active: var(--picard-blue)
                          card:
                            color:
                              background:
                                inactive: var(--picard-dark-blue)
                                active: var(--picard-blue)
          - type: custom:button-card
            template: cb-lcars-multimeter
            variables:
              card_width: 360px
              card_height: 55px
              panel_width: 200px
              panel_height: 45px
              entity: switch.front_door_recordings
              label: front door
              header_button:
                variables:
                  card_active_background_color: var(--picard-starlight)
                  card_inactive_background_color: var(--error-color)
              icon_grid:
                variables:
                  grid_X: 4
                  button:
                    card_height: 40px
                    card_min_height: 40px
                    variables:
                      icon_inactive_background_color: var(--warning-color)
                      icon_active_background_color: var(--picard-cyan)
                      card_inactive_background_color: var(--warning-color)
                      card_active_background_color: var(--picard-cyan)
                  grid_buttons:
                    - entity: switch.front_door_recordings
                    - entity: switch.front_door_detect
                    - entity: switch.front_door_snapshots
                    - entity: switch.front_door_push_notifications
                      variables:
                        icon_inactive_background_color: var(--picard-dark-blue)
                        icon_active_background_color: var(--picard-blue)
                        card_inactive_background_color: var(--picard-dark-blue)
                        card_active_background_color: var(--picard-blue)
          - type: custom:button-card
            template: cb-lcars-multimeter
            variables:
              panel_mode: icons
              card_width: 360px
              card_height: 55px
              panel_width: 200px
              panel_height: 45px
              entity: switch.office_recordings
              label: office
              icon_grid:
                variables:
                  grid_X: 4
                  button:
                    card_height: 40px
                    card_min_height: 40px
                    variables:
                      icon_inactive_background_color: var(--warning-color)
                      icon_active_background_color: var(--picard-blue)
                      card_inactive_background_color: var(--warning-color)
                      card_active_background_color: var(--picard-blue)
                  grid_buttons:
                    - entity: switch.office_recordings
                    - entity: switch.office_detect
                    - entity: switch.office_snapshots
                    - entity: switch.office_push_notifications
                      variables:
                        icon_inactive_background_color: var(--picard-dark-blue)
                        icon_active_background_color: var(--picard-blue)
                        card_inactive_background_color: var(--picard-dark-blue)
                        card_active_background_color: var(--picard-blue)
          - type: custom:button-card
            template: cb-lcars-multimeter
            variables:
              panel_mode: icons
              card_width: 360px
              card_height: 55px
              panel_width: 200px
              panel_height: 45px
              entity: automation.notifications_android_tv_patio_all_motion
              label: alerts
              icon_grid:
                variables:
                  grid_X: 3
                  button:
                    card_height: 40px
                    card_min_height: 40px
                    variables:
                      icon_inactive_background_color: var(--warning-color)
                      icon_active_background_color: var(--picard-blue)
                      card_inactive_background_color: var(--warning-color)
                      card_active_background_color: var(--picard-blue)
                  grid_buttons:
                    - entity: automation.notifications_android_tv_patio_all_motion
                      icon: mdi:television
                    - entity: automation.test_frigate_notification
                      icon: mdi:cellphone
                    - entity: automation.notifications_patio_gate
                      icon: mdi:gate-alert
        title: Multimater - icon panels
    max_columns: 3
    cards: []
  - title: Theme Showcase
    path: theme-showcase
    icon: mdi:theme-light-dark
    type: sections
    max_columns: 1
    sections:
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              button:
                template: cb-lcars-button-picard-filled
                variables:
                  text:
                    label:
                      font_size: 16px
                      font_weight: 300
              grid:
                X: 5
                'Y': 8
                buttons:
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-darkest-gray)
                    label: picard-darkest-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-darkest-blue)
                    label: picard-darkest-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-darkest-green)
                    label: picard-darkest-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-black-cherry)
                    label: picard-black-cherry
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-dark-gray)
                    label: picard-dark-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-dark-blue)
                    label: picard-dark-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-dark-orange)
                    label: picard-dark-orange
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-dark-green)
                    label: picard-dark-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-font-color)
                    label: picard-font-color
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-dark-gray)
                    label: picard-medium-dark-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-dark-blue)
                    label: picard-medium-dark-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-dark-green)
                    label: picard-medium-dark-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-primary-gray)
                    label: picard-primary-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-blue)
                    label: picard-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-orange)
                    label: picard-orange
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-green)
                    label: picard-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-light-gray)
                    label: picard-light-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-light-blue)
                    label: picard-medium-light-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-light-green)
                    label: picard-medium-light-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-ghost-gray)
                    label: picard-ghost-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-light-blue)
                    label: picard-light-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-light-orange)
                    label: picard-light-orange
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-light-green)
                    label: picard-light-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-moonlight)
                    label: picard-moonlight
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-lightest-blue)
                    label: picard-cyan/lightest-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-pale-orange)
                    label: picard-pale-orange
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-starlight)
                    label: picard-starlight
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
        title: '[Theme] LCARS Picard II'
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              button:
                template: cb-lcars-button-picard-filled
                variables:
                  text:
                    label:
                      font_size: 16px
                      font_weight: 300
              grid:
                X: 4
                'Y': 3
                buttons:
                  - label: lcars-card-top-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-card-top-color)
                  - label: lcars-card-mid-left-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-card-mid-left-color)
                  - label: lcars-card-button
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-card-button)
                  - label: lcars-card-bottom-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-card-bottom-color)
                  - label: success-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--success-color)
                  - label: warning-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--warning-color)
                  - label: error-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--error-color)
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - label: lcars-ui-primary
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-ui-primary)
                  - label: lcars-ui-secondary
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-ui-secondary)
                  - label: lcars-ui-tertiary
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-ui-tertiary)
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
        title: '[ha-lcars vars] LCARS Picard II'
    cards: []
  - title: Theme Showcase Red Aert
    path: theme-showcase-red-aert
    theme: LCARS Picard II RED ALERT
    type: sections
    sections:
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              button:
                template: cb-lcars-button-picard-filled
                variables:
                  text:
                    label:
                      font_size: 16px
                      font_weight: 300
              grid:
                X: 5
                'Y': 8
                buttons:
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-darkest-gray)
                    label: picard-darkest-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-darkest-blue)
                    label: picard-darkest-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-darkest-green)
                    label: picard-darkest-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-black-cherry)
                    label: picard-black-cherry
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-dark-gray)
                    label: picard-dark-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-dark-blue)
                    label: picard-dark-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-dark-orange)
                    label: picard-dark-orange
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-dark-green)
                    label: picard-dark-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-font-color)
                    label: picard-font-color
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-dark-gray)
                    label: picard-medium-dark-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-dark-blue)
                    label: picard-medium-dark-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-dark-green)
                    label: picard-medium-dark-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-primary-gray)
                    label: picard-primary-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-blue)
                    label: picard-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-orange)
                    label: picard-orange
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-green)
                    label: picard-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-light-gray)
                    label: picard-light-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-light-blue)
                    label: picard-medium-light-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-medium-light-green)
                    label: picard-medium-light-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-ghost-gray)
                    label: picard-ghost-gray
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-light-blue)
                    label: picard-light-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-light-orange)
                    label: picard-light-orange
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-light-green)
                    label: picard-light-green
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-moonlight)
                    label: picard-moonlight
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-lightest-blue)
                    label: picard-cyan/lightest-blue
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-pale-orange)
                    label: picard-pale-orange
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: var(--picard-starlight)
                    label: picard-starlight
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
        title: '[Theme] LCARS Picard II RED ALERT'
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              button:
                template: cb-lcars-button-picard-filled
                variables:
                  text:
                    label:
                      font_size: 16px
                      font_weight: 300
              grid:
                X: 4
                'Y': 3
                buttons:
                  - label: lcars-card-top-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-card-top-color)
                  - label: lcars-card-mid-left-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-card-mid-left-color)
                  - label: lcars-card-button
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-card-button)
                  - label: lcars-card-bottom-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-card-bottom-color)
                  - label: success-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--success-color)
                  - label: warning-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--warning-color)
                  - label: error-color
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--error-color)
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
                  - label: lcars-ui-primary
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-ui-primary)
                  - label: lcars-ui-secondary
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-ui-secondary)
                  - label: lcars-ui-tertiary
                    variables:
                      card:
                        color:
                          background:
                            inactive: var(--lcars-ui-tertiary)
                  - variables:
                      card:
                        color:
                          background:
                            inactive: black
        title: '[ha-lcars vars] LCARS Picard II RED ALERT'
    max_columns: 1
    icon: mdi:compare
    cards: []
  - title: lcars-base
    path: lcars-base
    type: sections
    max_columns: 3
    sections:
      - type: grid
        cards: []
        title: cb-lcars-base
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-base
            show_icon: true
            show_label: true
            label: desk light yo
            entity: light.desk
            variables:
              icon:
                size: 24px
                color:
                  active: white
                  inactive: brown
                  background:
                    active: pink
                    inactive: yellow
              text:
                font_size: 26px
                align_items: center
                padding:
                  top: 0px
                  bottom: 20px
                font_weight: 400
                color:
                  'off': blue
                  'on': red
                justify: center
              card:
                height: 60px
                color:
                  active: green
                  inactive: purple
                  background:
                    active: var(--picard-blue)
                    inactive: var(--picard-dark-gray)
        title: cb-lcars-button-base
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-button-base
            variables:
              card:
                border:
                  top:
                    left_radius: null
                    right_radius: null
                  bottom:
                    left_radius: null
                    right_radius: null
          - type: custom:button-card
            template: cb-lcars-button-lozenge
            show_icon: true
            entity: light.tv
            variables:
              card:
                height: 45px
              icon:
                border:
                  left:
                    padding: 10%
                  right:
                    size: 8px
        title: cb-lcars-lozenge
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-button-lozenge
            show_label: true
            label: shiotewho
            entity: light.tv
            show_icon: true
            variables:
              text:
                justify: left
                color:
                  'off': red
                  'on': blue
                  default: green
                  hvac_heat: purple
              icon:
                justify: right
                border:
                  left:
                    color: black
                  right:
                    color: transparent
          - type: custom:button-card
            template: cb-lcars-button-lozenge-right
            show_label: true
            label: shiotewho
            icon: si:startrek
            show_icon: true
            entity: light.tv
            variables:
              card:
                color:
                  background:
                    inactive: blue
                    active: green
            size: 1.5em
        title: cb-lcars-lozenge-right
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-button-lozenge
            variables:
              card:
                border:
                  top:
                    left_radius: 0px
                  bottom:
                    left_radius: 0px
        title: cb-lcars-button-bullet
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-base
            show_label: true
            variables:
              card:
                min_height: 40px
                color:
                  background:
                    inactive: transparent
              text:
                font_size: 40px
                font_weight: bold
                padding:
                  top: 0px
                  bottom: 5px
                transform: uppercase
                align: center
                justify: center
                color:
                  'on': var(--lcars-green)
                  'off': var(--lcars-blue)
                  zero: var(--lcars-green)
                  non_zero: var(--lcars-blue)
                  hvac_heat: var(--lcars-orange)
                  hvac_cool: var(--lcars-blue)
                  hvac_other: var(--lcars-purple)
          - type: custom:button-card
            label: test
            template: cb-lcars-button-base
            variables:
              text:
                font_weight: normal
                font_size: 22px
                align_items: center
                color:
                  default: '[[[ return variables.lcars_color ]]]'
                  'on': '[[[ return variables.card.color.active ]]]'
                  'off': '[[[ return variables.card.color.inactive ]]]'
                  zero: '[[[ return variables.card.color.active ]]]'
                  non_zero: '[[[ return variables.card.color.inactive ]]]'
                padding:
                  top: 0px
                  left: 10px
                  right: 10px
                  bottom: 5px
              icon:
                color:
                  default: null
                  active: '[[[ return variables.card.color.active ]]]'
                  inactive: '[[[ return variables.card.color.inactive ]]]'
              card:
                border:
                  top:
                    size: 4px
                  left:
                    size: 4px
                  right:
                    size: 4px
                  bottom:
                    size: 4px
                color:
                  background:
                    default: transparent
                    active: transparent
                    inactive: transparent
          - type: custom:button-card
            template: cb-lcars-button-picard
            entity: light.tv
            show_name: true
            show_icon: true
            variables:
              text:
                justify: left
              icon:
                justify: right
                border:
                  left:
                    color: black
                  right:
                    color: transparent
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-base
            variables:
              card:
                border:
                  top:
                    size: 20px
          - type: custom:button-card
            template: cb-lcars-base
            show_label: true
            variables:
              card:
                height: 60px
                border:
                  top:
                    size: 20px
                    left_radius: var(--ha-card-border-radius)
                  left:
                    size: 90px
              text:
                padding:
                  top: 10px
                  left: 20px
                  right: 0px
                  bottom: 10px
                align: left
                justify: left
            styles:
              label:
                - border-top-right-radius: 0px
                - border-top-left-radius: >-
                    [[[ return "calc(" + variables.card.border.top.left_radius +
                    " / " + variables.card.border.inner.factor +" )";]]]
          - type: custom:button-card
            template: cb-lcars-header-open
            variables:
              card:
                min_height: 40px
                border:
                  left:
                    size: 50px
                  right:
                    size: 50px
                  top:
                    size: 10px
                    left_radius: var(--ha-card-border-radius)
                    right_radius: var(--ha-card-border-radius)
                  bottom:
                    left_radius: 0px
                    right_radius: 0px
            styles:
              label:
                - border-top-left-radius: >-
                    [[[ return "calc(" + variables.card.border.top.left_radius +
                    " / " + variables.card.border.inner.factor +" )";]]]
                - border-top-right-radius: >-
                    [[[ return "calc(" + variables.card.border.top.right_radius
                    + " / " + variables.card.border.inner.factor +" )";]]]
          - type: custom:button-card
            template: cb-lcars-base
            show_label: true
            variables:
              card:
                height: 60px
                border:
                  top:
                    size: 20px
                    left_radius: 0px
                    right_radius: var(--ha-card-border-radius)
                  right:
                    size: 90px
                  bottom:
                    right_radius: 0px
              text:
                padding:
                  top: 10px
                  left: 0px
                  right: 20px
                  bottom: 10px
                align: left
                justify: right
            styles:
              label:
                - border-top-left-radius: 0px
                - border-top-right-radius: >-
                    [[[ return "calc(" + variables.card.border.top.right_radius
                    + " / " + variables.card.border.inner.factor +" )";]]]
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-footer-base
            show_label: true
            variables:
              card:
                height: 60px
                border:
                  left:
                    size: 90px
                  bottom:
                    size: 20px
                    left_radius: var(--ha-card-border-radius)
              text:
                padding:
                  top: 10px
                  left: 20px
                  right: 0px
                  bottom: 10px
                align: left
                justify: left
            styles:
              label:
                - border-bottom-left-radius: >-
                    [[[ return "calc(" +
                    variables.card.border.bottom.left_radius + " / " +
                    variables.card.border.inner.factor +" )";]]]
                - border-bottom-right-radius: 0px
          - type: custom:button-card
            template: cb-lcars-footer-open
            show_label: true
            variables:
              card:
                height: 60px
                border:
                  left:
                    size: 50px
                  right:
                    size: 50px
                  bottom:
                    size: 10px
                    left_radius: var(--ha-card-border-radius)
                    right_radius: var(--ha-card-border-radius)
                  top:
                    left_radius: 0px
                    right_radius: 0px
            styles:
              label:
                - border-bottom-left-radius: >-
                    [[[ return "calc(" +
                    variables.card.border.bottom.left_radius + " / " +
                    variables.card.border.inner.factor +" )";]]]
                - border-bottom-right-radius: >-
                    [[[ return "calc(" +
                    variables.card.border.bottom.right_radius + " / " +
                    variables.card.border.inner.factor +" )";]]]
          - type: custom:button-card
            template: cb-lcars-footer-base
            show_label: true
            variables:
              card:
                height: 60px
                border:
                  right:
                    size: 90px
                  bottom:
                    size: 20px
                    right_radius: var(--ha-card-border-radius)
              text:
                padding:
                  top: 10px
                  left: 0px
                  right: 20px
                  bottom: 10px
                align: left
                justify: right
            styles:
              label:
                - border-bottom-left-radius: 0px
                - border-bottom-right-radius: >-
                    [[[ return "calc(" +
                    variables.card.border.bottom.right_radius + " / " +
                    variables.card.border.inner.factor +" )";]]]
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-button-base
            variables:
              text:
                font_weight: normal
                font_size: 22px
                align_items: center
                padding:
                  top: 0px
                  left: 10px
                  right: 10px
                  bottom: 5px
      - type: grid
        cards:
          - type: custom:button-card
            variables:
              card:
                height: 100px
                width: 400px
                border:
                  top:
                    left_radius: var(--ha-card-border-radius)
                    right_radius: 0px !important
                  bottom:
                    left_radius: 0px !important
                    right_radius: 0px !important
                  inner:
                    factor: 1
                    width: 35px
              card_label: ' '
              lcars:
                border:
                  gap: 4px
                  factor: 4
                  top:
                    size: 20px
                  left:
                    size: 180px
                  bottom:
                    size: 0
                  right:
                    size: 0
              lcars_outer:
                card:
                  color: var(--lcars-card-top-color)
                  border:
                    left:
                      size: >-
                        [[[ return "calc( ((" + variables.lcars.border.left.size
                        + " - " + variables.lcars.border.gap + ") / " +
                        variables.lcars.border.factor + ") * (" +
                        variables.lcars.border.factor + " - 1)" + ")";]]]
                    top:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.top.size +
                        " - " + variables.lcars.border.gap + ") / 2)";]]]
              lcars_inner:
                card:
                  color: var(--lcars-card-top-color)
                  border:
                    left:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.left.size +
                        " - " + variables.lcars.border.gap + " ) / " +
                        variables.lcars.border.factor + ")" ;]]]
                    top:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.top.size +
                        " - " + variables.lcars.border.gap + ") / 2)";]]]
                      left_radius: >-
                        [[[ return "calc((" +
                        variables.card.border.top.left_radius + " ) / " +
                        variables.card.border.inner.factor +" )";]]]
            styles:
              card:
                - background-color: transparent
                - height: '[[[ return variables.card.height; ]]]'
                - width: '[[[ return variables.card.width; ]]]'
                - border-top-left-radius: '[[[ return variables.card.border.top.left_radius ]]]'
                - border-top-right-radius: '[[[ return variables.card.border.top.right_radius ]]]'
                - border-bottom-left-radius: '[[[ return variables.card.border.bottom.left_radius ]]]'
                - border-bottom-right-radius: '[[[ return variables.card.border.bottom.right_radius ]]]'
              custom_fields:
                lcars_outer:
                  - position: absolute
                  - top: 0
                  - left: 0
                lcars_inner:
                  - position: absolute
                  - top: >-
                      [[[ return "calc( (" +
                      variables.lcars_outer.card.border.top.size + " + " +
                      variables.lcars.border.gap + ")  ) "; ]]]
                  - left: >-
                      [[[ return "calc( (" +
                      variables.lcars_outer.card.border.left.size + " + " +
                      variables.lcars.border.gap + ")  ) "; ]]]
            custom_fields:
              lcars_outer:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-header
                  variables:
                    card:
                      width: '[[[ return variables.card.width; ]]]'
                      height: '[[[ return variables.card.height; ]]]'
                      border:
                        top:
                          left_radius: '[[[ return variables.card.border.top.left_radius ]]]'
                          size: >-
                            [[[ return
                            variables.lcars_outer.card.border.top.size ]]]
                        left:
                          size: >-
                            [[[ return
                            variables.lcars_outer.card.border.left.size ]]]
                          right_radius: 0px
                        inner:
                          factor: '[[[ return variables.card.border.inner.factor; ]]]'
                          width: '[[[ return variables.card.border.inner.width ]]]'
                        color: '[[[ return variables.lcars_outer.card.color ]]]'
              lcars_inner:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-header
                  label: '[[[ return variables.card_label; ]]]'
                  variables:
                    card:
                      width: '[[[ return variables.card.width ]]]'
                      height: '[[[ return variables.card.height ]]]'
                      border:
                        color: '[[[ return variables.lcars_inner.card.color ]]]'
                        left:
                          size: >-
                            [[[ return
                            variables.lcars_inner.card.border.left.size ]]]
                        top:
                          size: >-
                            [[[ return
                            variables.lcars_inner.card.border.top.size ]]]
                          left_radius: >-
                            [[[ return
                            variables.lcars_inner.card.border.top.left_radius
                            ]]]
                          right_radius: 0px
                        inner:
                          factor: '[[[ return variables.card.border.inner.factor ]]]'
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-card-base
            variables:
              card:
                height: 100px
                width: 400px
                border:
                  top:
                    left_radius: 0px !important
                    right_radius: var(--ha-card-border-radius)
                  bottom:
                    left_radius: 0px !important
                    right_radius: 0px !important
                  inner:
                    factor: 1
                    width: 35px
              card_label: ' '
              lcars:
                border:
                  gap: 4px
                  factor: 4
                  top:
                    size: 20px
                  left:
                    size: 0
                  bottom:
                    size: 0
                  right:
                    size: 180px
              lcars_outer:
                card:
                  color: var(--lcars-card-top-color)
                  border:
                    right:
                      size: >-
                        [[[ return "calc( ((" +
                        variables.lcars.border.right.size + " - " +
                        variables.lcars.border.gap + ") / " +
                        variables.lcars.border.factor + ") * (" +
                        variables.lcars.border.factor + " - 1)" + ")";]]]
                    top:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.top.size +
                        " - " + variables.lcars.border.gap + ") / 2)";]]]
              lcars_inner:
                card:
                  color: var(--lcars-card-top-color)
                  border:
                    right:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.right.size
                        + " - " + variables.lcars.border.gap + " ) / " +
                        variables.lcars.border.factor + ")" ;]]]
                    top:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.top.size +
                        " - " + variables.lcars.border.gap + ") / 2)";]]]
                      right_radius: >-
                        [[[ return "calc((" +
                        variables.card.border.top.right_radius + " ) / " +
                        variables.card.border.inner.factor +" )";]]]
                    inner:
                      factor: 2
            styles:
              card:
                - background-color: transparent
                - height: '[[[ return variables.card.height; ]]]'
                - width: '[[[ return variables.card.width; ]]]'
                - border-top-left-radius: '[[[ return variables.card.border.top.left_radius ]]]'
                - border-top-right-radius: '[[[ return variables.card.border.top.right_radius ]]]'
                - border-bottom-left-radius: '[[[ return variables.card.border.bottom.left_radius ]]]'
                - border-bottom-right-radius: '[[[ return variables.card.border.bottom.right_radius ]]]'
              custom_fields:
                lcars_outer:
                  - position: absolute
                  - top: 0
                  - right: 0
                lcars_inner:
                  - position: absolute
                  - top: >-
                      [[[ return "calc( (" +
                      variables.lcars_outer.card.border.top.size + " + " +
                      variables.lcars.border.gap + ")  ) "; ]]]
                  - right: >-
                      [[[ return "calc( (" +
                      variables.lcars_outer.card.border.right.size + " + " +
                      variables.lcars.border.gap + ")  ) "; ]]]
            custom_fields:
              lcars_outer:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-header-right
                  variables:
                    card:
                      width: '[[[ return variables.card.width; ]]]'
                      height: '[[[ return variables.card.height; ]]]'
                      border:
                        top:
                          right_radius: >-
                            [[[ return variables.card.border.top.right_radius
                            ]]]
                          left_radius: 0
                          size: >-
                            [[[ return
                            variables.lcars_outer.card.border.top.size ]]]
                        left:
                          size: 0px
                        right:
                          size: >-
                            [[[ return
                            variables.lcars_outer.card.border.right.size ]]]
                        inner:
                          factor: '[[[ return variables.card.border.inner.factor; ]]]'
                          width: '[[[ return variables.card.border.inner.width ]]]'
                        color: '[[[ return variables.lcars_outer.card.color ]]]'
              lcars_inner:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-header-right
                  label: '[[[ return variables.card_label; ]]]'
                  variables:
                    card:
                      width: '[[[ return variables.card.width ]]]'
                      height: '[[[ return variables.card.height ]]]'
                      border:
                        color: '[[[ return variables.lcars_inner.card.color ]]]'
                        right:
                          size: >-
                            [[[ return
                            variables.lcars_inner.card.border.right.size ]]]
                        top:
                          size: >-
                            [[[ return
                            variables.lcars_inner.card.border.top.size ]]]
                          right_radius: >-
                            [[[ return
                            variables.lcars_inner.card.border.top.right_radius
                            ]]]
                          left_radius: 0px
                        inner:
                          factor: >-
                            [[[ return
                            variables.lcars_inner.card.border.inner.factor ]]]
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
              - cb-lcars-actions-toggle
            variables:
              card:
                width: 40px
                height: 40px
                min_height: 40px
                border:
                  top:
                    left_radius: 10px
                    right_radius: 10px
                  bottom:
                    left_radius: 10px
                    right_radius: 10px
              icon:
                border:
                  left: 0px
                  right: 0px
                align-items: center
                justify: center
            styles:
              grid:
                - grid-template-areas: '"i"'
            size: 30px
            show_icon: true
            show_label: false
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-card-base
            variables:
              card:
                height: 100px
                width: 400px
                border:
                  top:
                    left_radius: 0px !important
                    right_radius: 0px !important
                  bottom:
                    left_radius: var(--ha-card-border-radius)
                    right_radius: 0px !important
                  inner:
                    factor: 1
                    width: 35px
              card_label: ' '
              lcars:
                border:
                  gap: 4px
                  factor: 4
                  top:
                    size: 0
                  left:
                    size: 180px
                  bottom:
                    size: 20px
                  right:
                    size: 0
              lcars_outer:
                card:
                  color: var(--lcars-card-top-color)
                  border:
                    left:
                      size: >-
                        [[[ return "calc( ((" + variables.lcars.border.left.size
                        + " - " + variables.lcars.border.gap + ") / " +
                        variables.lcars.border.factor + ") * (" +
                        variables.lcars.border.factor + " - 1)" + ")";]]]
                    bottom:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.bottom.size
                        + " - " + variables.lcars.border.gap + ") / 2)";]]]
              lcars_inner:
                card:
                  color: var(--lcars-card-top-color)
                  border:
                    left:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.left.size +
                        " - " + variables.lcars.border.gap + " ) / " +
                        variables.lcars.border.factor + ")" ;]]]
                    bottom:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.bottom.size
                        + " - " + variables.lcars.border.gap + ") / 2)";]]]
                      left_radius: >-
                        [[[ return "calc((" +
                        variables.card.border.bottom.left_radius + " ) / " +
                        variables.card.border.inner.factor +" )";]]]
                    inner:
                      factor: 2
            styles:
              card:
                - background-color: transparent
                - height: '[[[ return variables.card.height; ]]]'
                - width: '[[[ return variables.card.width; ]]]'
                - border-top-left-radius: '[[[ return variables.card.border.top.left_radius ]]]'
                - border-top-right-radius: '[[[ return variables.card.border.top.right_radius ]]]'
                - border-bottom-left-radius: '[[[ return variables.card.border.bottom.left_radius ]]]'
                - border-bottom-right-radius: '[[[ return variables.card.border.bottom.right_radius ]]]'
              custom_fields:
                lcars_outer:
                  - position: absolute
                  - bottom: 0
                  - left: 0
                lcars_inner:
                  - position: absolute
                  - bottom: >-
                      [[[ return "calc( (" +
                      variables.lcars_outer.card.border.bottom.size + " + " +
                      variables.lcars.border.gap + ")  ) "; ]]]
                  - left: >-
                      [[[ return "calc( (" +
                      variables.lcars_outer.card.border.left.size + " + " +
                      variables.lcars.border.gap + ")  ) "; ]]]
            custom_fields:
              lcars_outer:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer
                  variables:
                    card:
                      width: '[[[ return variables.card.width; ]]]'
                      height: '[[[ return variables.card.height; ]]]'
                      border:
                        bottom:
                          left_radius: >-
                            [[[ return variables.card.border.bottom.left_radius
                            ]]]
                          size: >-
                            [[[ return
                            variables.lcars_outer.card.border.bottom.size ]]]
                        left:
                          size: >-
                            [[[ return
                            variables.lcars_outer.card.border.left.size ]]]
                          right_radius: 0px
                        inner:
                          factor: '[[[ return variables.card.border.inner.factor; ]]]'
                          width: '[[[ return variables.card.border.inner.width ]]]'
                        color: '[[[ return variables.lcars_outer.card.color ]]]'
              lcars_inner:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer
                  label: '[[[ return variables.card_label; ]]]'
                  variables:
                    card:
                      width: '[[[ return variables.card.width ]]]'
                      height: '[[[ return variables.card.height ]]]'
                      border:
                        color: '[[[ return variables.lcars_inner.card.color ]]]'
                        left:
                          size: >-
                            [[[ return
                            variables.lcars_inner.card.border.left.size ]]]
                        bottom:
                          size: >-
                            [[[ return
                            variables.lcars_inner.card.border.bottom.size ]]]
                          left_radius: >-
                            [[[ return
                            variables.lcars_inner.card.border.bottom.left_radius
                            ]]]
                          right_radius: 0px
                        inner:
                          factor: >-
                            [[[ return
                            variables.lcars_inner.card.border.inner.factor ]]]
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-card-base
            variables:
              card:
                height: 100px
                width: 400px
                border:
                  top:
                    left_radius: 0px !important
                    right_radius: 0px !important
                  bottom:
                    left_radius: 0px !important
                    right_radius: var(--ha-card-border-radius)
                  inner:
                    factor: 1
                    width: 35px
              card_label: ' '
              lcars:
                border:
                  gap: 4px
                  factor: 4
                  top:
                    size: 0
                  left:
                    size: 0
                  bottom:
                    size: 20px
                  right:
                    size: 180px
              lcars_outer:
                card:
                  color: var(--lcars-card-bottom-color)
                  border:
                    right:
                      size: >-
                        [[[ return "calc( ((" +
                        variables.lcars.border.right.size + " - " +
                        variables.lcars.border.gap + ") / " +
                        variables.lcars.border.factor + ") * (" +
                        variables.lcars.border.factor + " - 1)" + ")";]]]
                    bottom:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.bottom.size
                        + " - " + variables.lcars.border.gap + ") / 2)";]]]
              lcars_inner:
                card:
                  color: var(--lcars-card-bottom-color)
                  border:
                    right:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.right.size
                        + " - " + variables.lcars.border.gap + " ) / " +
                        variables.lcars.border.factor + ")" ;]]]
                    bottom:
                      size: >-
                        [[[ return "calc((" + variables.lcars.border.bottom.size
                        + " - " + variables.lcars.border.gap + ") / 2)";]]]
                      right_radius: >-
                        [[[ return "calc((" +
                        variables.card.border.bottom.right_radius + " ) / " +
                        variables.card.border.inner.factor +" )";]]]
                    inner:
                      factor: 2
            styles:
              card:
                - background-color: transparent
                - height: '[[[ return variables.card.height; ]]]'
                - width: '[[[ return variables.card.width; ]]]'
                - border-top-left-radius: '[[[ return variables.card.border.top.left_radius ]]]'
                - border-top-right-radius: '[[[ return variables.card.border.top.right_radius ]]]'
                - border-bottom-left-radius: '[[[ return variables.card.border.bottom.left_radius ]]]'
                - border-bottom-right-radius: '[[[ return variables.card.border.bottom.right_radius ]]]'
              custom_fields:
                lcars_outer:
                  - position: absolute
                  - bottom: 0
                  - right: 0
                lcars_inner:
                  - position: absolute
                  - bottom: >-
                      [[[ return "calc( (" +
                      variables.lcars_outer.card.border.bottom.size + " + " +
                      variables.lcars.border.gap + ")  ) "; ]]]
                  - right: >-
                      [[[ return "calc( (" +
                      variables.lcars_outer.card.border.right.size + " + " +
                      variables.lcars.border.gap + ")  ) "; ]]]
            custom_fields:
              lcars_outer:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-right
                  variables:
                    card:
                      width: '[[[ return variables.card.width; ]]]'
                      height: '[[[ return variables.card.height; ]]]'
                      border:
                        bottom:
                          right_radius: >-
                            [[[ return variables.card.border.bottom.right_radius
                            ]]]
                          size: >-
                            [[[ return
                            variables.lcars_outer.card.border.bottom.size ]]]
                        right:
                          size: >-
                            [[[ return
                            variables.lcars_outer.card.border.right.size ]]]
                          left_radius: 0px
                        inner:
                          factor: '[[[ return variables.card.border.inner.factor; ]]]'
                          width: '[[[ return variables.card.border.inner.width ]]]'
                        color: '[[[ return variables.lcars_outer.card.color ]]]'
              lcars_inner:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-right
                  label: '[[[ return variables.card_label; ]]]'
                  variables:
                    card:
                      width: '[[[ return variables.card.width ]]]'
                      height: '[[[ return variables.card.height ]]]'
                      border:
                        color: '[[[ return variables.lcars_inner.card.color ]]]'
                        right:
                          size: >-
                            [[[ return
                            variables.lcars_inner.card.border.right.size ]]]
                        bottom:
                          size: >-
                            [[[ return
                            variables.lcars_inner.card.border.bottom.size ]]]
                          right_radius: >-
                            [[[ return
                            variables.lcars_inner.card.border.bottom.right_radius
                            ]]]
                          left_radius: 0px
                        inner:
                          factor: >-
                            [[[ return
                            variables.lcars_inner.card.border.inner.factor ]]]
      - type: grid
        cards: []
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-card-base
              - cb-lcars-functions
            variables:
              card:
                width: null
                height: null
              grid:
                buttons: []
                X: 3
                'Y': 2
                template_columns: null
                auto_rows: null
                gap: 5px
              button:
                type: custom:button-card
                variables:
                  card:
                    width: 180px
                    height: 45px
                    min_height: 10px
                    color:
                      active: var(--lcars-ui-secondary)
                      inactive: var(--lcars-ui-primary)
                      background:
                        active: var(--picard-cyan)
                        inactive: var(--lcars-ui-primary)
                      default: null
                  icon:
                    border:
                      right:
                        padding: 2%
                    color:
                      active: null
                      inactive: null
                    background:
                      active: null
                      inactive: null
                template:
                  - cb-lcars-button-picard-filled
                  - cb-lcars-button-picard-label-se
                  - cb-lcars-button-picard-name-nw
                  - cb-lcars-button-picard-state-sw
                  - cb-lcars-actions-disable
                size: 22px
                show_name: false
                show_state: false
                show_label: true
                show_icon: false
              y_grid_X: |
                [[[
                  let card_width = variables.card.width ? parseInt(variables.card.width) : 0;
                  let button_card_width = variables.button.variables.card.width ? parseInt(variables.button.variables.card.width) : 0;
                  let grid_gap = variables.grid.gap ? parseInt(variables.grid.gap) : 0;

                  // If card_width is not defined or is 0, return grid.X (default or user overrides this)
                  if (card_width === 0) {
                    return variables.grid.X;
                  }
                  // Calculate the number of grid cells that would fit
                  let grid_X = Math.floor((card_width + grid_gap) / (button_card_width + grid_gap));
                  return grid_X;
                ]]]
              y_grid_Y: |
                [[[
                  let card_height = variables.card.height ? parseInt(variables.card.height) : 0;
                  let button_card_height = variables.button.variables.card.height ? parseInt(variables.button.variables.card.height) : 0;
                  let grid_gap = variables.grid.gap ? parseInt(variables.grid.gap) : 0;

                  // If card_height is not defined or is 0, return grid.Y (default or user overrides this)
                  if (card_height === 0) {
                    return variables.grid.Y;
                  }
                  // Calculate the number of grid cells that would fit
                  let grid_Y = Math.floor((card_height + grid_gap) / (button_card_height + grid_gap));
                  return grid_Y;
                ]]]
              y_total_cards: '[[[ return variables.y_grid_X * variables.y_grid_Y; ]]]'
              z_card_width: >
                [[[ return variables.card.width || "calc( ((" +
                variables.button.variables.card.width + " + " +
                variables.grid.gap + " ) *" + variables.y_grid_X + ") - " +
                variables.grid.gap + ")";

                ]]]
              z_card_height: >
                [[[ return variables.card.height || "calc( ((" +
                variables.button.variables.card.height + " + " +
                variables.grid.gap + " ) *" + variables.y_grid_Y + ") - " +
                variables.grid.gap + ")";

                ]]]
            styles:
              card:
                - height: '[[[ return variables.z_card_height ]]]'
                - width: '[[[ return variables.z_card_width ]]]'
                - border-radius: 0 !important
              custom_fields:
                button_grid:
                  - position: absolute
                  - top: 0px
                  - left: 0px
            custom_fields:
              button_grid:
                card:
                  type: custom:layout-card
                  layout_type: custom:grid-layout
                  layout:
                    grid-template-columns: >-
                      [[[ return variables.grid.template_columns || "repeat(" +
                      variables.y_grid_X + ", " +
                      variables.button.variables.card.width + ")"; ]]]
                    grid-auto-rows: >-
                      [[[ return variables.grid.auto_rows ||
                      variables.button.variables.card.height; ]]]
                    grid-gap: '[[[ return variables.grid.gap; ]]]'
                    card_margin: 0
                    padding: 0
                    margin: '-4px -4px 0px -4px'
                  cards: |
                    [[[
                      let resultArray = [];

                      for (let x = 1; x <= variables.y_total_cards; x++) {
                        let cardObject = variables.grid.buttons && variables.grid.buttons[x-1] ? variables.grid.buttons[x-1] : {};

                        let defaultVariables = variables.button;
                        //cardObject.variables = {...defaultVariables, ...cardObject.variables};
                        cardObject = variables.__deepMerge(defaultVariables, cardObject);
                        
                        let additionalObject = {
                          view_layout: {
                            show: '[[[ return variables.y_total_cards >= x ? "always" : "never"; ]]]'
                          },
                          show_label: variables.button.show_label,
                          label: variables.button.label || (((Math.floor(Math.random() * 256).toString(16).padStart(2, '0')) + "-" + (Math.floor(Math.random() * 4096).toString(16).padStart(3, '0')))),
                        };
                        //resultArray.push({...additionalObject, ...cardObject});
                        resultArray.push(variables.__deepMerge({...additionalObject}, cardObject));
                      }
                      return resultArray;
                    ]]]
          - type: custom:button-card
            template: cb-lcars-button-grid
            variables:
              grid:
                buttons:
                  - entity: person.dexter
                    show_name: true
                    template:
                      - cb-lcars-button-picard-filled
                      - cb-lcars-button-picard-label-se
                      - cb-lcars-button-picard-name-west
                      - cb-lcars-button-picard-state-sw
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-color
                    variables:
                      card:
                        color:
                          background:
                            active: blue
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-icon
                    show_icon: true
                    variables:
                      card:
                        color:
                          background:
                            active: yellow
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-icon-color
                    show_icon: true
                    variables:
                      card:
                        color:
                          background:
                            active: green
                      icon:
                        color:
                          background:
                            active: white
                          active: red
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-icon
                    show_icon: true
                    variables:
                      card:
                        color:
                          background:
                            active: yellow
                  - entity: input_boolean.enable_verbal_notifications
                    label: TTS-lozenge
                    show_icon: false
                    variables:
                      card:
                        color:
                          background:
                            active: cyan
                    template:
                      - cb-lcars-button-lozenge
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              grid:
                X: 5
                'Y': 1
              button:
                variables:
                  card:
                    width: 40px
                    height: 40px
                template:
                  - cb-lcars-button-picard-icon
                show_icon: true
                show_label: false
        title: grid
      - type: grid
        cards: []
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-card-base
              - cb-lcars-functions
            variables:
              card:
                width: null
                height: null
              grid:
                buttons: []
                X: 3
                'Y': 2
                template_columns: null
                auto_rows: null
                gap: 5px
              button:
                type: custom:button-card
                variables:
                  card:
                    width: 180px
                    height: 45px
                    min_height: 10px
                    color:
                      active: var(--lcars-ui-secondary)
                      inactive: var(--lcars-ui-primary)
                      background:
                        active: var(--picard-cyan)
                        inactive: var(--lcars-ui-primary)
                      default: null
                  icon:
                    border:
                      right:
                        padding: 2%
                    color:
                      active: null
                      inactive: null
                    background:
                      active: null
                      inactive: null
                template:
                  - cb-lcars-button-picard-filled
                  - cb-lcars-button-picard-label-se
                  - cb-lcars-button-picard-name-nw
                  - cb-lcars-button-picard-state-sw
                  - cb-lcars-actions-disable
                size: 22px
                show_name: false
                show_state: false
                show_label: true
                show_icon: false
              y_grid_X: >-
                [[[ return
                variables.__calculate_grid_cells(variables.card.width,
                variables.button.variables.card.width, variables.grid.gap,
                variables.grid.X) ]]]
              y_grid_Y: >-
                [[[ return
                variables.__calculate_grid_cells(variables.card.height,
                variables.button.variables.card.height, variables.grid.gap,
                variables.grid.Y) ]]]
              y_total_cards: '[[[ return variables.y_grid_X * variables.y_grid_Y; ]]]'
              z_card_width: >
                [[[ return variables.card.width || "calc( ((" +
                variables.button.variables.card.width + " + " +
                variables.grid.gap + " ) *" + variables.y_grid_X + ") - " +
                variables.grid.gap + ")";

                ]]]
              z_card_height: >
                [[[ return variables.card.height || "calc( ((" +
                variables.button.variables.card.height + " + " +
                variables.grid.gap + " ) *" + variables.y_grid_Y + ") - " +
                variables.grid.gap + ")";

                ]]]
            styles:
              card:
                - height: '[[[ return variables.z_card_height ]]]'
                - width: '[[[ return variables.z_card_width ]]]'
                - border-radius: 0 !important
              custom_fields:
                button_grid:
                  - position: absolute
                  - top: 0px
                  - left: 0px
            custom_fields:
              button_grid:
                card:
                  type: custom:layout-card
                  layout_type: custom:grid-layout
                  layout:
                    grid-template-columns: >-
                      [[[ return variables.grid.template_columns || "repeat(" +
                      variables.y_grid_X + ", " +
                      variables.button.variables.card.width + ")"; ]]]
                    grid-auto-rows: >-
                      [[[ return variables.grid.auto_rows ||
                      variables.button.variables.card.height; ]]]
                    grid-gap: '[[[ return variables.grid.gap; ]]]'
                    card_margin: 0
                    padding: 0
                    margin: '-4px -4px 0px -4px'
                  cards: |
                    [[[
                      let resultArray = [];

                      for (let x = 1; x <= variables.y_total_cards; x++) {
                        let cardObject = variables.grid.buttons && variables.grid.buttons[x-1] ? variables.grid.buttons[x-1] : {};

                        let defaultVariables = variables.button;
                        //cardObject.variables = {...defaultVariables, ...cardObject.variables};
                        cardObject = variables.__deepMerge(defaultVariables, cardObject);
                        
                        let additionalObject = {
                          view_layout: {
                            show: '[[[ return variables.y_total_cards >= x ? "always" : "never"; ]]]'
                          },
                          show_label: variables.button.show_label,
                          label: variables.button.label || (((Math.floor(Math.random() * 256).toString(16).padStart(2, '0')) + "-" + (Math.floor(Math.random() * 4096).toString(16).padStart(3, '0')))),
                        };
                        //resultArray.push({...additionalObject, ...cardObject});
                        resultArray.push(variables.__deepMerge({...additionalObject}, cardObject));
                      }
                      return resultArray;
                    ]]]
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-card-base
              - cb-lcars-button-grid
            variables:
              card:
                height: null
                width: null
              button:
                variables:
                  card:
                    height: 20px
                    min_height: 20px
                    width: 100px
                show_label: false
                template:
                  - cb-lcars-button-lozenge
              gradient_start_color: var(--error-color)
              gradient_start_rgb: |
                [[[ 
                  return variables.__hex_to_rgba(variables.gradient_start_color)
                 ]]]
              gradient_end_color: var(--lcars-blue)
              gradient_end_rgb: |
                [[[ 
                  return variables.__hex_to_rgba(variables.gradient_end_color) 
                ]]]
              _gradient:
                X: 1
                'Y': 10
                gap: 5px
              gradient_X: >-
                [[[ return
                variables.__calculate_grid_cells(variables.card.width,
                variables.button.variables.card.width, variables._gradient.gap,
                variables._gradient.X) ]]]
              gradient_Y: >-
                [[[ return
                variables.__calculate_grid_cells(variables.card.height,
                variables.button.variables.card.height, variables._gradient.gap,
                variables._gradient.Y) ]]]
              grid:
                X: '[[[ return variables.gradient_X ]]]'
                'Y': '[[[ return variables.gradient_Y ]]]'
                gap: '[[[ return variables._gradient.gap ]]]'
                buttons: |
                  [[[ 
                    let buttons = [];
                    let total_steps = (variables.gradient_X > variables.gradient_Y) ? variables.gradient_X : variables.gradient_Y;
                    //console.debug("grid_X: " + variables.grid_X);
                    //console.debug("total_steps: " + total_steps);
                    for(let i = 0; i < total_steps ; i++) {
                      buttons.push({
                        variables: {
                          card: {
                            color: {
                              background: {
                                inactive: variables.__interpolated_rgb(variables.gradient_start_rgb,variables.gradient_end_rgb, i, total_steps)
                              },
                            },
                          },
                        },
                      });
                    }
                    
                    return buttons;
                  ]]]
        title: meter - fix autogrid variable bs
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-meter
            variables:
              button:
                variables:
                  card_width: 10px
                template:
                  - cb-lcars-button-picard-filled
              grid_AUTO_GAP: 5px
              grid_Y: 1
              grid_X: |
                [[[
                  let card_width = variables.card_width ? parseInt(variables.card_width) : 0;
                  let button_card_width = variables.button.variables.card_width ? parseInt(variables.button.variables.card_width) : 0;
                  let grid_gap = variables.grid_AUTO_GAP ? parseInt(variables.grid_AUTO_GAP) : 0;

                  // If card_width is not defined or is 0, return 25
                  if (card_width === 0) {
                    return 25;
                  }

                  // Calculate the number of grid cells that would fit
                  let grid_X = Math.floor((card_width + grid_gap) / (button_card_width + grid_gap));
                  return grid_X;
                ]]]
              grid_gap: '[[[ return variables.grid_AUTO_GAP ]]]'
          - type: custom:button-card
            template:
              - cb-lcars-meter
            variables:
              button:
                variables:
                  card:
                    width: 10px
                    height: 20px
                template:
                  - cb-lcars-button-picard-filled
              _gradient:
                gap: 5px
                'Y': 1
                X: 25
        title: horizontal.. or should be
      - type: grid
        cards: []
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-card-base
              - cb-lcars-functions
            entity: light.tv
            triggers_update: '[[[ return variables.entity ]]]'
            variables:
              card:
                width: 80px
                height: 300px
              entity: '[[[ return entity.entity_id ]]]'
              entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
              entity_match_slider_start: false
              entity_match_slider_end: false
              meter:
                template:
                  - cb-lcars-meter
                variables:
                  gradient_start_color: >
                    [[[ return  variables.entity_match_slider_start ?
                    variables.entity_color :

                    "var(--error-color)" ]]]
                  gradient_end_color: >
                    [[[ return  variables.entity_match_slider_end ?
                    variables.entity_color :

                    "var(--success-color)" ]]]
                  card:
                    height: '[[[ return variables.card.height ]]]'
                    width: '[[[ return variables.card.width ]]]'
                  button:
                    variables:
                      card:
                        height: 15px
                        width: '[[[ return variables.card.width ]]]'
              slider:
                variables:
                  mask_color: rgb(0,0,0,0.8)
                  step: 1
            styles:
              card:
                - width: '[[[ return variables.card.width ]]]'
                - height: '[[[ return variables.card.height ]]]'
                - border-radius: 0 !important
                - background: none
              custom_fields:
                meter:
                  - position: absolute
                  - left: 0px
                  - top: 0px
                slider:
                  - position: absolute
                  - left: 0px
                  - top: 0px
                  - z-index: 1
                  - width: '[[[ return variables.card.width ]]]'
                  - height: '[[[ return variables.card.height ]]]'
            custom_fields:
              meter:
                card:
                  type: custom:button-card
                  template: '[[[ return variables.meter.template ]]]'
                  variables: '[[[ return variables.meter.variables ]]]'
              slider:
                card:
                  type: custom:my-slider-v2
                  entity: '[[[ return variables.entity ]]]'
                  mode: brightness
                  flipped: true
                  inverse: true
                  vertical: true
                  step: '[[[ return variables.slider.variables.step; ]]]'
                  styles:
                    card:
                      - width: '[[[ return variables.card.width ]]]'
                      - height: '[[[ return variables.card.height ]]]'
                      - background: none
                      - border-radius: 0
                    progress:
                      - background-color: '[[[ return variables.slider.variables.mask_color; ]]]'
                    container:
                      - border-radius: 0
                    track:
                      - background: none
                    thumb:
                      - background: none
          - type: custom:button-card
            template: cb-lcars-slider
            entity: light.tv
            variables:
              meter:
                variables:
                  gradient_start_color: var(--lcars-blue)
          - type: custom:button-card
            template: cb-lcars-slider
            entity: light.tv
            variables:
              entity_match_slider_start: true
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-slider
            entity: light.desk
            variables:
              meter:
                template: cb-lcars-meter-horizontal
                variables:
                  _gradient:
                    gap: 5px
                  button:
                    template: cb-lcars-button-picard-filled
                    variables:
                      card:
                        height: '[[[ return variables.card.height ]]]'
                        width: 10px
              card:
                width: 375px
                height: 45px
            triggers_update: '[[[ return variables.entity  ]]]'
            custom_fields:
              slider:
                card:
                  vertical: false
          - type: custom:button-card
            template: cb-lcars-slider-horizontal
            entity: light.tv
            variables:
              meter:
                variables:
                  gradient_start_color: var(--lcars-blue)
          - type: custom:button-card
            template: cb-lcars-slider-horizontal
            entity: light.tv
            variables:
              entity_match_slider_start: true
      - type: grid
        cards: []
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-card-base
              - cb-lcars-functions
            entity: light.tv
            triggers_update: '[[[ return variables.entity ]]]'
            variables:
              card:
                width: 80px
                height: 400px
              entity: '[[[ return entity.entity_id ]]]'
              entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
              entity_match_slider: false
              meter:
                template:
                  - cb-lcars-button-grid
                variables:
                  card:
                    height: '[[[ return variables.card.height ]]]'
                  grid:
                    X: 1
                    'Y': 10
                    gap: 0px
                    buttons:
                      - label: '100'
                      - label: '90'
                      - label: '80'
                      - label: '70'
                      - label: '60'
                      - label: '50'
                      - label: '40'
                      - label: '30'
                      - label: '20'
                      - label: '10'
                  button:
                    show_label: true
                    template:
                      - cb-lcars-button-picard
                      - cb-lcars-button-picard-label-ne
                    variables:
                      card:
                        height: |
                          [[[
                              return variables.__calculcate_grid_cell_dimension(variables.card.height, 10, 0, "20px")
                          ]]]
                        width: '[[[ return variables.card.width ]]]'
                        border:
                          right:
                            size: 0
                          left:
                            size: 0
                          top:
                            size: 2px
                          bottom:
                            size: 0
                        color:
                          background:
                            inactive: transparent
                            default: transparent
                      text:
                        label:
                          font_size: 14px
                          padding:
                            right: 0px
                            top: 2px
                          color:
                            'off': var(--lcars-ui-primary)
              slider:
                variables:
                  color: >
                    [[[ return  variables.entity_match_slider ?
                    variables.entity_color :

                    "var(--picard-cyan)" ]]]
                  color_alpha: 0.95
                  border_color: >
                    [[[ return  variables.entity_match_slider ?
                    variables.entity_color :

                    "var(--picard-blue)" ]]]  
                  border_alpha: 0.5
                  border_width: 2px
                  height: '[[[ return variables.card.height ]]]'
                  width: 15px
                  left_padding: 5px
                  step: 1
            styles:
              card:
                - width: '[[[ return variables.card.width ]]]'
                - height: '[[[ return variables.card.height ]]]'
                - border-radius: 0 !important
                - background: none
              custom_fields:
                meter:
                  - position: absolute
                  - left: 0px
                  - top: 0px
                slider:
                  - position: absolute
                  - left: 0px
                  - top: 0px
                  - z-index: 1
                  - width: '[[[ return variables.card.width ]]]'
                  - height: '[[[ return variables.card.height ]]]'
            custom_fields:
              meter:
                card:
                  type: custom:button-card
                  template: '[[[ return variables.meter.template ]]]'
                  variables: '[[[ return variables.meter.variables ]]]'
              slider:
                card:
                  type: custom:my-slider-v2
                  entity: '[[[ return variables.entity ]]]'
                  mode: brightness
                  flipped: false
                  inverse: false
                  vertical: true
                  step: '[[[ return variables.slider.variables.step; ]]]'
                  styles:
                    card:
                      - width: '[[[ return variables.card.width ]]]'
                      - height: '[[[ return variables.card.height ]]]'
                      - background: none
                      - border-radius: 0
                    progress:
                      - background-color: >-
                          [[[ return
                          variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                          ]]]
                      - border: >-
                          [[[ return variables.slider.variables.border_width + "
                          solid " +
                          variables.__hex_to_rgba(variables.slider.variables.border_color,
                          variables.slider.variables.border_alpha)  ]]]
                      - width: '[[[ return variables.slider.variables.width ]]]'
                      - height: '[[[ return variables.slider.variables.height ]]]'
                      - left: '[[[ return variables.slider.variables.left_padding ]]]'
                    container:
                      - border-radius: 0
                    track:
                      - background: none
                    thumb:
                      - background: none
          - type: custom:button-card
            entity: light.tv
            template: cb-lcars-slider-gauge
            variables:
              entity_match_slider: true
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-card-base
            entity: light.tv
            triggers_update: '[[[ return variables.entity ]]]'
            variables:
              card:
                width: 500px
                height: 60px
              panel:
                width: 380px
                height: 50px
                padding:
                  top: 5px
                  left: 5px
                  right: 0px
                  bottom: 0px
                mode: gauge
              entity: '[[[ return entity.entity_id ]]]'
              entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
              entity_match_gauge: false
              entity_match_slider: '[[[ return variables.entity_match_gauge ]]]'
              entity_match_header: false
              entity_match_slider_start: false
              entity_match_slider_end: false
              slider:
                entity: '[[[ return variables.entity ]]]'
                entity_match_slider_start: '[[[ return variables.entity_match_slider_start ]]]'
                entity_match_slider_end: '[[[ return variables.entity_match_slider_end ]]]'
              gauge:
                entity: '[[[ return variables.entity ]]]'
                entity_match_slider: '[[[ return variables.entity_match_slider ]]]'
              label: test
              header_button:
                variables:
                  text:
                    label:
                      font_size: 24px
                    state:
                      font_size: 24px
                    name:
                      font_size: 24px
                  card:
                    color:
                      active: >
                        [[[ return  variables.entity_match_header ?
                        variables.entity_color :

                        "var(--lcars-ui-secondary)" ]]]
                      inactive: var(--lcars-ui-primary)
                      background:
                        active: >
                          [[[ return  variables.entity_match_header ?
                          variables.entity_color :

                          "var(--lcars-ui-secondary)" ]]]
                        inactive: var(--lcars-ui-primary)
                      border: null
                  icon:
                    color:
                      active: null
                      inactive: null
                      background:
                        active: null
                        inactive: null
              y_panel_width_padded: >-
                [[[ return  (parseInt(variables.panel.width) -
                parseInt(variables.panel.padding.left) -
                parseInt(variables.panel.padding.right))+"px" ]]]
              y_panel_height_padded: >-
                [[[ return  (parseInt(variables.panel.height) -
                parseInt(variables.panel.padding.top) -
                parseInt(variables.panel.padding.bottom))+"px" ]]]
              y_trim_height: >-
                [[[ return "calc(" + variables.card.height + " - " +
                variables.panel.height + ")" ]]]
              y_trim_width: '[[[ return variables.panel.width ]]]'
              y_header_height: '[[[ return variables.card.height ]]]'
              y_header_width: >-
                [[[ return "calc(" + variables.card.width + " - " +
                variables.panel.width + ")" ]]]
              z_button_card:
                type: custom:button-card
                template:
                  - cb-lcars-button-grid
                variables:
                  card:
                    width: '[[[ return variables.card.width ]]]'
                    height: '[[[ return variables.card.height ]]]'
                  button: '[[[ return variables.header_button ]]]'
                  grid:
                    X: 2
                    'Y': 1
                    buttons:
                      - variables:
                          card:
                            width: '[[[ return variables.y_header_width ]]]'
                            height: '[[[ return variables.y_header_height ]]]'
                          text:
                            label:
                              font_size: >-
                                [[[ return
                                variables.header_button.variables.text.label.font_size
                                ]]]
                            state:
                              font_size: >-
                                [[[ return
                                variables.header_button.variables.text.state.font_size
                                ]]]
                            name:
                              font_size: >-
                                [[[ return
                                variables.header_button.variables.text.name.font_size
                                ]]]
                        show_label: true
                        label: '[[[ return variables.label ]]]'
                        template:
                          - cb-lcars-button-picard-filled
                        entity: '[[[ return variables.entity ]]]'
                      - variables:
                          card:
                            width: '[[[ return variables.y_trim_width ]]]'
                            height: '[[[ return variables.y_trim_height ]]]'
                            min_height: '[[[ return variables.y_trim_height ]]]'
                        show_label: false
                        entity: '[[[ return variables.entity ]]]'
                    template_columns: >-
                      [[[ return  variables.y_header_width + " " +
                      variables.y_trim_width  ]]]
                    gap: 0px
              z_gauge_card:
                type: custom:button-card
                template:
                  - cb-lcars-slider-horizontal-gauge
                variables:
                  card:
                    height: '[[[ return variables.panel.height ]]]'
                    width: '[[[ return variables.panel.width ]]]'
                  entity: '[[[ return variables.gauge.entity || null ]]]'
                  gauge: '[[[ return variables.gauge ]]]'
                  entity_match_slider: '[[[ return variables.gauge.entity_match_slider ]]]'
              z_slider_card:
                type: custom:button-card
                template:
                  - cb-lcars-functions
                  - cb-lcars-slider-horizontal
                variables:
                  card:
                    height: '[[[ return variables.y_panel_height_padded ]]]'
                    width: '[[[ return variables.y_panel_width_padded ]]]'
                  entity: '[[[ return variables.slider.entity || null ]]]'
                  entity_match_slider_start: '[[[ return variables.slider.entity_match_slider_start ]]]'
                  entity_match_slider_end: '[[[ return variables.slider.entity_match_slider_end ]]]'
                  meter: >
                    [[[

                    let meterObject = (variables.slider &&
                    variables.slider.meter) ?

                    variables.slider.meter : {}; 

                    let defaultVariables = {
                      variables: {
                        button: {
                          template: "cb-lcars-button-picard-filled",
                          variables: {
                            card: {
                              height: variables.y_panel_height_padded,
                             },
                           },
                        }
                      }
                    };

                    //meterObject = {...defaultVariables, ...meterObject};

                    meterObject =
                    variables.__deepMerge(defaultVariables,meterObject);


                    return meterObject;

                    ]]]
              z_icon_grid:
                type: custom:button-card
                template:
                  - cb-lcars-button-grid-icons
                variables: >
                  [[[

                  let iconObject = (variables.icon_grid &&
                  variables.icon_grid.variables) ? variables.icon_grid.variables
                  : {};

                  let defaultVariables = {
                    card: {
                      height: variables.y_panel_height_padded,
                      width: variables.y_panel_width_padded,
                      },
                    grid: {
                      gap: "9px",
                    },
                     button: {
                      variables: {
                        card: {
                          width: "45px",
                          height: "45px"
                        }
                      }
                   }
                  };

                  iconObject =
                  variables.__deepMerge(defaultVariables,iconObject);

                  return iconObject;

                  ]]]
            styles:
              card:
                - background: none
                - width: '[[[ return variables.card.width; ]]]'
                - height: '[[[  return variables.card.height; ]]]'
                - border-radius: 0 !important
              custom_fields:
                panel:
                  - position: absolute
                  - right: 0px
                  - bottom: 0px
                button:
                  - position: absolute
                  - left: 0px
                  - top: 0px
            custom_fields:
              button:
                card: '[[[ return variables.z_button_card ]]]'
              panel:
                card: |
                  [[[
                  let panel_card;
                  switch (variables.panel.mode) {
                    case 'icons':
                    case 'icon_grid':
                      panel_card = variables.z_icon_grid;
                      break;
                    case 'slider':
                      panel_card = variables.z_slider_card;
                      break;
                    case 'gauge':
                      panel_card = variables.z_gauge_card;
                      break;
                    default:
                      panel_card = null;
                  }
                  return panel_card;
                  ]]]
          - type: custom:button-card
            entity: light.tv
            template:
              - cb-lcars-functions
              - cb-lcars-slider-horizontal
            triggers_update: '[[[ return variables.entity ]]]'
            variables:
              card:
                width: 500px
                height: 45px
              entity: '[[[ return entity.entity_id ]]]'
              entity_color: '[[[ return variables.__get_light_css_color(variables.entity) ]]]'
              entity_match_slider: false
              slider:
                variables:
                  color: >
                    [[[ return  variables.entity_match_slider ?
                    variables.entity_color :

                    "var(--picard-cyan)" ]]]
                  color_alpha: 0.95
                  border_color: >
                    [[[ return  variables.entity_match_slider ?
                    variables.entity_color :

                    "var(--picard-blue)" ]]]
                  border_alpha: 0.5
                  border_width: 2px
                  height: 10px
                  width: '[[[ return variables.card_width ]]]'
                  top_padding: 10px
                  step: 5
              gauge:
                show_sub_meter: true
                meter:
                  template:
                    - cb-lcars-button-grid
                  variables:
                    card:
                      height: '[[[ return variables.card.height ]]]'
                    grid:
                      X: 10
                      'Y': 1
                      gap: 0px
                      buttons:
                        - label: '10'
                        - label: '20'
                        - label: '30'
                        - label: '40'
                        - label: '50'
                        - label: '60'
                        - label: '70'
                        - label: '80'
                        - label: '90'
                        - label: '100'
                    button:
                      show_label: true
                      template:
                        - cb-lcars-button-picard
                        - cb-lcars-button-picard-label-se
                      variables:
                        card:
                          width: |
                            [[[
                                return variables.__calculcate_grid_cell_dimension(variables.card.width, 10, 0, "5px")
                            ]]]
                          height: '[[[ return variables.card.height ]]]'
                          border:
                            right:
                              size: 2px
                            left:
                              size: 0
                            top:
                              size: 0
                            bottom:
                              size: 0
                          color:
                            background:
                              inactive: transparent
                              default: transparent
                        text:
                          label:
                            font_size: 14px
                            padding:
                              right: 3px
                              top: 2px
                              bottom: 0px
                            color:
                              'off': var(--lcars-ui-primary)
                sub_meter:
                  variables:
                    card:
                      height: 10px
                    grid:
                      X: 50
                      'Y': 1
                      gap: 0px
                    gradient_start_color: none
                    gradient_end_color: none
                    button:
                      template:
                        - cb-lcars-button-picard
                        - cb-lcars-button-picard-label-se
                      variables:
                        card:
                          height: 10px
                          min_height: 10px
                          width: |
                            [[[
                                return variables.__calculcate_grid_cell_dimension(variables.card.width, 50, 0, "20px")
                            ]]]
                          border:
                            right:
                              size: 2px
                            left:
                              size: 0
                            top:
                              size: 2px
                            bottom:
                              size: 0
                          color:
                            background:
                              inactive: transparent
                              default: transparent
                      show_label: false
              meter: '[[[ return variables.gauge.meter ]]]'
            styles:
              custom_fields:
                slider:
                  - position: absolute
                  - top: 0
                  - left: >-
                      [[[ return "calc(" +
                      variables.slider.variables.border_width + " * -1)" ]]]
                sub_meter:
                  - position: absolute
                  - top: 0px
                  - left: 0px
                  - visibility: >-
                      [[[ return variables.gauge.show_sub_meter ? "visible" :
                      "hidden" ]]]
            custom_fields:
              slider:
                card:
                  flipped: false
                  vertical: false
                  inverse: false
                  styles:
                    card:
                      - height: '[[[ return variables.card.height ]]]'
                      - width: '[[[ return variables.card.width ]]]'
                      - background: none
                    progress:
                      - background-color: >-
                          [[[ return
                          variables.__hex_to_rgba(variables.slider.variables.color,variables.slider.variables.color_alpha)
                          ]]]
                      - border: >-
                          [[[ return variables.slider.variables.border_width + "
                          solid " +
                          variables.__hex_to_rgba(variables.slider.variables.border_color,
                          variables.slider.variables.border_alpha)  ]]]
                      - border-radius: 2px
                      - height: '[[[ return variables.slider.variables.height ]]]'
                      - width: '[[[ return variables.slider.variables.width ]]]'
                      - top: '[[[ return variables.slider.variables.top_padding ]]]'
              sub_meter:
                card:
                  type: custom:button-card
                  template: cb-lcars-meter-horizontal
                  variables: '[[[ return variables.gauge.sub_meter.variables ]]]'
          - type: custom:button-card
            entity: light.tv
            template: cb-lcars-slider-horizontal-gauge
            variables:
              entity_match_slider: true
              gauge:
                show_sub_meter: true
  - title: scratch
    path: scratch
    type: sections
    sections:
      - type: grid
        cards:
          - type: custom:layout-card
            layout_type: custom:grid-layout
            cards:
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  text_justify: center
                  font_size: 30px
                  font_weight: bold
                  text_padding_bottom: 5px
                entity: climate.living_room
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['sensor.home_average_temperature_template'].state;
                      const roundedValue = Math.round(parseFloat(state));
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-blue)
                state:
                  - id: state_on
                    value: HOME
                entity: input_select.lcars_ui_page_selector
                label: home
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: HOME
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  text_justify: center
                  font_size: 30px
                  font_weight: bold
                  text_padding_bottom: 5px
                  text_color_zero: var(--picard-dark-blue)
                  text_color_non_zero: var(--picard-blue)
                entity: sensor.lights_on
                show_state: true
                show_label: false
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-blue)
                state:
                  - id: state_on
                    value: LIGHTS
                entity: input_select.lcars_ui_page_selector
                label: lights
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: LIGHTS
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  text_justify: center
                  font_size: 30px
                  font_weight: bold
                  text_padding_bottom: 5px
                entity: climate.living_room
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['climate.living_room'].attributes.temperature;
                      const roundedValue = Math.round(parseFloat(state));

                      // Check if the roundedValue is NaN
                      if (isNaN(roundedValue)) {
                        return 'FF';
                      }
                      
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-blue)
                state:
                  - id: state_on
                    value: ENVIRONMENTAL
                entity: input_select.lcars_ui_page_selector
                label: environmental
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: ENVIRONMENTAL
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  text_justify: center
                  font_size: 30px
                  font_weight: bold
                  text_padding_bottom: 5px
                  text_color_zero: var(--picard-dark-blue)
                  text_color_non_zero: var(--picard-blue)
                entity: sensor.lights_on
                show_state: true
                show_label: false
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                  - cb-lcars-animate-press
                state:
                  - id: state_on
                    value: LIGHTS II
                show_icon: true
                icon: none
                size: 24px
                variables:
                  icon_active_color: transparent
                  icon_inactive_color: transparent
                  icon_active_background_color: var(--picard-blue)
                  icon_inactive_background_color: transparent
                entity: input_select.lcars_ui_page_selector
                label: lights ii
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: LIGHTS II
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  text_justify: center
                  font_size: 30px
                  font_weight: bold
                  text_padding_bottom: 5px
                  text_color_zero: var(--success-color)
                  text_color_non_zero: var(--error-color)
                entity: sensor.contact_sensors_open
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['sensor.contact_sensors_open'].state;
                      const roundedValue = Math.round(parseFloat(state));
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                  - cb-lcars-animate-press
                state:
                  - id: state_on
                    value: SECURITY
                show_icon: true
                icon: none
                size: 24px
                variables:
                  icon_active_color: transparent
                  icon_inactive_color: transparent
                  icon_active_background_color: var(--picard-blue)
                  icon_inactive_background_color: transparent
                entity: input_select.lcars_ui_page_selector
                label: security
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: SECURITY
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                  - cb-lcars-animate-press
                state:
                  - id: state_on
                    value: COMMS
                show_icon: true
                icon: none
                size: 24px
                variables:
                  icon_active_color: transparent
                  icon_inactive_color: transparent
                  icon_active_background_color: var(--picard-blue)
                  icon_inactive_background_color: transparent
                  state:
                    - id: state_on
                      value: COMMS
                entity: input_select.lcars_ui_page_selector
                label: comms
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: COMMS
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  text_justify: center
                  font_size: 30px
                  font_weight: bold
                  text_padding_bottom: 5px
                  text_color_zero: var(--error-color)
                  text_color_non_zero: var(--picard-starlight)
                entity: sensor.cats_home
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['sensor.cats_home'].state;
                      const roundedValue = Math.round(parseFloat(state));
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                  - cb-lcars-animate-press
                state:
                  - id: state_on
                    value: CATS
                entity: input_select.lcars_ui_page_selector
                label: felines
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: CATS
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:gap-card
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--warning-color)
                state:
                  - id: state_on
                    value: ENGINEERING
                entity: input_select.lcars_ui_page_selector
                label: engineering
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: ENGINEERING
                hold_action:
                  action: none
                double_tap_action:
                  action: none
            layout:
              grid-template-columns: 60px 1fr
              grid-template-rows: 70px
              grid-auto-rows: 70px
              grid-template-areas: |
                "count button"
              margin: '-4px -4px 0px -4px'
              card_margin: 0
              padding: 0
              grid-area: left
        title: WIP sidebar
      - type: grid
        cards:
          - type: custom:layout-card
            layout_type: custom:grid-layout
            cards:
              - type: custom:button-card
                template:
                  - cb-lcars-label
                variables:
                  card_inactive_background_color: transparent
                  font_size: 38px
                  card_min_height: 55px
                entity: climate.living_room
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['sensor.home_average_temperature_template'].state;
                      const roundedValue = Math.round(parseFloat(state));
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-blue)
                  card_min_height: 55px
                  border_top: 3px
                  border_left: 3px
                  border_right: 3px
                  border_bottom: 3px
                  font_weight: normal
                state:
                  - id: state_on
                    value: HOME
                entity: input_select.lcars_ui_page_selector
                label: home
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: HOME
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-label
                variables:
                  card_inactive_background_color: transparent
                  text_color_zero: var(--lcars-blue)
                  text_color_non_zero: var(--lcars-blue)
                  card_active_background_color: var(--lcars-blue)
                  font_size: 38px
                  card_min_height: 55px
                entity: sensor.lights_on
                show_state: true
                show_label: false
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-blue)
                  card_min_height: 55px
                  border_top: 3px
                  border_left: 3px
                  border_right: 3px
                  border_bottom: 3px
                state:
                  - id: state_on
                    value: LIGHTS
                entity: input_select.lcars_ui_page_selector
                label: lights
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: LIGHTS
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-label
                variables:
                  card_inactive_background_color: transparent
                  font_size: 38px
                  card_min_height: 55px
                entity: climate.living_room
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['climate.living_room'].attributes.temperature;
                      const roundedValue = Math.round(parseFloat(state));

                      // Check if the roundedValue is NaN
                      if (isNaN(roundedValue)) {
                        return 'FF';
                      }
                      
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-blue)
                  card_min_height: 55px
                  border_top: 3px
                  border_left: 3px
                  border_right: 3px
                  border_bottom: 3px
                state:
                  - id: state_on
                    value: ENVIRONMENTAL
                entity: input_select.lcars_ui_page_selector
                label: environment
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: ENVIRONMENTAL
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  card_min_height: 50px
                  card_inactive_background_color: var(--picard-ghost-gray)
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  card_min_height: 100px
                  card_inactive_background_color: var(--picard-dark-gray)
              - type: custom:button-card
                template:
                  - cb-lcars-label
                variables:
                  card_inactive_background_color: transparent
                  text_color_zero: var(--lcars-blue)
                  text_color_non_zero: var(--lcars-blue)
                  card_active_background_color: var(--lcars-blue)
                  font_size: 38px
                  card_min_height: 50px
                entity: sensor.lights_on
                show_state: true
                show_label: false
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-right
                  - cb-lcars-animate-press
                state:
                  - id: state_on
                    value: LIGHTS II
                show_icon: true
                icon: none
                size: 24px
                variables:
                  icon_active_color: transparent
                  icon_inactive_color: transparent
                  icon_active_background_color: var(--picard-blue)
                  icon_inactive_background_color: transparent
                  card_min_height: 50px
                  font_weight: normal
                entity: input_select.lcars_ui_page_selector
                label: lights ii
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: LIGHTS II
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-label
                variables:
                  card_inactive_background_color: transparent
                  font_size: 38px
                  card_min_height: 50px
                  text_color_zero: var(--success-color)
                  text_color_non_zero: var(--error-color)
                entity: sensor.contact_sensors_open
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['sensor.contact_sensors_open'].state;
                      const roundedValue = Math.round(parseFloat(state));
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-right
                  - cb-lcars-animate-press
                state:
                  - id: state_on
                    value: SECURITY
                show_icon: true
                icon: none
                size: 24px
                variables:
                  icon_active_color: transparent
                  icon_inactive_color: transparent
                  icon_active_background_color: var(--picard-blue)
                  icon_inactive_background_color: transparent
                  card_min_height: 50px
                entity: input_select.lcars_ui_page_selector
                label: security
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: SECURITY
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  card_min_height: 50px
                  card_inactive_background_color: var(--picard-black-cherry)
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-right
                  - cb-lcars-animate-press
                state:
                  - id: state_on
                    value: COMMS
                show_icon: true
                icon: none
                size: 24px
                variables:
                  card_min_height: 50px
                  icon_active_color: transparent
                  icon_inactive_color: transparent
                  icon_active_background_color: var(--picard-blue)
                  icon_inactive_background_color: transparent
                  state:
                    - id: state_on
                      value: COMMS
                entity: input_select.lcars_ui_page_selector
                label: comms
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: COMMS
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-label
                variables:
                  card_inactive_background_color: transparent
                  font_size: 38px
                  card_min_height: 50px
                  text_color_zero: var(--error-color)
                  text_color_non_zero: white
                entity: sensor.cats_home
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['sensor.cats_home'].state;
                      const roundedValue = Math.round(parseFloat(state));
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                  - cb-lcars-animate-press
                state:
                  - id: state_on
                    value: CATS
                variables:
                  card_min_height: 50px
                entity: input_select.lcars_ui_page_selector
                label: felines
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: CATS
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:gap-card
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--warning-color)
                  card_min_height: 50px
                  border_top: 3px
                  border_left: 3px
                  border_right: 3px
                  border_bottom: 3px
                state:
                  - id: state_on
                    value: ENGINEERING
                entity: input_select.lcars_ui_page_selector
                label: engineering
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: ENGINEERING
                hold_action:
                  action: none
                double_tap_action:
                  action: none
            layout:
              grid-template-columns: 55px 1fr
              grid-template-rows: auto
              grid-auto-rows: auto
              grid-template-areas: |
                "count button"
              margin: '-4px -4px 0px -4px'
              card_margin: 0
              padding: 0
              grid-area: left
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
            variables:
              card_width: 50px
              icon_inactive_background_color: var(--error-color)
              icon_active_background_color: var(--success-color)
              blink_state_mode: 'on'
              blink_card_background_color: var(--error-color) !important
            size: 50px
            entity: switch.front_door_recordings
            show_icon: true
            state:
              - id: state_on
                value: 'on'
              - id: state_off
                value: 'off'
            tap_action:
              action: toggle
            hold_action:
              action: more-info
            double_tap_action:
              action: none
          - type: horizontal-stack
            cards:
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  card_width: 50px
                  icon_inactive_background_color: var(--error-color)
                  icon_active_background_color: var(--picard-cyan)
                styles:
                  icon:
                    - border: none !important
                size: 50px
                entity: switch.front_door_recordings
                show_icon: true
                tap_action:
                  action: toggle
                hold_action:
                  action: more-info
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  card_width: 50px
                  icon_inactive_background_color: var(--error-color)
                  icon_active_background_color: var(--picard-cyan)
                styles:
                  icon:
                    - border: none !important
                size: 50px
                entity: switch.front_door_detect
                show_icon: true
                tap_action:
                  action: toggle
                hold_action:
                  action: more-info
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  card_width: 50px
                  icon_inactive_background_color: var(--warning-color)
                  icon_active_background_color: var(--picard-blue)
                styles:
                  icon:
                    - border: none !important
                size: 50px
                entity: switch.front_door_snapshots
                show_icon: true
                state:
                  - id: state_on
                    value: 'on'
                  - id: state_off
                    value: 'off'
                tap_action:
                  action: toggle
                hold_action:
                  action: more-info
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  card_width: 50px
                  icon_inactive_background_color: var(--picard-dark-blue)
                  icon_active_background_color: var(--picard-blue)
                styles:
                  icon:
                    - border: none !important
                size: 50px
                show_icon: true
                entity: switch.front_door_push_notifications
                tap_action:
                  action: toggle
                hold_action:
                  action: more-info
                double_tap_action:
                  action: none
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled
            label: front door
            variables:
              font_size: 28px
              font_weight: bold
              card_inactive_background_color: var(--picard-dark-gray)
              text_color_off: var(--picard-starlight)
            tap_action:
              action: none
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:button-card
            styles:
              card:
                - background: blue
                - width: 435px
                - height: 150px
                - border-radius: 0 !important
              custom_fields:
                switches:
                  - position: absolute
                  - right: 0
                  - top: 25px
                header:
                  - position: absolute
                  - left: 0px
                  - top: 0px
            custom_fields:
              header:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  label: front door
                  variables:
                    card_height: 80px
                    card_width: 435px
                    font_size: 28px
                    font_weight: bold
                    text_justify: left
                    text_padding_left: 60px
                    card_inactive_background_color: var(--picard-dark-gray)
                    text_color_off: var(--picard-starlight)
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
              switches:
                card:
                  type: horizontal-stack
                  cards:
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 50px
                        icon_inactive_background_color: var(--error-color)
                        icon_active_background_color: var(--picard-cyan)
                      styles:
                        icon:
                          - border: none !important
                      size: 50px
                      entity: switch.front_door_recordings
                      show_icon: true
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 50px
                        icon_inactive_background_color: var(--error-color)
                        icon_active_background_color: var(--picard-cyan)
                      styles:
                        icon:
                          - border: none !important
                      size: 50px
                      entity: switch.front_door_detect
                      show_icon: true
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 50px
                        icon_inactive_background_color: var(--warning-color)
                        icon_active_background_color: var(--picard-blue)
                      styles:
                        icon:
                          - border: none !important
                      size: 50px
                      entity: switch.front_door_snapshots
                      show_icon: true
                      state:
                        - id: state_on
                          value: 'on'
                        - id: state_off
                          value: 'off'
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 50px
                        icon_inactive_background_color: var(--picard-dark-blue)
                        icon_active_background_color: var(--picard-blue)
                      styles:
                        icon:
                          - border: none !important
                      size: 50px
                      show_icon: true
                      entity: switch.front_door_push_notifications
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
          - type: custom:button-card
            styles:
              card:
                - border-radius: 0px !important
                - width: 240px
                - height: 65px
                - background: black
              custom_fields:
                buttons:
                  - position: absolute
                  - top: 10px
                  - left: 10px
            custom_fields:
              buttons:
                card:
                  type: horizontal-stack
                  cards:
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 50px
                        icon_inactive_background_color: var(--error-color)
                        icon_active_background_color: var(--picard-cyan)
                        card_border_top_left_radius: 10px
                        card_border_top_right_radius: 10px
                        card_border_bottom_left_radius: 10px
                        card_border_bottom_right_radius: 10px
                      styles:
                        icon:
                          - border: none !important
                      size: 50px
                      entity: switch.front_door_recordings
                      show_icon: true
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 50px
                        icon_inactive_background_color: var(--error-color)
                        icon_active_background_color: var(--picard-cyan)
                        card_border_top_left_radius: 10px
                        card_border_top_right_radius: 10px
                        card_border_bottom_left_radius: 10px
                        card_border_bottom_right_radius: 10px
                      styles:
                        icon:
                          - border: none !important
                      size: 50px
                      entity: switch.front_door_detect
                      show_icon: true
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 50px
                        icon_inactive_background_color: var(--warning-color)
                        icon_active_background_color: var(--picard-blue)
                        card_border_top_left_radius: 10px
                        card_border_top_right_radius: 10px
                        card_border_bottom_left_radius: 10px
                        card_border_bottom_right_radius: 10px
                      styles:
                        icon:
                          - border: none !important
                      size: 50px
                      entity: switch.front_door_snapshots
                      show_icon: true
                      state:
                        - id: state_on
                          value: 'on'
                        - id: state_off
                          value: 'off'
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 50px
                        icon_inactive_background_color: var(--picard-dark-blue)
                        icon_active_background_color: var(--picard-blue)
                        card_border_top_left_radius: 10px
                        card_border_top_right_radius: 10px
                        card_border_bottom_left_radius: 10px
                        card_border_bottom_right_radius: 10px
                      styles:
                        icon:
                          - border: none !important
                      size: 50px
                      show_icon: true
                      entity: switch.front_door_push_notifications
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
          - type: custom:button-card
            styles:
              card:
                - background: blue
                - width: 450px
                - height: 83px
                - border-radius: 0 !important
              custom_fields:
                switch_panel:
                  - position: absolute
                  - right: 0
                  - top: 18px
                header:
                  - position: absolute
                  - left: 0px
                  - top: 0px
            custom_fields:
              header:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  label: front door
                  variables:
                    card_height: 83px
                    card_width: 450px
                    font_size: 28px
                    font_weight: bold
                    text_justify: left
                    text_padding_left: 75px
                    card_inactive_background_color: var(--picard-dark-gray)
                    text_color_off: var(--picard-starlight)
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
              switch_panel:
                card:
                  type: custom:button-card
                  styles:
                    card:
                      - border-radius: 0px !important
                      - width: 240px
                      - height: 65px
                      - background: black
                    custom_fields:
                      buttons:
                        - position: absolute
                        - top: 10px
                        - left: 10px
                  custom_fields:
                    buttons:
                      card:
                        type: horizontal-stack
                        cards:
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 50px
                              icon_inactive_background_color: var(--error-color)
                              icon_active_background_color: var(--picard-cyan)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 50px
                            entity: switch.front_door_recordings
                            show_icon: true
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 50px
                              icon_inactive_background_color: var(--error-color)
                              icon_active_background_color: var(--picard-cyan)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 50px
                            entity: switch.front_door_detect
                            show_icon: true
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 50px
                              icon_inactive_background_color: var(--warning-color)
                              icon_active_background_color: var(--picard-blue)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 50px
                            entity: switch.front_door_snapshots
                            show_icon: true
                            state:
                              - id: state_on
                                value: 'on'
                              - id: state_off
                                value: 'off'
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 50px
                              icon_inactive_background_color: var(--picard-dark-blue)
                              icon_active_background_color: var(--picard-blue)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 50px
                            show_icon: true
                            entity: switch.front_door_push_notifications
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
          - type: custom:button-card
            styles:
              card:
                - border-radius: 0px !important
                - width: 195px
                - height: 45px
                - background: black
              custom_fields:
                buttons:
                  - position: absolute
                  - top: 5px
                  - left: 10px
            custom_fields:
              buttons:
                card:
                  type: horizontal-stack
                  cards:
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 40px
                        card_min_height: 40px
                        icon_inactive_background_color: var(--error-color)
                        icon_active_background_color: var(--picard-cyan)
                        card_border_top_left_radius: 10px
                        card_border_top_right_radius: 10px
                        card_border_bottom_left_radius: 10px
                        card_border_bottom_right_radius: 10px
                      styles:
                        icon:
                          - border: none !important
                      size: 40px
                      entity: switch.front_door_recordings
                      show_icon: true
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 40px
                        card_min_height: 40px
                        icon_inactive_background_color: var(--error-color)
                        icon_active_background_color: var(--picard-cyan)
                        card_border_top_left_radius: 10px
                        card_border_top_right_radius: 10px
                        card_border_bottom_left_radius: 10px
                        card_border_bottom_right_radius: 10px
                      styles:
                        icon:
                          - border: none !important
                      size: 50px
                      entity: switch.front_door_detect
                      show_icon: true
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 40px
                        card_min_height: 40px
                        icon_inactive_background_color: var(--warning-color)
                        icon_active_background_color: var(--picard-blue)
                        card_border_top_left_radius: 10px
                        card_border_top_right_radius: 10px
                        card_border_bottom_left_radius: 10px
                        card_border_bottom_right_radius: 10px
                      styles:
                        icon:
                          - border: none !important
                      size: 40px
                      entity: switch.front_door_snapshots
                      show_icon: true
                      state:
                        - id: state_on
                          value: 'on'
                        - id: state_off
                          value: 'off'
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
                    - type: custom:button-card
                      template:
                        - cb-lcars-button-picard-filled-dense
                      variables:
                        card_width: 40px
                        card_min_height: 40px
                        icon_inactive_background_color: var(--picard-dark-blue)
                        icon_active_background_color: var(--picard-blue)
                        card_border_top_left_radius: 10px
                        card_border_top_right_radius: 10px
                        card_border_bottom_left_radius: 10px
                        card_border_bottom_right_radius: 10px
                      styles:
                        icon:
                          - border: none !important
                      size: 40px
                      show_icon: true
                      entity: switch.front_door_push_notifications
                      tap_action:
                        action: toggle
                      hold_action:
                        action: more-info
                      double_tap_action:
                        action: none
          - type: custom:button-card
            styles:
              card:
                - background: blue
                - width: 360px
                - height: 55px
                - border-radius: 0 !important
              custom_fields:
                switch_panel:
                  - position: absolute
                  - right: 0px
                  - top: 10px
                header:
                  - position: absolute
                  - right: 0px
                  - top: 0px
            custom_fields:
              header:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  label: front door
                  show_icon: true
                  size: 24px
                  entity: switch.front_door_recordings
                  variables:
                    card_height: 55px
                    card_min_height: 55px
                    card_width: 360px
                    font_size: 24px
                    font_weight: normal
                    text_justify: right
                    text_padding_right: 210px
                    card_active_background_color: var(--lcars-ui-primary)
                    card_inactive_background_color: var(--error-color)
                    text_color_off: black
                    icon_active_color: transparent
                    icon_inactive_color: transparent
                    icon_active_background_color: var(--picard-blue)
                    icon_inactive_background_color: red
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
              switch_panel:
                card:
                  type: custom:button-card
                  styles:
                    card:
                      - border-radius: 0px !important
                      - width: 195px
                      - height: 45px
                      - background: black
                    custom_fields:
                      buttons:
                        - position: absolute
                        - top: 5px
                        - left: 10px
                  custom_fields:
                    buttons:
                      card:
                        type: horizontal-stack
                        cards:
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 40px
                              card_min_height: 40px
                              icon_inactive_background_color: var(--error-color)
                              icon_active_background_color: var(--picard-cyan)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 40px
                            entity: switch.front_door_recordings
                            show_icon: true
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 40px
                              card_min_height: 40px
                              icon_inactive_background_color: var(--error-color)
                              icon_active_background_color: var(--picard-cyan)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 50px
                            entity: switch.front_door_detect
                            show_icon: true
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 40px
                              card_min_height: 40px
                              icon_inactive_background_color: var(--warning-color)
                              icon_active_background_color: var(--picard-blue)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 40px
                            entity: switch.front_door_snapshots
                            show_icon: true
                            state:
                              - id: state_on
                                value: 'on'
                              - id: state_off
                                value: 'off'
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 40px
                              card_min_height: 40px
                              icon_inactive_background_color: var(--picard-dark-blue)
                              icon_active_background_color: var(--picard-blue)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 40px
                            show_icon: true
                            entity: switch.front_door_push_notifications
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
            variables:
              card_width: 40px
              card_min_height: 40px
              card_border_top_left_radius: 10px
              card_border_top_right_radius: 10px
              card_border_bottom_left_radius: 10px
              card_border_bottom_right_radius: 10px
            styles:
              icon:
                - border: none !important
            size: 40px
            entity: switch.front_door_recordings
            show_icon: true
            tap_action:
              action: toggle
            hold_action:
              action: more-info
            double_tap_action:
              action: none
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-icon
        title: original sidebar
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-header-picard
          - type: custom:button-card
            view_layout:
              grid-area: header-right
            styles:
              card:
                - background: orange
                - width: 300px
                - height: 220px
                - border-radius: 0 !important
              custom_fields:
                clock:
                  - position: absolute
                  - top: 50px
                  - right: 0
                  - width: 300px
                  - height: 110px
                outer_elbow:
                  - position: absolute
                  - top: 0
                  - right: 0
                inner_elbow:
                  - position: absolute
                  - bottom: 0
                  - left: 0
            custom_fields:
              clock:
                card:
                  type: custom:clock-weather-card
                  entity: weather.home
                  sun_entity: true
                  weather_icon_type: line
                  forecast_rows: 0
                  time_format: 24
                  hourly_forecast: false
                  hide_today_section: false
                  hide_forecast_section: true
                  time_pattern: HH:mm:ss
                  date_pattern: yyyy-mm-dd [cccc]
                  temperature_sensor: sensor.patio_sensor_temperature
                  humidity_sensor: sensor.patio_sensor_humidity
                  show_humidity: false
                  card_mod:
                    style: |
                      ha-card {
                        background: none !important;
                      }
                      .card-content {
                        padding-top: 0;
                        padding-bottom: 0;
                        padding-right: 0;
                      }
              outer_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-header-picard-right
                  variables:
                    card_height: 210px
                    card_width: 300px
                    card_inner_border_factor: 1.4
                    card_inner_border_width: 50px
                    picard_lcars_outer_color: var(--lcars-ui-secondary)
                    picard_lcars_inner_color: var(--lcars-ui-primary)
                    picard_border_ratio_factor: 1.27
                    card_border_top_right_radius: 160px
                    picard_border_gap: 5px
                    picard_lcars_outer_border_top: 45px
                    picard_lcars_inner_border_top: 80px
                    picard_lcars_outer_border_right: 45px
                    picard_lcars_inner_border_right: 145px
                    picard_lcars_inner_border_factor: 2
                  show_label: false
                  label: |
                    [[[ 
                      return html`<elt>TBD - some<br><font color=red>messages about stuff</font> or <font color=blue>just nothing</font></elt>`;
                    ]]]
              inner_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-header-picard-right
                  variables:
                    card_height: 210px
                    card_width: 300px
                    card_inner_border_factor: 2.8
                    card_inner_border_width: 50px
                    picard_lcars_outer_color: transparent
                    picard_lcars_inner_color: var(--lcars-card-bottom-color)
                    picard_border_ratio_factor: 1
                    card_border_top_left_radius: 160px
                    picard_border_gap: 5px
                    picard_lcars_outer_border_top: 129px
                    picard_lcars_inner_border_top: 10px
                    picard_lcars_outer_border_right: 195px
                    picard_lcars_inner_border_right: 10px
                    picard_lcars_inner_border_factor: 2
                    picard_lcars_inner_border_top_right_radius: 53px
                  show_label: false
                  label: |
                    [[[ 
                      return html`<elt>TBD - some<br><font color=red>messages about stuff</font> or <font color=blue>just nothing</font></elt>`;
                    ]]]
          - type: custom:button-card
            template: cb-lcars-header-right
            variables:
              border_top: 0px
              border_right: 90px
              card_border_top_right_radius: 0px
            styles:
              label:
                - border-top-left-radius: 0px
                - border-top-right-radius: 30px
          - type: custom:button-card
            view_layout:
              grid-area: header-right
            styles:
              card:
                - background: orange
                - width: 300px
                - height: 220px
                - border-radius: 0px 0px 0px 0px !important
              custom_fields:
                header_elbow:
                  - position: absolute
                  - top: 0
                  - right: 0
                header_button:
                  - position: absolute
                  - top: 0
                  - left: 0
                footer_elbow:
                  - position: absolute
                  - right: 0
                  - bottom: 5px
                footer_button:
                  - position: absolute
                  - left: 0
                  - bottom: 5px
                inner_elbow:
                  - position: absolute
                  - left: 0px
                  - bottom: 5px
            custom_fields:
              header_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-picard-vertical
                  variables:
                    card_height: 200px
                    card_width: 130px
                    picard_border_gap: 5px
                    picard_lcars_1_height: 50px
                    picard_lcars_2_height: 200px
                    picard_lcars_1_width: 100px
                    picard_lcars_2_width: 40px
                    picard_lcars_1_label: ' '
                    picard_lcars_2_label: ' '
              header_button:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  variables:
                    card_min_height: 50px
                    card_width: 165px
              footer_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-picard-horizontal
                  variables:
                    card_height: 50px
                    card_width: 130px
                    picard_border_gap: 5px
                    picard_lcars_1_height: 170px
                    picard_lcars_2_height: 130px
                    picard_lcars_1_width: 40px
                    picard_lcars_2_width: 130px
                    picard_lcars_1_label: ' '
                    picard_lcars_2_label: ' '
                  styles:
                    card:
                      - transform: scaleX(-1)
              footer_button:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  variables:
                    card_min_height: 50px
                    card_width: 165px
              inner_elbow:
                card:
                  type: custom:button-card
                  template: cb-lcars-header-right
                  variables:
                    card_min_height: 50px
                    card_width: 165px
                    border_top: 0px
                    border_right: 130px
                    card_border_top_right_radius: 0px
                  styles:
                    label:
                      - border-top-left-radius: 0px
                      - border-top-right-radius: 30px
          - type: custom:button-card
            styles:
              card:
                - background: blue
                - width: 360px
                - height: 55px
                - border-radius: 0 !important
                - transform: scale(0.75)
              custom_fields:
                switch_panel:
                  - position: absolute
                  - right: 0px
                  - top: 10px
                header:
                  - position: absolute
                  - right: 0px
                  - top: 0px
            custom_fields:
              header:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  label: front door
                  show_icon: true
                  size: 24px
                  entity: switch.front_door_recordings
                  variables:
                    card_height: 55px
                    card_min_height: 55px
                    card_width: 360px
                    font_size: 24px
                    font_weight: normal
                    text_justify: right
                    text_padding_right: 210px
                    card_active_background_color: var(--lcars-ui-primary)
                    card_inactive_background_color: var(--error-color)
                    text_color_off: black
                    icon_active_color: transparent
                    icon_inactive_color: transparent
                    icon_active_background_color: var(--picard-blue)
                    icon_inactive_background_color: red
                  tap_action:
                    action: none
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
              switch_panel:
                card:
                  type: custom:button-card
                  styles:
                    card:
                      - border-radius: 0px !important
                      - width: 195px
                      - height: 45px
                      - background: black
                    custom_fields:
                      buttons:
                        - position: absolute
                        - top: 5px
                        - left: 10px
                  custom_fields:
                    buttons:
                      card:
                        type: horizontal-stack
                        cards:
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 40px
                              card_min_height: 40px
                              icon_inactive_background_color: var(--error-color)
                              icon_active_background_color: var(--picard-cyan)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 40px
                            entity: switch.front_door_recordings
                            show_icon: true
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 40px
                              card_min_height: 40px
                              icon_inactive_background_color: var(--error-color)
                              icon_active_background_color: var(--picard-cyan)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 50px
                            entity: switch.front_door_detect
                            show_icon: true
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 40px
                              card_min_height: 40px
                              icon_inactive_background_color: var(--warning-color)
                              icon_active_background_color: var(--picard-blue)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 40px
                            entity: switch.front_door_snapshots
                            show_icon: true
                            state:
                              - id: state_on
                                value: 'on'
                              - id: state_off
                                value: 'off'
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
                          - type: custom:button-card
                            template:
                              - cb-lcars-button-picard-filled-dense
                            variables:
                              card_width: 40px
                              card_min_height: 40px
                              icon_inactive_background_color: var(--picard-dark-blue)
                              icon_active_background_color: var(--picard-blue)
                              card_border_top_left_radius: 10px
                              card_border_top_right_radius: 10px
                              card_border_bottom_left_radius: 10px
                              card_border_bottom_right_radius: 10px
                            styles:
                              icon:
                                - border: none !important
                            size: 40px
                            show_icon: true
                            entity: switch.front_door_push_notifications
                            tap_action:
                              action: toggle
                            hold_action:
                              action: more-info
                            double_tap_action:
                              action: none
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-footer-picard
            variables:
              card_height: 176px
              card_width: 1123px
              card_border_bottom_left_radius: 160px
              picard_border_gap: 5px
              card_inner_border_factor: 1.27
              card_inner_border_width: 50px
              picard_lcars_inner_color: var(--picard-light-gray)
              picard_lcars_outer_border_bottom: 45px
              picard_lcars_inner_border_bottom: 0px
              picard_lcars_outer_border_left: 45px
              picard_lcars_inner_border_left: 155px
              picard_lcars_inner_border_factor: 1.5
            show_label: false
            label: |
              [[[ 
                return html`<elt>TBD - some<br><font color=red>messages about stuff</font> or <font color=blue>just nothing</font></elt>`;
              ]]]
            view_layout:
              grid-area: footer-left
          - type: custom:button-card
            view_layout:
              grid-area: footer-right
            styles:
              card:
                - background: pink
                - width: 300px
                - height: 175px
                - border-radius: 0px 0px 0px 0px !important
              custom_fields:
                header_elbow:
                  - position: absolute
                  - top: 0
                  - right: 0
            custom_fields:
              header_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-picard-right
                  variables:
                    card_height: 180px
                    card_width: 300px
                    card_inner_border_factor: 1.4
                    card_inner_border_width: 50px
                    picard_lcars_outer_color: var(--lcars-ui-secondary)
                    picard_lcars_inner_color: var(--lcars-ui-primary)
                    picard_border_ratio_factor: 1.27
                    card_border_bottom_right_radius: 160px
                    picard_border_gap: 5px
                    picard_lcars_outer_border_bottom: 45px
                    picard_lcars_inner_border_bottom: 10px
                    picard_lcars_outer_border_right: 45px
                    picard_lcars_inner_border_right: 10px
                    picard_lcars_inner_border_factor: 2
          - type: custom:button-card
            view_layout:
              grid-area: footer-left
            styles:
              card:
                - background: transparent
                - height: 175px
                - width: 300px
                - border-radius: 0 !important
              custom_fields:
                left_elbow:
                  - position: absolute
                  - left: 0
                  - bottom: 0
            custom_fields:
              left_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-picard
                  variables:
                    card_height: 175px
                    card_width: 400px
                    card_inner_border_factor: 1.4
                    card_inner_border_width: null
                    picard_lcars_outer_color: var(--lcars-ui-secondary)
                    picard_lcars_inner_color: var(--lcars-ui-primary)
                    card_border_bottom_left_radius: 173px
                    picard_border_gap: 5px
                    picard_lcars_outer_border_bottom: 45px
                    picard_lcars_inner_border_bottom: 0px
                    picard_lcars_outer_border_left: 45px
                    picard_lcars_inner_border_left: 162px
                    picard_lcars_inner_border_factor: 1.45
          - type: custom:button-card
            view_layout:
              grid-area: footer-right
            styles:
              card:
                - background: transparent
                - width: 300px
                - height: 175px
                - border-radius: 0px 0px 0px 0px !important
              custom_fields:
                elbow:
                  - position: absolute
                  - top: 5px
                  - right: 0
            custom_fields:
              elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-picard-right
                  variables:
                    card_height: 170px
                    card_width: 500px
                    card_border_bottom_right_radius: 80px
                    picard_border_gap: 5px
                    card_inner_border_factor: 1.6
                    card_inner_border_width: 50px
                    picard_lcars_inner_color: var(--lcars-card-bottom-color)
                    picard_lcars_outer_color: var(--lcars-ui-secondary)
                    picard_lcars_outer_border_bottom: 45px
                    picard_lcars_inner_border_bottom: 0px
                    picard_lcars_outer_border_right: 130px
                    picard_lcars_inner_border_right: 165px
                    picard_lcars_inner_border_factor: 1
          - type: custom:button-card
            view_layout:
              grid-area: right-sidebar
            styles:
              card:
                - background: transparent
                - width: 300px
                - height: 502px
                - border-radius: 0px 0px 0px 0px !important
              custom_fields:
                header_elbow:
                  - position: absolute
                  - top: 0
                  - right: 0
                header_button:
                  - position: absolute
                  - top: 0
                  - left: 0
                footer_elbow:
                  - position: absolute
                  - right: 0
                  - bottom: 0
                footer_button:
                  - position: absolute
                  - left: 0
                  - bottom: 0
                front_door_panel:
                  - position: absolute
                  - top: 60px
                  - right: 0px
            custom_fields:
              front_door_panel:
                card:
                  type: custom:button-card
                  styles:
                    card:
                      - background: blue
                      - width: 360px
                      - height: 55px
                      - border-radius: 0 !important
                      - transform: scale(0.75)
                    custom_fields:
                      switch_panel:
                        - position: absolute
                        - right: 0px
                        - top: 10px
                      header:
                        - position: absolute
                        - right: 0px
                        - top: 0px
                  custom_fields:
                    header:
                      card:
                        type: custom:button-card
                        template:
                          - cb-lcars-button-picard-filled
                        label: front door
                        show_icon: true
                        size: 24px
                        entity: switch.front_door_recordings
                        variables:
                          card_height: 55px
                          card_min_height: 55px
                          card_width: 360px
                          font_size: 24px
                          font_weight: normal
                          text_justify: right
                          text_padding_right: 210px
                          card_active_background_color: var(--lcars-ui-primary)
                          card_inactive_background_color: var(--error-color)
                          text_color_off: black
                          icon_active_color: transparent
                          icon_inactive_color: transparent
                          icon_active_background_color: var(--picard-blue)
                          icon_inactive_background_color: red
                        tap_action:
                          action: none
                        hold_action:
                          action: none
                        double_tap_action:
                          action: none
                    switch_panel:
                      card:
                        type: custom:button-card
                        styles:
                          card:
                            - border-radius: 0px !important
                            - width: 195px
                            - height: 45px
                            - background: black
                          custom_fields:
                            buttons:
                              - position: absolute
                              - top: 5px
                              - left: 10px
                        custom_fields:
                          buttons:
                            card:
                              type: horizontal-stack
                              cards:
                                - type: custom:button-card
                                  template:
                                    - cb-lcars-button-picard-filled-dense
                                  variables:
                                    card_width: 40px
                                    card_min_height: 40px
                                    icon_inactive_background_color: var(--error-color)
                                    icon_active_background_color: var(--picard-cyan)
                                    card_border_top_left_radius: 10px
                                    card_border_top_right_radius: 10px
                                    card_border_bottom_left_radius: 10px
                                    card_border_bottom_right_radius: 10px
                                  styles:
                                    icon:
                                      - border: none !important
                                  size: 40px
                                  entity: switch.front_door_recordings
                                  show_icon: true
                                  tap_action:
                                    action: toggle
                                  hold_action:
                                    action: more-info
                                  double_tap_action:
                                    action: none
                                - type: custom:button-card
                                  template:
                                    - cb-lcars-button-picard-filled-dense
                                  variables:
                                    card_width: 40px
                                    card_min_height: 40px
                                    icon_inactive_background_color: var(--error-color)
                                    icon_active_background_color: var(--picard-cyan)
                                    card_border_top_left_radius: 10px
                                    card_border_top_right_radius: 10px
                                    card_border_bottom_left_radius: 10px
                                    card_border_bottom_right_radius: 10px
                                  styles:
                                    icon:
                                      - border: none !important
                                  size: 50px
                                  entity: switch.front_door_detect
                                  show_icon: true
                                  tap_action:
                                    action: toggle
                                  hold_action:
                                    action: more-info
                                  double_tap_action:
                                    action: none
                                - type: custom:button-card
                                  template:
                                    - cb-lcars-button-picard-filled-dense
                                  variables:
                                    card_width: 40px
                                    card_min_height: 40px
                                    icon_inactive_background_color: var(--warning-color)
                                    icon_active_background_color: var(--picard-blue)
                                    card_border_top_left_radius: 10px
                                    card_border_top_right_radius: 10px
                                    card_border_bottom_left_radius: 10px
                                    card_border_bottom_right_radius: 10px
                                  styles:
                                    icon:
                                      - border: none !important
                                  size: 40px
                                  entity: switch.front_door_snapshots
                                  show_icon: true
                                  state:
                                    - id: state_on
                                      value: 'on'
                                    - id: state_off
                                      value: 'off'
                                  tap_action:
                                    action: toggle
                                  hold_action:
                                    action: more-info
                                  double_tap_action:
                                    action: none
                                - type: custom:button-card
                                  template:
                                    - cb-lcars-button-picard-filled-dense
                                  variables:
                                    card_width: 40px
                                    card_min_height: 40px
                                    icon_inactive_background_color: var(--picard-dark-blue)
                                    icon_active_background_color: var(--picard-blue)
                                    card_border_top_left_radius: 10px
                                    card_border_top_right_radius: 10px
                                    card_border_bottom_left_radius: 10px
                                    card_border_bottom_right_radius: 10px
                                  styles:
                                    icon:
                                      - border: none !important
                                  size: 40px
                                  show_icon: true
                                  entity: switch.front_door_push_notifications
                                  tap_action:
                                    action: toggle
                                  hold_action:
                                    action: more-info
                                  double_tap_action:
                                    action: none
              header_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-picard-vertical
                  variables:
                    card_height: 200px
                    card_width: 130px
                    picard_border_gap: 5px
                    picard_lcars_1_height: 50px
                    picard_lcars_2_height: 200px
                    picard_lcars_1_width: 100px
                    picard_lcars_2_width: 40px
                    picard_lcars_1_label: ' '
                    picard_lcars_2_label: ' '
              header_button:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  variables:
                    card_min_height: 50px
                    card_width: 165px
              footer_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-picard-horizontal
                  variables:
                    card_height: 295px
                    card_width: 130px
                    picard_border_gap: 5px
                    picard_lcars_1_height: 170px
                    picard_lcars_2_height: 130px
                    picard_lcars_1_width: 40px
                    picard_lcars_2_width: 130px
                    picard_lcars_1_label: ' '
                    picard_lcars_2_label: ' '
                  styles:
                    card:
                      - transform: scaleX(-1)
              footer_button:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  variables:
                    card_min_height: 130px
                    card_width: 165px
          - type: custom:button-card
            view_layout:
              grid-area: footer-right
            styles:
              card:
                - background-color: |
                    [[[
                      if (states['input_boolean.lcars_ui_debug'].state === 'on') {
                        return 'rgba(150,0,0,0.3)';
                      } else {
                        return 'transparent';
                      }
                    ]]]
                - width: 300px
                - height: 175px
                - border-radius: 0 !important
              custom_fields:
                elbow:
                  - position: absolute
                  - bottom: 0
                  - right: 0
                inner_elbow:
                  - position: absolute
                  - left: 0px
                  - top: 0px
            custom_fields:
              inner_elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-picard-right
                  variables:
                    card_height: 139px
                    card_width: 100px
                    card_inner_border_factor: 1
                    card_inner_border_width: 50px
                    picard_lcars_outer_color: transparent
                    picard_lcars_inner_color: var(--lcars-ui-secondary)
                    picard_border_ratio_factor: 1
                    card_border_bottom_right_radius: 80px
                    picard_border_gap: 4px
                    picard_lcars_outer_border_bottom: 20px
                    picard_lcars_inner_border_bottom: 5px
                    picard_lcars_outer_border_right: 15px
                    picard_lcars_inner_border_right: 5px
                    picard_lcars_inner_border_factor: 1
                    picard_lcars_inner_border_bottom_right_radius: 60px
              elbow:
                card:
                  type: custom:button-card
                  template:
                    - cb-lcars-footer-picard-right
                  variables:
                    card_height: 175px
                    card_width: 500px
                    card_border_bottom_right_radius: 80px
                    picard_border_gap: 4px
                    card_inner_border_factor: 1.2
                    card_inner_border_width: 50px
                    picard_lcars_inner_color: var(--lcars-card-bottom-color)
                    picard_lcars_outer_color: var(--lcars-ui-secondary)
                    picard_lcars_outer_border_bottom: 6px
                    picard_lcars_inner_border_bottom: 45px
                    picard_lcars_outer_border_right: 6px
                    picard_lcars_inner_border_right: 205px
                    picard_lcars_inner_border_factor: 1
      - type: grid
        cards: []
        title: button-panel
      - type: grid
        cards:
          - type: custom:horizon-card
            moon: true
            elevation: 77
            fields:
              azimuth: true
              elevation: true
              moonrise: true
              moonset: true
              moon_phase: true
            card_mod:
              style: |
                ha-card {
                  background: none
                }
      - type: grid
        cards:
          - type: custom:button-card
            template: cb-lcars-header-callout
            label: cb-lcars-header-callout
          - type: custom:button-card
            template: cb-lcars-header-callout-right
            label: cb-lcars-header-callout-right
          - type: custom:button-card
            template: cb-lcars-footer-callout
            label: cb-lcars-header-callout
          - type: custom:button-card
            template: cb-lcars-footer-callout-right
            label: cb-lcars-header-callout-right
      - type: grid
        cards: []
      - type: grid
        cards:
          - type: custom:layout-card
            layout_type: custom:grid-layout
            cards:
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  text_justify: center
                  font_size: 28px
                  font_weight: normal
                  text_padding_bottom: 5px
                entity: climate.living_room
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['sensor.home_average_temperature_template'].state;
                      const roundedValue = Math.round(parseFloat(state));
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-light-blue)
                  card_inactive_color: var(--picard-dark-gray)
                  card_active_background_color: var(--picard-light-blue)
                  card_inactive_background_color: var(--picard-dark-gray)
                state:
                  - id: state_on
                    value: HOME
                  - id: state_off
                    operator: '!='
                    value: HOME
                entity: input_select.lcars_ui_page_selector
                label: home
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: HOME
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  text_justify: center
                  font_size: 28px
                  font_weight: normal
                  text_padding_bottom: 5px
                  text_color_zero: var(--picard-dark-blue)
                  text_color_non_zero: var(--picard-blue)
                entity: sensor.lights_on
                show_state: true
                show_label: false
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-dense
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-light-blue)
                  card_inactive_color: var(--picard-dark-gray)
                state:
                  - id: state_on
                    value: LIGHTS
                  - id: state_off
                    operator: '!='
                    value: LIGHTS
                entity: input_select.lcars_ui_page_selector
                label: lights
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: LIGHTS
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  text_justify: center
                  font_size: 28px
                  font_weight: normal
                  text_padding_bottom: 5px
                entity: climate.living_room
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['climate.living_room'].attributes.temperature;
                      const roundedValue = Math.round(parseFloat(state));

                      // Check if the roundedValue is NaN
                      if (isNaN(roundedValue)) {
                        return 'FF';
                      }
                      
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-dense
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-light-blue)
                  card_inactive_color: var(--picard-dark-gray)
                state:
                  - id: state_on
                    value: ENVIRONMENTAL
                  - id: state_off
                    operator: '!='
                    value: ENVIRONMENTAL
                entity: input_select.lcars_ui_page_selector
                label: environmental
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: ENVIRONMENTAL
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                label: esc
                tap_action:
                  action: navigate
                  navigation_path: /dashboard-lcars/scratch2
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                entity: input_boolean.lcars_ui_debug
                show_state: true
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  text_justify: center
                  font_size: 28px
                  font_weight: normal
                  text_padding_bottom: 5px
                  text_color_zero: var(--success-color)
                  text_color_non_zero: var(--error-color)
                entity: sensor.contact_sensors_open
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['sensor.contact_sensors_open'].state;
                      const roundedValue = Math.round(parseFloat(state));
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-dense
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-light-blue)
                  card_inactive_color: var(--picard-dark-gray)
                state:
                  - id: state_on
                    value: SECURITY
                  - id: state_off
                    operator: '!='
                    value: SECURITY
                entity: input_select.lcars_ui_page_selector
                label: security
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: SECURITY
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-dense
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-light-blue)
                  card_inactive_color: var(--picard-dark-gray)
                state:
                  - id: state_on
                    value: COMMS
                  - id: state_off
                    operator: '!='
                    value: COMSS
                entity: input_select.lcars_ui_page_selector
                label: comms
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: COMMS
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  text_justify: center
                  font_size: 28px
                  font_weight: normal
                  text_padding_bottom: 5px
                  text_color_zero: var(--error-color)
                  text_color_non_zero: var(--picard-starlight)
                entity: sensor.cats_home
                show_state: false
                show_name: false
                show_label: true
                label: |
                  [[[
                      const state = states['sensor.cats_home'].state;
                      const roundedValue = Math.round(parseFloat(state));
                      const formattedValue = roundedValue.toString().padStart(2, '0');
                      return formattedValue;
                  ]]]
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-dense
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-light-blue)
                  card_inactive_color: var(--picard-dark-gray)
                state:
                  - id: state_on
                    value: CATS
                  - id: state_off
                    operator: '!='
                    value: CATS
                entity: input_select.lcars_ui_page_selector
                label: felines
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: CATS
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:gap-card
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-dense
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-dark-orange)
                  card_inactive_color: var(--picard-dark-gray)
                state:
                  - id: state_on
                    value: ENGINEERING
                  - id: state_off
                    operator: '!='
                    value: ENGINEERING
                entity: input_select.lcars_ui_page_selector
                label: engineering
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: ENGINEERING
                hold_action:
                  action: none
                double_tap_action:
                  action: none
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                variables:
                  text_justify: center
                  font_size: 28px
                  font_weight: normal
                  text_padding_bottom: 5px
                  text_color_zero: var(--picard-dark-blue)
                  text_color_non_zero: var(--picard-blue)
                entity: sensor.lights_on
                show_state: true
                show_label: false
              - type: custom:button-card
                template:
                  - cb-lcars-button-picard-dense
                  - cb-lcars-animate-press
                variables:
                  card_active_color: var(--picard-light-blue)
                  card_inactive_color: var(--picard-dark-gray)
                state:
                  - id: state_on
                    value: LIGHTS II
                  - id: state_off
                    operator: '!='
                    value: LIGHTS II
                entity: input_select.lcars_ui_page_selector
                label: lights ii
                tap_action:
                  action: call-service
                  service: input_select.select_option
                  data:
                    entity_id: input_select.lcars_ui_page_selector
                    option: LIGHTS II
                hold_action:
                  action: none
                double_tap_action:
                  action: none
            layout:
              grid-template-columns: 52px 1fr
              grid-template-rows: auto
              grid-auto-rows: auto
              card_margin: 0
              padding: 0
              grid-area: left-sidebar
              margin: '-4px -4px 0px -4px'
              grid-column-gap: 0px
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              grid_X: 2
              grid_Y: 9
              grid_gap: 10px
              grid_buttons2:
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-color
                  variables:
                    card_active_background_color: blue
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-icon
                  show_icon: true
                  variables:
                    card_active_background_color: yellow
              grid_template_columns: 40px 120px
              grid_buttons:
                - variables:
                    button:
                      variables:
                        text_justify: center
                        font_size: 28px
                        font_weight: normal
                        text_padding_bottom: 5px
                        text_color_nonzero: black
                      entity: climate.living_room
                      show_state: false
                      show_name: false
                      show_label: true
                      label: |
                        [[[
                            const state = states['sensor.home_average_temperature_template'].state;
                            const roundedValue = Math.round(parseFloat(state));
                            const formattedValue = roundedValue.toString().padStart(2, '0');
                            return formattedValue;
                        ]]]
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled-dense
                    - cb-lcars-animate-press
                  variables:
                    card_active_color: var(--picard-light-blue)
                    card_inactive_color: var(--picard-dark-gray)
                    card_active_background_color: var(--picard-light-blue)
                    card_inactive_background_color: var(--picard-dark-gray)
                  state:
                    - id: state_on
                      value: HOME
                    - id: state_off
                      operator: '!='
                      value: HOME
                  entity: input_select.lcars_ui_page_selector
                  label: home
                  tap_action:
                    action: call-service
                    service: input_select.select_option
                    data:
                      entity_id: input_select.lcars_ui_page_selector
                      option: HOME
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled-dense
                  variables:
                    text_justify: center
                    font_size: 28px
                    font_weight: normal
                    text_padding_bottom: 5px
                    text_color_zero: var(--picard-dark-blue)
                    text_color_non_zero: var(--picard-blue)
                  entity: sensor.lights_on
                  show_state: true
                  show_label: false
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-dense
                    - cb-lcars-animate-press
                  variables:
                    card_active_color: var(--picard-light-blue)
                    card_inactive_color: var(--picard-dark-gray)
                  state:
                    - id: state_on
                      value: LIGHTS
                    - id: state_off
                      operator: '!='
                      value: LIGHTS
                  entity: input_select.lcars_ui_page_selector
                  label: lights
                  tap_action:
                    action: call-service
                    service: input_select.select_option
                    data:
                      entity_id: input_select.lcars_ui_page_selector
                      option: LIGHTS
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled-dense
                  variables:
                    text_justify: center
                    font_size: 28px
                    font_weight: normal
                    text_padding_bottom: 5px
                  entity: climate.living_room
                  show_state: false
                  show_name: false
                  show_label: true
                  label: |
                    [[[
                        const state = states['climate.living_room'].attributes.temperature;
                        const roundedValue = Math.round(parseFloat(state));

                        // Check if the roundedValue is NaN
                        if (isNaN(roundedValue)) {
                          return 'FF';
                        }
                        
                        const formattedValue = roundedValue.toString().padStart(2, '0');
                        return formattedValue;
                    ]]]
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-dense
                    - cb-lcars-animate-press
                  variables:
                    card_active_color: var(--picard-light-blue)
                    card_inactive_color: var(--picard-dark-gray)
                  state:
                    - id: state_on
                      value: ENVIRONMENTAL
                    - id: state_off
                      operator: '!='
                      value: ENVIRONMENTAL
                  entity: input_select.lcars_ui_page_selector
                  label: environmental
                  tap_action:
                    action: call-service
                    service: input_select.select_option
                    data:
                      entity_id: input_select.lcars_ui_page_selector
                      option: ENVIRONMENTAL
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  label: esc
                  tap_action:
                    action: navigate
                    navigation_path: /dashboard-lcars/scratch2
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled
                  variables:
                    card_inactive_background_color: var(--picard-dark-gray)
                  entity: input_boolean.lcars_ui_debug
                  show_state: true
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled-dense
                  variables:
                    text_justify: center
                    font_size: 28px
                    font_weight: normal
                    text_padding_bottom: 5px
                    text_color_zero: var(--success-color)
                    text_color_non_zero: var(--error-color)
                  entity: sensor.contact_sensors_open
                  show_state: false
                  show_name: false
                  show_label: true
                  label: |
                    [[[
                        const state = states['sensor.contact_sensors_open'].state;
                        const roundedValue = Math.round(parseFloat(state));
                        const formattedValue = roundedValue.toString().padStart(2, '0');
                        return formattedValue;
                    ]]]
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-dense
                    - cb-lcars-animate-press
                  variables:
                    card_active_color: var(--picard-light-blue)
                    card_inactive_color: var(--picard-dark-gray)
                  state:
                    - id: state_on
                      value: SECURITY
                    - id: state_off
                      operator: '!='
                      value: SECURITY
                  entity: input_select.lcars_ui_page_selector
                  label: security
                  tap_action:
                    action: call-service
                    service: input_select.select_option
                    data:
                      entity_id: input_select.lcars_ui_page_selector
                      option: SECURITY
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled-dense
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-dense
                    - cb-lcars-animate-press
                  variables:
                    card_active_color: var(--picard-light-blue)
                    card_inactive_color: var(--picard-dark-gray)
                  state:
                    - id: state_on
                      value: COMMS
                    - id: state_off
                      operator: '!='
                      value: COMSS
                  entity: input_select.lcars_ui_page_selector
                  label: comms
                  tap_action:
                    action: call-service
                    service: input_select.select_option
                    data:
                      entity_id: input_select.lcars_ui_page_selector
                      option: COMMS
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled-dense
                  variables:
                    text_justify: center
                    font_size: 28px
                    font_weight: normal
                    text_padding_bottom: 5px
                    text_color_zero: var(--error-color)
                    text_color_non_zero: var(--picard-starlight)
                  entity: sensor.cats_home
                  show_state: false
                  show_name: false
                  show_label: true
                  label: |
                    [[[
                        const state = states['sensor.cats_home'].state;
                        const roundedValue = Math.round(parseFloat(state));
                        const formattedValue = roundedValue.toString().padStart(2, '0');
                        return formattedValue;
                    ]]]
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-dense
                    - cb-lcars-animate-press
                  variables:
                    card_active_color: var(--picard-light-blue)
                    card_inactive_color: var(--picard-dark-gray)
                  state:
                    - id: state_on
                      value: CATS
                    - id: state_off
                      operator: '!='
                      value: CATS
                  entity: input_select.lcars_ui_page_selector
                  label: felines
                  tap_action:
                    action: call-service
                    service: input_select.select_option
                    data:
                      entity_id: input_select.lcars_ui_page_selector
                      option: CATS
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                - type: custom:gap-card
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-dense
                    - cb-lcars-animate-press
                  variables:
                    card_active_color: var(--picard-dark-orange)
                    card_inactive_color: var(--picard-dark-gray)
                  state:
                    - id: state_on
                      value: ENGINEERING
                    - id: state_off
                      operator: '!='
                      value: ENGINEERING
                  entity: input_select.lcars_ui_page_selector
                  label: engineering
                  tap_action:
                    action: call-service
                    service: input_select.select_option
                    data:
                      entity_id: input_select.lcars_ui_page_selector
                      option: ENGINEERING
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-filled-dense
                  variables:
                    text_justify: center
                    font_size: 28px
                    font_weight: normal
                    text_padding_bottom: 5px
                    text_color_zero: var(--picard-dark-blue)
                    text_color_non_zero: var(--picard-blue)
                  entity: sensor.lights_on
                  show_state: true
                  show_label: false
                - type: custom:button-card
                  template:
                    - cb-lcars-button-picard-dense
                    - cb-lcars-animate-press
                  variables:
                    card_active_color: var(--picard-light-blue)
                    card_inactive_color: var(--picard-dark-gray)
                  state:
                    - id: state_on
                      value: LIGHTS II
                    - id: state_off
                      operator: '!='
                      value: LIGHTS II
                  entity: input_select.lcars_ui_page_selector
                  label: lights ii
                  tap_action:
                    action: call-service
                    service: input_select.select_option
                    data:
                      entity_id: input_select.lcars_ui_page_selector
                      option: LIGHTS II
                  hold_action:
                    action: none
                  double_tap_action:
                    action: none
            layout:
              grid-area: left-sidebar
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
            variables:
              grid_X: 3
              grid_Y: 3
              grid_buttons:
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-color
                  variables:
                    card_active_background_color: blue
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-icon
                  show_icon: true
                  variables:
                    card_active_background_color: yellow
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-icon-color
                  show_icon: true
                  variables:
                    card_active_background_color: green
                    icon_active_background_color: white
                    icon_active_color: red
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-icon
                  show_icon: true
                  variables:
                    card_active_background_color: yellow
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-lozenge
                  show_icon: false
                  variables:
                    card_active_background_color: cyan
                  template:
                    - cb-lcars-lozenge
                - show_icon: true
                  icon: si:startrek
                  variables:
                    icon_active_color: red
                    icon_inactive_color: blue
                    icon_active_background_color: var(--picard-blue)
                    icon_inactive_background_color: transparent
                    card_active_color: var(--picard-green)
                    card_inactive_color: var(--error-color)
                    card_inactive_background_color: var(--lcars-ui-secondary)
                    card_active_background_color: var(--picard-starlight)
                    lcars_color: var(--error-color)
                    card_width: 180px
                    card_min_height: 45px
                    card_height: null
                  entity: input_boolean.enable_verbal_notifications
                  label: tts alerts
          - type: custom:button-card
            template:
              - cb-lcars-functions
            variables:
              grid_buttons2: []
              grid_buttons:
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-color
                  variables:
                    card_active_background_color: blue
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-icon
                  show_icon: true
                  variables:
                    card_active_background_color: yellow
                    card_height: null
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-icon-color
                  show_icon: true
                  size: 45px
                  variables:
                    card_active_background_color: green
                    icon_active_background_color: white
                    icon_active_color: red
                    card_height: null
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-icon
                  show_icon: true
                  variables:
                    card_height: null
                    card_active_background_color: yellow
                - entity: input_boolean.enable_verbal_notifications
                  label: TTS-lozenge
                  show_icon: true
                  variables:
                    card_active_background_color: cyan
                    card_height: null
                  template:
                    - cb-lcars-lozenge-right
                - entity: light.tv
                  show_icon: true
                  variables:
                    card_height: null
              grid_X: 3
              grid_Y: 3
              grid_template_columns: null
              grid_auto_rows: null
              grid_gap: 5px
              card_background: |
                [[[
                  if (states['input_boolean.lcars_ui_debug'].state === 'on') {
                    return variables.__get_random_css_color();
                  } else {
                    return 'transparent';
                  }
                ]]]
              button:
                type: custom:button-card
                template:
                  - cb-lcars-button-picard-filled-dense
                  - cb-lcars-button-picard-label-se
                entity: null
                name: null
                state: null
                icon: null
                size: 30px
                label: |
                  [[[  
                      return  (((Math.floor(Math.random() * 256).toString(16).padStart(2, '0')) + "-" + (Math.floor(Math.random() * 4096).toString(16).padStart(3, '0'))))
                  ]]]
                show_icon: false
                show_name: false
                show_state: false
                show_label: true
                variables:
                  card_width: 180px
                  card_min_height: 45px
                  card_height: 45px
                  font_size: null
                  card_active_color: var(--lcars-ui-secondary)
                  card_active_background_color: var(--picard-cyan)
                  card_inactive_color: var(--lcars-ui-primary)
                  card_inactive_background_color: var(--lcars-ui-primary)
                  lcars_color: null
                  icon_active_color: null
                  icon_inactive_color: null
                  icon_active_background_color: null
                  icon_inactive_background_color: null
                  icon_box_size: 35px
                  icon_size: 24px
              y_total_cards: '[[[ return variables.grid_X * variables.grid_Y; ]]]'
              z_card_width: >
                [[[ return variables.card_width || "calc((" +

                variables.button.variables.card_width + " + " +
                variables.grid_gap + ") * " + variables.grid_X + ")";

                ]]]
              z_card_height: >
                [[[ return variables.card_height || "calc( " +

                "(" + variables.button.variables.card_height + " + " +
                variables.grid_gap + ") " + 

                " * " +

                "( " + variables.y_total_cards + " / " + variables.grid_X +
                "))";

                ]]]
            styles:
              card:
                - background: '[[[ return variables.card_background; ]]]'
                - height: '[[[ return variables.z_card_height ]]]'
                - width: '[[[ return variables.z_card_width ]]]'
                - border-radius: 0 !important
              custom_fields:
                button_grid:
                  - position: absolute
                  - top: 0px
                  - left: 0px
            custom_fields:
              button_grid:
                card:
                  type: custom:layout-card
                  layout_type: custom:grid-layout
                  layout:
                    grid-template-columns: >-
                      [[[ return variables.grid_template_columns || "repeat(" +
                      variables.grid_X + ", " +
                      variables.button.variables.card_width + ")"; ]]]
                    grid-auto-rows: >-
                      [[[ return variables.grid_auto_rows ||
                      variables.button.variables.card_height; ]]]
                    grid-gap: '[[[ return variables.grid_gap; ]]]'
                    card_margin: 0
                    padding: 0
                    margin: '-4px -4px 0px -4px'
                  cards: |
                    [[[
                      let resultArray = [];

                      for (let x = 1; x <= variables.y_total_cards; x++) {
                        let cardObject = variables.grid_buttons && variables.grid_buttons[x-1] ? variables.grid_buttons[x-1] : variables.button;

                        let defaultCard = variables.button;
                        let defaultVariables = variables.button.variables;
                        cardObject = {...defaultCard, ...cardObject};
                        cardObject.variables = { ...defaultVariables, ...cardObject.variables}
                        
                        
                        let additionalObject = {
                          view_layout: {
                            show: '[[[ return variables.y_total_cards >= x ? "always" : "never"; ]]]'
                          }
                        };
                        resultArray.push({...additionalObject, ...cardObject});
                      }
                      return resultArray;
                    ]]]
          - type: custom:button-card
            template: cb-lcars-button-base
            entity: light.tv
            show_name: true
            show_icon: true
            show_label: true
            label: shiiit
            variables:
              font_weight: normal
              font_size: 22px
              text_color: black
              text_color_on: black
              text_color_off: black
              border_top: 0px
              border_left: 0px
              border_right: 0px
              border_bottom: 0px
              align_items: center
              text_padding_top: 0px
              text_padding_left: 10px
              text_padding_right: 10px
              text_padding_bottom: 0px
              text_color_hvac_heat: var(--picard-pale-orange)
              text_color_hvac_cool: var(--picard-blue)
              text_color_hvac_other: var(--picard-black-cherry)
              text_color_zero: var(--picard-green)
              text_color_non_zero: var(--picard-blue)
            size: 45px
            styles:
              grid:
                - grid-template-areas: '"n i" "s i" "l i"'
                - grid-template-columns: 1fr 1fr
            state:
              - value: heat
                id: state_heat
                styles:
                  card:
                    - background-color: '[[[ return variables.text_color_hvac_heat; ]]]'
                  state:
                    - color: '[[[ return variables.text_color_on; ]]]'
                  label:
                    - color: '[[[ return variables.text_color_on; ]]]'
              - value: cool
                id: state_cool
                styles:
                  card:
                    - background-color: '[[[ return variables.text_color_hvac_cool; ]]]'
                  state:
                    - color: '[[[ return variables.text_color_on; ]]]'
                  label:
                    - color: '[[[ return variables.text_color_on; ]]]'
              - operator: template
                value: |
                  [[[
                    return entity !== undefined && Number(states[entity.entity_id].state) === 0;
                  ]]]
                id: state_zero
                styles:
                  card:
                    - background-color: '[[[ return variables.text_color_zero; ]]]'
                  state:
                    - color: '[[[ return variables.text_color_off; ]]]'
                  label:
                    - color: '[[[ return variables.text_color_off; ]]]'
              - operator: template
                value: |
                  [[[
                    return entity !== undefined && Number(states[entity.entity_id].state) > 0;
                  ]]]
                id: state_nonzero
                styles:
                  card:
                    - background-color: '[[[ return variables.text_color_non_zero; ]]]'
                  state:
                    - color: '[[[ return variables.text_color_on; ]]]'
                  label:
                    - color: '[[[ return variables.text_color_on; ]]]'
              - value: 'on'
                id: state_on
                styles:
                  card:
                    - background-color: '[[[ return variables.card_active_background_color; ]]]'
                    - border-top: >-
                        [[[ return variables.border_top + " solid " +
                        variables.card_active_color; ]]]
                    - border-left: >-
                        [[[ return variables.border_left + " solid " +
                        variables.card_active_color; ]]]
                    - border-right: >-
                        [[[ return variables.border_right + " solid " +
                        variables.card_active_color; ]]]
                    - border-bottom: >-
                        [[[ return variables.border_bottom + " solid " +
                        variables.card_active_color; ]]]
                  state:
                    - color: '[[[ return variables.text_color_on; ]]]'
                  label:
                    - color: '[[[ return variables.text_color_on; ]]]'
                  icon:
                    - color: >-
                        [[[ return variables.icon_active_color ||
                        variables.icon_color; ]]]
                    - background: >-
                        [[[ return variables.icon_active_background_color ||
                        variables.card_active_background_color; ]]]
              - value: 'off'
                id: state_off
                styles:
                  card:
                    - background-color: '[[[ return variables.card_inactive_background_color; ]]]'
                    - border-top: >-
                        [[[ return variables.border_top + " solid " +
                        variables.card_inactive_color; ]]]
                    - border-left: >-
                        [[[ return variables.border_left + " solid " +
                        variables.card_inactive_color; ]]]
                    - border-right: >-
                        [[[ return variables.border_right + " solid " +
                        variables.card_inactive_color; ]]]
                    - border-bottom: >-
                        [[[ return variables.border_bottom + " solid " +
                        variables.card_inactive_color; ]]]          
                  state:
                    - color: '[[[ return variables.text_color_off; ]]]'
                  label:
                    - color: '[[[ return variables.text_color_off; ]]]'
                  icon:
                    - color: >-
                        [[[ return variables.icon_inactive_color ||
                        variables.icon_color; ]]]
                    - background: >-
                        [[[ return variables.icon_inactive_background_color ||
                        variables.card_inactive_background_color; ]]]
              - operator: default
                id: state_default
                styles:
                  card:
                    - background-color: '[[[ return variables.card_inactive_background_color; ]]]'
                  state:
                    - color: '[[[ return variables.text_color_off; ]]]'
                  label:
                    - color: '[[[ return variables.text_color_off; ]]]'
          - type: custom:button-card
            entity: input_boolean.enable_verbal_notifications
            label: TTS-lozenge
            show_icon: true
            variables:
              card_active_background_color: cyan
              card_height: null
              card_min_height: 45px
            template:
              - cb-lcars-lozenge-right
  - title: scratch2
    path: scratch2
    cards:
      - type: vertical-stack
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.corner_lamp
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: corner lamp
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.floor_lamp
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: floor lamp
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.tv
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: tv
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.fan
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: fan
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.media_lights
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: media lights
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.floor_strip
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: floor strip
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.corner_lamp
              entity_match_header: false
              header_button:
                variables:
                  card:
                    color:
                      background:
                        inactive: var(--picard-dark-gray)
                  text:
                    label:
                      font_size: 22px
              label: corner lamp
              card:
                width: 600px
                height: 55px
              panel:
                height: 45px
                width: 450px
                mode: slider
              entity_match_slider_start: false
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
      - type: vertical-stack
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.vanity
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: vanity
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.bathroom_strip
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: bathroom strip
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
      - type: vertical-stack
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.desk
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: desk
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.office_ceiling
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: office ceiling
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.canvas
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: canvas
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
      - type: vertical-stack
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.overhead
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: kitchen celing
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.counter
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: counter
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
      - type: vertical-stack
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.entryway
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: entryway
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.table
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: table
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.laundry
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: laundry
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
      - type: vertical-stack
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.bed
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: bed
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.wardrobe
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: wardrobe
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.ceiling
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: ceiling
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.pendant
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: pendant
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.bedroom_window
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: window
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
      - type: vertical-stack
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.patio_strip
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: patio strip
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.patio_strip_floor
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: ground strip
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
          - type: custom:button-card
            template:
              - cb-lcars-functions
              - cb-lcars-multimeter
            variables:
              entity: light.patio_twinkles
              entity_match_header: false
              header_button:
                variables:
                  card_inactive_background_color: var(--picard-dark-gray)
                  font_size: 22px
              label: alcove
              card_width: 600px
              card_height: 55px
              panel_height: 45px
              panel_width: 450px
              panel_mode: slider
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
                    gradient_end_color: >-
                      [[[ return
                      variables.__get_light_css_color(variables.entity)  ]]]
      - square: false
        type: grid
        columns: 1
        cards:
          - type: conditional
            conditions:
              - condition: state
                entity: input_select.lcars_ui_page_selector
                state: HOME
            card:
              square: false
              type: grid
              cards:
                - type: custom:clock-weather-card
                  entity: weather.home
                  sun_entity: true
                  weather_icon_type: line
                  forecast_rows: 4
                  time_format: 24
                  hourly_forecast: false
                  hide_today_section: true
                  temperature_sensor: sensor.patio_sensor_temperature
                  card_mod:
                    style: |
                      ha-card {
                        background: none !important;
                      }
                - type: custom:clock-weather-card
                  entity: weather.openweathermap_home_hourly
                  sun_entity: true
                  weather_icon_type: line
                  forecast_rows: 6
                  time_format: 24
                  hourly_forecast: true
                  hide_today_section: true
                  temperature_sensor: sensor.patio_sensor_temperature
                  card_mod:
                    style: |
                      ha-card {
                        background: none !important;
                      }
              columns: 1
        view_layout:
          grid-area: right-sidebar
      - type: custom:button-card
        view_layout:
          grid-area: footer
        styles:
          card:
            - background: transparent
            - height: 130px
            - width: 923px
            - border-radius: 0 !important
          custom_fields:
            button_grid:
              - position: absolute
              - left: 85px
              - bottom: 0px
        custom_fields:
          button_grid:
            card:
              type: custom:button-card
              template:
                - cb-lcars-button-grid
              variables:
                grid_X: 4
                grid_Y: 2
                grid_template_columns: 180px 180px 180px 275px
                grid_auto_rows: 80px 50px
                card_width: 923px
                card_height: 130px
                grid_buttons:
                  - entity: person.dexter
                    show_state: true
                    show_label: false
                    template:
                      - cb-lcars-button-picard-filled
                      - cb-lcars-button-picard-label-se
                      - cb-lcars-animate-press
                      - cb-lcars-actions-more-info
                    variables:
                      card_height: 80px
                  - variables:
                      card_height: 80px
                  - variables:
                      card_height: 80px
                  - variables:
                      card_width: 275px
                      card_height: 80px
                  - entity: person.dexter
                    label: the dex
                    template:
                      - cb-lcars-button-picard-filled
                      - cb-lcars-button-picard-label-se
                      - cb-lcars-animate-press
                      - cb-lcars-actions-more-info
                    state:
                      - id: state_on
                        value: home
                      - id: state_off
                        value: not_home
                    variables:
                      card_inactive_background_color: var(--warning-color)
                      card_active_background_color: var(--picard-blue)
                  - entity: person.luna
                    label: luna
                    template:
                      - cb-lcars-button-picard-filled
                      - cb-lcars-button-picard-label-se
                      - cb-lcars-animate-press
                      - cb-lcars-actions-more-info
                    state:
                      - id: state_on
                        value: home
                      - id: state_off
                        value: not_home
                    variables:
                      card_inactive_background_color: var(--lcars-ui-secondary)
                      card_active_background_color: var(--warning-color)
                  - show_icon: true
                    icon: none
                    size: 24px
                    variables:
                      icon_active_color: transparent
                      icon_inactive_color: transparent
                      icon_active_background_color: var(--picard-blue)
                      icon_inactive_background_color: transparent
                      card_active_color: var(--picard-green)
                      card_inactive_color: var(--error-color)
                      card_inactive_background_color: var(--lcars-ui-secondary)
                      card_active_background_color: var(--picard-starlight)
                      lcars_color: var(--error-color)
                      card_width: 180px
                      card_min_height: 45px
                      card_height: null
                    entity: input_boolean.enable_verbal_notifications
                    label: tts alerts
                  - entity: switch.adguard_home_protection
                    label: ad-guard
                    variables:
                      card_width: 275px
                      card_active_background_color: var(--lcars-ui-secondary)
                      card_inactive_background_color: var(--error-color)
      - type: custom:button-card
        template:
          - cb-lcars-button-grid
        variables:
          grid:
            X: 1
            'Y': 3
            buttons:
              - entity: light.desk
                template: cb-lcars-multimeter
                show_label: false
              - entity: light.tv
          button:
            template:
              - cb-lcars-multimeter
            variables:
              entity_match_header: false
              header_button:
                variables:
                  card:
                    color:
                      background:
                        inactive: var(--picard-dark-gray)
                  text:
                    label:
                      font_size: 22px
              card:
                width: 600px
                height: 55px
              panel:
                height: 45px
                width: 450px
                mode: slider
              entity_match_slider_start: false
              slider:
                meter:
                  variables:
                    gradient_start_color: var(--picard-blue)
      - type: custom:button-card
        view_layout:
          grid-area: header-right
        styles:
          card:
            - background: transparent
            - width: 300px
            - height: 130px
            - border-radius: 0 !important
          custom_fields:
            clock:
              - position: absolute
              - top: 10px
              - right: 0px
              - width: 315px
              - height: 115px
        custom_fields:
          clock:
            card:
              type: custom:clock-weather-card
              entity: weather.home
              sun_entity: true
              weather_icon_type: line
              forecast_rows: 0
              time_format: 24
              hourly_forecast: false
              hide_today_section: false
              hide_forecast_section: true
              time_pattern: HH:mm:ss
              date_pattern: yyyy-MM-dd [cccc]
              temperature_sensor: sensor.patio_sensor_temperature
              humidity_sensor: sensor.patio_sensor_humidity
              show_humidity: false
              card_mod:
                style: |
                  ha-card {
                    background: none !important;
                    color: var(--picard-pale-orange);
                    
                    
                  }
                  .card-content {
                    padding-top: 0;
                    padding-bottom: 0;
                    padding-right: 0;
                    font-weight: 200;
                  }
    type: custom:vertical-layout
  - title: grid-test
    path: grid-test
    type: sections
    sections:
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-grid
              - cb-lcars-card-base
              - cb-lcars-debug
              - cb-lcars-functions
            variables:
              card:
                width: 990px
                height: 400px
              grid:
                auto_calc_X: false
                auto_calc_Y: false
                X: 3
                'Y': 4
          - type: custom:button-card
            template: cb-lcars-label
            show_state: true
            show_label: true
            entity: sensor.time
            variables:
              text:
                state:
                  font_size: 60px
                  font_weight: lighter
                  color:
                    non_zero: var(--picard-pale-orange)
                    'on': null
                  align: center
                  padding:
                    left: 40px
                    bottom: 10px
              card:
                height: 60px
                width: 490px
                border:
                  left:
                    size: 80px
                  right:
                    size: 40px
                  color: var(--lcars-card-bottom-color)
          - type: custom:button-card
            template:
              - cb-lcars-button-base
            entity: light.tv
            variables:
              entity_match_button: false
              card:
                color:
                  background:
                    active: >
                      [[[ return  variables.entity_match_button ?
                      variables.entity_color : "var(--error-color)" ]]]
      - type: grid
        cards: []
      - type: grid
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled
              - cb-lcars-actions-hue
            entity: light.living_room_ambient
            show_name: 'yes'
            variables:
              action:
                hue_api: lcars-hue-living_room
          - type: custom:hue-like-light-card
            entity: light.living_room
            scenes: null
            apiId: lcars-hue-living_room
            isVisible: false
  - title: home
    path: home
    type: custom:grid-layout
    layout:
      margin: '-4px -4px 0px -4px'
      card_margin: 0
      padding: 0
      grid-template-columns: 220px 923px 300px
      grid-template-rows: 70px 110px 502px 90px 130px
      grid-template-areas: |
        "header-left header header-right"
        "header-left content-panel content-panel"
        "left-sidebar content-panel content-panel"
        "footer-left content-panel content-panel"
        "footer-left footer footer-right"
      grid-gap: 0px
      width: 1443px
      height: 902px
    cards:
      - type: custom:button-card
        template:
          - cb-lcars-base
        styles:
          card:
            - background: transparent
            - height: 220px
            - width: 300px
            - border-radius: 0 !important
          custom_fields:
            outer_elbow:
              - position: absolute
              - left: 0px
              - bottom: 0px
        custom_fields:
          outer_elbow:
            card:
              type: custom:button-card
              template:
                - cb-lcars-footer-picard
              variables:
                card:
                  height: 220px
                  width: 300px
                  border:
                    bottom:
                      left_radius: 160px
                    inner:
                      factor: 1.42
                lcars:
                  border:
                    gap: 5px
                lcars_outer:
                  card:
                    color: var(--lcars-ui-primary)
                    border:
                      bottom:
                        size: 45px
                      left:
                        size: 45px
                lcars_inner:
                  card:
                    color: var(--lcars-card-bottom-color)
                    border:
                      inner:
                        factor: 2
                      bottom:
                        size: 80px
                      left:
                        size: 165px
              show_label: false
              label: ''
        view_layout:
          grid-area: footer-left
      - type: custom:layout-card
        layout_type: custom:grid-layout
        cards:
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
            variables:
              text:
                label:
                  justify: center
                  font_size: 28px
                  font_weight: normal
                  padding:
                    bottom: 5px
            entity: climate.living_room
            show_state: false
            show_name: false
            show_label: true
            label: |
              [[[
                  const state = states['sensor.home_average_temperature_template'].state;
                  const roundedValue = Math.round(parseFloat(state));
                  const formattedValue = roundedValue.toString().padStart(2, '0');
                  return formattedValue;
              ]]]
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
              - cb-lcars-animate-press
            variables:
              card:
                color:
                  active: var(--picard-light-blue)
                  inactive: var(--picard-dark-gray)
                  background:
                    active: var(--picard-light-blue)
                    inactive: var(--picard-dark-gray)
            state:
              - id: state_on
                value: HOME
              - id: state_off
                operator: '!='
                value: HOME
            entity: input_select.lcars_ui_page_selector
            label: home
            tap_action:
              action: call-service
              service: input_select.select_option
              data:
                entity_id: input_select.lcars_ui_page_selector
                option: HOME
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
            variables:
              text:
                state:
                  justify: center
                  font_size: 28px
                  font_weight: normal
                  padding:
                    bottom: 5px
                  color:
                    zero: var(--picard-dark-blue)
                    non_zero: var(--picard-blue)
            entity: sensor.lights_on
            show_state: true
            show_label: false
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-dense
              - cb-lcars-animate-press
            variables:
              card:
                color:
                  active: var(--picard-light-blue)
                  inactive: var(--picard-dark-gray)
            state:
              - id: state_on
                value: LIGHTS
              - id: state_off
                operator: '!='
                value: LIGHTS
            entity: input_select.lcars_ui_page_selector
            label: lights
            tap_action:
              action: call-service
              service: input_select.select_option
              data:
                entity_id: input_select.lcars_ui_page_selector
                option: LIGHTS
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
            variables:
              text:
                label:
                  justify: center
                  font_size: 28px
                  font_weight: normal
                  padding:
                    bottom: 5px
            entity: climate.living_room
            show_state: false
            show_name: false
            show_label: true
            label: |
              [[[
                  const state = states['climate.living_room'].attributes.temperature;
                  const roundedValue = Math.round(parseFloat(state));

                  // Check if the roundedValue is NaN
                  if (isNaN(roundedValue)) {
                    return 'FF';
                  }
                  
                  const formattedValue = roundedValue.toString().padStart(2, '0');
                  return formattedValue;
              ]]]
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-dense
              - cb-lcars-animate-press
            variables:
              card:
                color:
                  active: var(--picard-light-blue)
                  inactive: var(--picard-dark-gray)
            state:
              - id: state_on
                value: ENVIRONMENTAL
              - id: state_off
                operator: '!='
                value: ENVIRONMENTAL
            entity: input_select.lcars_ui_page_selector
            label: environmental
            tap_action:
              action: call-service
              service: input_select.select_option
              data:
                entity_id: input_select.lcars_ui_page_selector
                option: ENVIRONMENTAL
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled
            label: esc
            tap_action:
              action: navigate
              navigation_path: /dashboard-lcars/scratch2
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled
            variables:
              card_inactive_background_color: var(--picard-dark-gray)
            entity: input_boolean.lcars_ui_debug
            show_state: true
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
            variables:
              text:
                label:
                  justify: center
                  font_size: 28px
                  font_weight: normal
                  padding:
                    bottom: 5px
                state:
                  color:
                    zero: var(--success-color)
                    non_zero: var(--error-color)
            entity: sensor.contact_sensors_open
            show_state: false
            show_name: false
            show_label: true
            label: |
              [[[
                  const state = states['sensor.contact_sensors_open'].state;
                  const roundedValue = Math.round(parseFloat(state));
                  const formattedValue = roundedValue.toString().padStart(2, '0');
                  return formattedValue;
              ]]]
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-dense
              - cb-lcars-animate-press
            variables:
              card:
                color:
                  active: var(--picard-light-blue)
                  inactive: var(--picard-dark-gray)
            state:
              - id: state_on
                value: SECURITY
              - id: state_off
                operator: '!='
                value: SECURITY
            entity: input_select.lcars_ui_page_selector
            label: security
            tap_action:
              action: call-service
              service: input_select.select_option
              data:
                entity_id: input_select.lcars_ui_page_selector
                option: SECURITY
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-dense
              - cb-lcars-animate-press
            variables:
              card:
                color:
                  active: var(--picard-light-blue)
                  inactive: var(--picard-dark-gray)
            state:
              - id: state_on
                value: COMMS
              - id: state_off
                operator: '!='
                value: COMMS
            entity: input_select.lcars_ui_page_selector
            label: comms
            tap_action:
              action: call-service
              service: input_select.select_option
              data:
                entity_id: input_select.lcars_ui_page_selector
                option: COMMS
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
            variables:
              text:
                label:
                  justify: center
                  font_size: 28px
                  font_weight: normal
                  padding:
                    bottom: 5px
                state:
                  color:
                    zero: var(--error-color)
                    non_zero: var(--picard-starlight)
            entity: sensor.cats_home
            show_state: false
            show_name: false
            show_label: true
            label: |
              [[[
                  const state = states['sensor.cats_home'].state;
                  const roundedValue = Math.round(parseFloat(state));
                  const formattedValue = roundedValue.toString().padStart(2, '0');
                  return formattedValue;
              ]]]
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-dense
              - cb-lcars-animate-press
            variables:
              card:
                color:
                  active: var(--picard-light-blue)
                  inactive: var(--picard-dark-gray)
            state:
              - id: state_on
                value: CATS
              - id: state_off
                operator: '!='
                value: CATS
            entity: input_select.lcars_ui_page_selector
            label: felines
            tap_action:
              action: call-service
              service: input_select.select_option
              data:
                entity_id: input_select.lcars_ui_page_selector
                option: CATS
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:gap-card
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-dense
              - cb-lcars-animate-press
            variables:
              card:
                color:
                  active: var(--picard-dark-orange)
                  inactive: var(--picard-dark-gray)
            state:
              - id: state_on
                value: ENGINEERING
              - id: state_off
                operator: '!='
                value: ENGINEERING
            entity: input_select.lcars_ui_page_selector
            label: engineering
            tap_action:
              action: call-service
              service: input_select.select_option
              data:
                entity_id: input_select.lcars_ui_page_selector
                option: ENGINEERING
            hold_action:
              action: none
            double_tap_action:
              action: none
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-filled-dense
            variables:
              text:
                state:
                  justify: center
                  font_size: 28px
                  font_weight: normal
                  padding:
                    bottom: 5px
                  color:
                    zero: var(--picard-dark-blue)
                    non_zero: var(--picard-blue)
            entity: sensor.lights_on
            show_state: true
            show_label: false
          - type: custom:button-card
            template:
              - cb-lcars-button-picard-dense
              - cb-lcars-animate-press
            variables:
              card_active_color: var(--picard-light-blue)
              card_inactive_color: var(--picard-dark-gray)
            state:
              - id: state_on
                value: LIGHTS II
              - id: state_off
                operator: '!='
                value: LIGHTS II
            entity: input_select.lcars_ui_page_selector
            label: lights ii
            tap_action:
              action: call-service
              service: input_select.select_option
              data:
                entity_id: input_select.lcars_ui_page_selector
                option: LIGHTS II
            hold_action:
              action: none
            double_tap_action:
              action: none
        layout:
          grid-template-columns: 52px 1fr
          grid-template-rows: auto
          grid-auto-rows: auto
          card_margin: 0
          padding: 0
          grid-area: left-sidebar
          margin: '-4px -4px 0px -4px'
          grid-column-gap: 0px
      - type: custom:button-card
        view_layout:
          grid-area: header-left
        styles:
          card:
            - background: transparent
            - height: 170px
            - width: 212px
            - border-radius: 0 !important
          custom_fields:
            left_bar:
              - position: absolute
              - left: 0
              - top: 0
            right_bar:
              - position: absolute
              - right: 0
              - top: 0
        custom_fields:
          left_bar:
            card:
              type: custom:button-card
              template:
                - cb-lcars-button-picard-filled
              variables:
                card:
                  height: 175px
                  width: 45px
                  color:
                    background:
                      inactive: var(--lcars-ui-secondary)
          right_bar:
            card:
              type: custom:button-card
              template:
                - cb-lcars-button-picard-filled
              variables:
                card:
                  height: 175px
                  width: 163px
                  color:
                    background:
                      inactive: var(--lcars-card-bottom-color)
      - type: custom:button-card
        view_layout:
          grid-area: footer-right
        styles:
          card:
            - background-color: |
                [[[
                  if (states['input_boolean.lcars_ui_debug'].state === 'on') {
                    return 'rgba(150,0,0,0.3)';
                  } else {
                    return 'transparent';
                  }
                ]]]
            - width: 300px
            - height: 130px
            - border-radius: 0 !important
          custom_fields:
            elbow:
              - position: absolute
              - bottom: 0
              - right: 0
            inner_elbow:
              - position: absolute
              - left: 0px
              - bottom: 0px
        custom_fields:
          inner_elbow:
            card:
              type: custom:button-card
              template:
                - cb-lcars-footer-picard-right
              variables:
                card_height: 115px
                card_width: 200px
                card_inner_border_factor: 1
                card_inner_border_width: 50px
                picard_lcars_outer_color: var(--lcars-ui-secondary)
                picard_lcars_inner_color: transparent
                picard_border_ratio_factor: 1
                card_border_bottom_right_radius: 60px
                picard_border_gap: 4px
                picard_lcars_outer_border_bottom: 5px
                picard_lcars_inner_border_bottom: 5px
                picard_lcars_outer_border_right: 125px
                picard_lcars_inner_border_right: 5px
                picard_lcars_inner_border_factor: 1
                picard_lcars_inner_border_bottom_right_radius: 60px
          elbow:
            card:
              type: custom:button-card
              template:
                - cb-lcars-footer-picard-right
              variables:
                card_height: 175px
                card_width: 500px
                card_border_bottom_right_radius: 80px
                picard_border_gap: 4px
                card_inner_border_factor: 1.15
                card_inner_border_width: 0px
                picard_lcars_inner_color: var(--lcars-card-bottom-color)
                picard_lcars_outer_color: var(--lcars-ui-secondary)
                picard_lcars_outer_border_bottom: 6px
                picard_lcars_inner_border_bottom: 47px
                picard_lcars_outer_border_right: 6px
                picard_lcars_inner_border_right: 85px
                picard_lcars_inner_border_factor: 1.1
      - type: custom:button-card
        view_layout:
          grid-area: footer
        styles:
          card:
            - background: transparent
            - height: 130px
            - width: 923px
            - border-radius: 0 !important
          custom_fields:
            button_grid:
              - position: absolute
              - left: 85px
              - bottom: 0px
        custom_fields:
          button_grid:
            card:
              type: custom:button-card
              template:
                - cb-lcars-button-grid
              variables:
                card:
                  width: 923px
                  height: 130px
                grid:
                  auto_calc_X: false
                  X: 4
                  auto_calc_Y: false
                  'Y': 2
                  template_columns: 180px 180px 180px 275px
                  auto_rows: 80px 50px
                  buttons:
                    - entity: person.dexter
                      show_state: true
                      show_label: false
                      template:
                        - cb-lcars-button-picard-filled
                        - cb-lcars-button-picard-state-se
                        - cb-lcars-animate-press
                        - cb-lcars-actions-more-info
                      state:
                        - id: state_on
                          value: home
                        - id: state_off
                          value: not_home
                      variables:
                        card:
                          height: 80px
                          color:
                            background:
                              active: var(--warning-color)
                              inactive: var(--lcars-red)
                    - variables:
                        card:
                          height: 80px
                    - variables:
                        card:
                          height: 80px
                    - variables:
                        card:
                          width: 275px
                          height: 80px
                    - entity: person.dexter
                      label: the dex
                      template:
                        - cb-lcars-button-picard-filled
                        - cb-lcars-button-picard-label-se
                        - cb-lcars-animate-press
                        - cb-lcars-actions-more-info
                      state:
                        - id: state_on
                          value: home
                        - id: state_off
                          value: not_home
                      variables:
                        card:
                          color:
                            background:
                              active: var(--warning-color)
                              inactive: var(--lcars-red)
                    - entity: person.luna
                      label: luna
                      template:
                        - cb-lcars-button-picard-filled
                        - cb-lcars-button-picard-label-se
                        - cb-lcars-animate-press
                        - cb-lcars-actions-more-info
                      state:
                        - id: state_on
                          value: home
                        - id: state_off
                          value: not_home
                      variables:
                        card:
                          color:
                            background:
                              inactive: var(--lcars-ui-secondary)
                              active: var(--warning-color)
                    - show_icon: true
                      icon: none
                      size: 24px
                      variables:
                        icon:
                          color:
                            active: transparent
                            inactive: transparent
                            background:
                              active: var(--picard-blue)
                              inactive: transparent
                        card:
                          color:
                            active: var(--picard-green)
                            inactive: var(--error-color)
                            background:
                              inactive: var(--lcars-ui-secondary)
                              active: var(--picard-starlight)
                            default: var(--error-color)
                          width: 180px
                          min_height: 45px
                          height: null
                      entity: input_boolean.enable_verbal_notifications
                      label: tts alerts
                    - entity: switch.adguard_home_protection
                      label: ad-guard
                      variables:
                        card:
                          width: 275px
                          color:
                            background:
                              active: var(--lcars-ui-secondary)
                              inactive: var(--error-color)
      - square: false
        type: grid
        columns: 1
        cards:
          - type: conditional
            conditions:
              - condition: state
                entity: input_select.lcars_ui_page_selector
                state: unavailable
            card:
              type: custom:button-card
              styles:
                card:
                  - background-color: |
                      [[[
                        if (states['input_boolean.lcars_ui_debug'].state === 'on') {
                          return 'rgba(0,0,175,0.3)';
                        } else {
                          return 'transparent';
                        }
                      ]]]
                  - height: 702px
                  - width: 1223px
                  - border-radius: 0 !important
          - type: conditional
            conditions:
              - condition: state
                entity: input_select.lcars_ui_page_selector
                state: HOME
            card:
              type: custom:button-card
              template:
                - cb-lcars-functions
                - cb-lcars-card-base
              variables:
                entities:
                  - light.living_room_ambient
                  - light.corner_lamp
                  - light.kitchen
                  - light.bathroom_lights
                  - light.bedroom
                  - light.office_lights
              styles:
                card:
                  - height: 702px
                  - width: 1223px
                  - border-radius: 0 !important
                custom_fields:
                  header_elbow:
                    - position: absolute
                    - left: 0px
                    - top: 106px
                  slider_grid:
                    - position: absolute
                    - bottom: 145px
                    - left: 50px
                  slider_buttons:
                    - position: absolute
                    - bottom: 100px
                    - left: 40px
                  header_label:
                    - position: absolute
                    - top: 20px
                    - right: 20px
              custom_fields:
                header_label:
                  card:
                    type: custom:button-card
                    template: cb-lcars-label
                    label: HOME
                    show_label: true
                    variables:
                      text:
                        label:
                          font_size: 42px
                          font_weight: lighter
                          color:
                            default: var(--picard-pale-orange)
                      card:
                        height: 60px
                        width: 200px
                header_elbow:
                  card:
                    type: custom:button-card
                    template:
                      - cb-lcars-header-callout
                    variables:
                      card:
                        height: 50px
                        min_height: 50px
                        width: 900px
                        border:
                          left:
                            size: 20px
                          top:
                            size: 3px
                          color: var(--picard-light-blue)
                slider_grid:
                  card:
                    type: custom:layout-card
                    layout_type: custom:grid-layout
                    layout:
                      grid-template-columns: repeat(6,100px)
                      grid-auto-rows: auto
                      grid-gap: 50px
                      card_margin: 0
                      padding: 0
                      margin: '-4px -4px 0px -4px'
                    cards:
                      - type: custom:button-card
                        template:
                          - cb-lcars-functions
                          - cb-lcars-slider
                        variables:
                          entity: '[[[ return variables.entities[0] ]]]'
                          card:
                            height: 300px
                            width: 100px
                          entity_match_slider_end: true
                          meter:
                            variables:
                              gradient_start_color: var(--picard-blue)
                              button:
                                variables:
                                  card:
                                    width: 100px
                                    height: 20px
                              grid:
                                gap: 5px
                          slider:
                            variables:
                              mask_color: rgba(0,0,0,0.85)
                      - type: custom:button-card
                        template: cb-lcars-slider
                        variables:
                          entity: '[[[ return variables.entities[1] ]]]'
                          card:
                            height: 300px
                            width: 100px
                          entity_match_slider_end: true
                          meter:
                            variables:
                              gradient_start_color: var(--picard-blue)
                              button:
                                variables:
                                  card:
                                    width: 100px
                                    height: 20px
                              grid:
                                gap: 5px
                          slider:
                            variables:
                              mask_color: rgba(0,0,0,0.85)
                      - type: custom:button-card
                        template: cb-lcars-slider
                        variables:
                          entity: '[[[ return variables.entities[2] ]]]'
                          card:
                            height: 300px
                            width: 100px
                          entity_match_slider_end: true
                          meter:
                            variables:
                              gradient_start_color: var(--picard-blue)
                              button:
                                variables:
                                  card:
                                    width: 100px
                                    height: 20px
                              grid:
                                gap: 5px
                          slider:
                            variables:
                              mask_color: rgba(0,0,0,0.85)
                      - type: custom:button-card
                        template: cb-lcars-slider
                        variables:
                          entity: '[[[ return variables.entities[3] ]]]'
                          card:
                            height: 300px
                            width: 100px
                          entity_match_slider_end: true
                          meter:
                            variables:
                              gradient_start_color: var(--picard-blue)
                              button:
                                variables:
                                  card:
                                    width: 100px
                                    height: 20px
                              grid:
                                gap: 5px
                          slider:
                            variables:
                              mask_color: rgba(0,0,0,0.85)
                      - type: custom:button-card
                        template: cb-lcars-slider
                        variables:
                          entity: '[[[ return variables.entities[4] ]]]'
                          card:
                            height: 300px
                            width: 100px
                          entity_match_slider_end: true
                          meter:
                            variables:
                              gradient_start_color: var(--picard-blue)
                              button:
                                variables:
                                  card:
                                    width: 100px
                                    height: 20px
                              grid:
                                gap: 5px
                          slider:
                            variables:
                              mask_color: rgba(0,0,0,0.85)
                      - type: custom:button-card
                        template: cb-lcars-slider
                        variables:
                          entity: '[[[ return variables.entities[5] ]]]'
                          card:
                            height: 300px
                            width: 100px
                          entity_match_slider_end: true
                          meter:
                            variables:
                              gradient_start_color: var(--picard-blue)
                              button:
                                variables:
                                  card:
                                    width: 100px
                                    height: 20px
                              grid:
                                gap: 5px
                          slider:
                            variables:
                              mask_color: rgba(0,0,0,0.85)
                slider_buttons:
                  card:
                    type: custom:button-card
                    template:
                      - cb-lcars-functions
                      - cb-lcars-button-grid
                    variables:
                      card:
                        height: 50px
                      button:
                        template:
                          - cb-lcars-button-lozenge
                        variables:
                          card:
                            width: 120px
                            color:
                              background:
                                active: var(--button-card-light-color)
                      grid:
                        X: 6
                        'Y': 1
                        gap: 30px
                        buttons:
                          - entity: '[[[ return variables.entities[0] ]]]'
                            label: LR-AMB
                          - entity: '[[[ return variables.entities[1] ]]]'
                            label: corner
                          - entity: '[[[ return variables.entities[2] ]]]'
                            label: kitchen
                          - entity: '[[[ return variables.entities[3] ]]]'
                            label: bathroom
                          - entity: '[[[ return variables.entities[4] ]]]'
                            label: bedroom
                          - entity: '[[[ return variables.entities[5] ]]]'
                            label: office
          - type: conditional
            conditions:
              - condition: state
                entity: input_select.lcars_ui_page_selector
                state: SECURITY
            card:
              type: custom:button-card
              styles:
                card:
                  - background-color: |
                      [[[
                        if (states['input_boolean.lcars_ui_debug'].state === 'on') {
                          return 'rgba(150,0,0,0.3)';
                        } else {
                          return 'transparent';
                        }
                      ]]]
                  - height: 702px
                  - width: 1155px
                  - border-radius: 0 !important
                custom_fields:
                  frigate:
                    - width: 700px
                    - position: absolute
                    - left: 40px
                    - top: 50px
                    - z-index: -1
                  notification_panel:
                    - position: absolute
                    - left: 790px
                    - top: 95px
                  front_door_panel:
                    - position: absolute
                    - left: 790px
                    - top: 170px
                  living_room_panel:
                    - position: absolute
                    - left: 790px
                    - top: 250px
                  office_panel:
                    - position: absolute
                    - left: 790px
                    - top: 330px
              custom_fields:
                notification_panel:
                  card:
                    type: custom:button-card
                    template: cb-lcars-multimeter
                    variables:
                      panel_mode: icons
                      card_width: 360px
                      card_height: 55px
                      panel_width: 200px
                      panel_height: 45px
                      entity: automation.notifications_android_tv_patio_all_motion
                      label: alerts
                      icon_grid:
                        variables:
                          grid_X: 3
                          button:
                            card_height: 40px
                            card_min_height: 40px
                            variables:
                              icon_inactive_background_color: var(--warning-color)
                              icon_active_background_color: var(--picard-blue)
                              card_inactive_background_color: var(--warning-color)
                              card_active_background_color: var(--picard-blue)
                          grid_buttons:
                            - entity: >-
                                automation.notifications_android_tv_patio_all_motion
                              icon: mdi:television
                            - entity: automation.test_frigate_notification
                              icon: mdi:cellphone
                            - entity: automation.notifications_patio_gate
                              icon: mdi:gate-alert
                front_door_panel:
                  card:
                    type: custom:button-card
                    template: cb-lcars-multimeter
                    variables:
                      panel_mode: icons
                      card_width: 360px
                      card_height: 55px
                      panel_width: 200px
                      panel_height: 45px
                      entity: switch.front_door_recordings
                      label: front door
                      header_button:
                        variables:
                          card_active_background_color: var(--picard-starlight)
                          card_inactive_background_color: var(--error-color)
                      icon_grid:
                        variables:
                          grid_X: 4
                          button:
                            card_height: 40px
                            card_min_height: 40px
                            variables:
                              icon_inactive_background_color: var(--warning-color)
                              icon_active_background_color: var(--picard-cyan)
                              card_inactive_background_color: var(--warning-color)
                              card_active_background_color: var(--picard-cyan)
                          grid_buttons:
                            - entity: switch.front_door_recordings
                            - entity: switch.front_door_detect
                            - entity: switch.front_door_snapshots
                            - entity: switch.front_door_push_notifications
                              variables:
                                icon_inactive_background_color: var(--picard-dark-blue)
                                icon_active_background_color: var(--picard-blue)
                                card_inactive_background_color: var(--picard-dark-blue)
                                card_active_background_color: var(--picard-blue)
                office_panel:
                  card:
                    type: custom:button-card
                    template: cb-lcars-multimeter
                    variables:
                      panel_mode: icons
                      card_width: 360px
                      card_height: 55px
                      panel_width: 200px
                      panel_height: 45px
                      entity: switch.office_recordings
                      label: office
                      icon_grid:
                        variables:
                          grid_X: 4
                          button:
                            card_height: 40px
                            card_min_height: 40px
                            variables:
                              icon_inactive_background_color: var(--warning-color)
                              icon_active_background_color: var(--picard-blue)
                              card_inactive_background_color: var(--warning-color)
                              card_active_background_color: var(--picard-blue)
                          grid_buttons:
                            - entity: switch.office_recordings
                            - entity: switch.office_detect
                            - entity: switch.office_snapshots
                            - entity: switch.office_push_notifications
                              variables:
                                icon_inactive_background_color: var(--picard-dark-blue)
                                icon_active_background_color: var(--picard-blue)
                                card_inactive_background_color: var(--picard-dark-blue)
                                card_active_background_color: var(--picard-blue)
                living_room_panel:
                  card:
                    type: custom:button-card
                    template: cb-lcars-multimeter
                    variables:
                      panel_mode: icons
                      card_width: 360px
                      card_height: 55px
                      panel_width: 200px
                      panel_height: 45px
                      entity: switch.living_room_recordings
                      label: living room
                      icon_grid:
                        variables:
                          grid_X: 4
                          button:
                            card_height: 40px
                            card_min_height: 40px
                            variables:
                              icon_inactive_background_color: var(--warning-color)
                              icon_active_background_color: var(--picard-blue)
                              card_inactive_background_color: var(--warning-color)
                              card_active_background_color: var(--picard-blue)
                          grid_buttons:
                            - entity: switch.living_room_recordings
                            - entity: switch.living_room_detect
                            - entity: switch.living_room_snapshots
                            - entity: switch.living_room_push_notifications
                              variables:
                                icon_inactive_background_color: var(--picard-dark-blue)
                                icon_active_background_color: var(--picard-blue)
                                card_inactive_background_color: var(--picard-dark-blue)
                                card_active_background_color: var(--picard-blue)
                frigate:
                  card:
                    type: custom:frigate-card
                    cameras:
                      - go2rtc:
                          modes:
                            - webrtc
                          stream: front_door_sub
                        camera_entity: camera.front_door
                        title: Front Door
                        live_provider: go2rtc
                        dependencies:
                          cameras:
                            - front_door_hd
                      - hide: true
                        camera_entity: camera.front_door
                        id: front_door_hd
                        title: Front Door HD
                        go2rtc:
                          stream: front_door
                          modes:
                            - webrtc
                        live_provider: go2rtc
                      - go2rtc:
                          modes:
                            - webrtc
                          stream: living_room_sub
                        camera_entity: camera.living_room
                        title: Living Room
                        live_provider: go2rtc
                        dependencies:
                          cameras:
                            - living_room_hd
                      - hide: true
                        camera_entity: camera.living_room
                        id: living_room_hd
                        title: Living Room HD
                        go2rtc:
                          stream: living_room
                          modes:
                            - webrtc
                        live_provider: go2rtc
                      - go2rtc:
                          modes:
                            - webrtc
                          stream: office_sub
                        camera_entity: camera.office
                        title: Office
                        live_provider: go2rtc
                        dependencies:
                          cameras:
                            - office_hd
                      - hide: true
                        camera_entity: camera.office
                        id: office_hd
                        title: Office HD
                        go2rtc:
                          stream: office
                          modes:
                            - webrtc
                        live_provider: go2rtc
                    view:
                      scan:
                        enabled: false
                      default: live
                      dark_mode: 'on'
                    live:
                      preload: false
                      controls:
                        thumbnails:
                          mode: below
                          show_details: false
                        timeline:
                          mode: none
                          style: stack
                        title:
                          duration_seconds: 5
                          mode: popup-bottom-right
                    timeline:
                      controls:
                        thumbnails:
                          mode: below
                      show_recordings: false
                    menu:
                      style: hidden
                      position: top
                      alignment: top
                      buttons:
                        mute:
                          enabled: true
                        substreams:
                          icon: mdi:high-definition-box
                        recordings:
                          enabled: true
                        microphone:
                          enabled: true
                    elements:
                      - type: custom:frigate-card-conditional
                        conditions:
                          camera:
                            - camera.front_door
                        elements:
                          - type: custom:frigate-card-menu-submenu
                            priority: 100
                            icon: mdi:cog
                            items:
                              - title: Detect
                                entity: switch.front_door_detect
                                tap_action:
                                  action: toggle
                              - title: Recordings
                                entity: switch.front_door_recordings
                                tap_action:
                                  action: toggle
                              - title: Snapshots
                                entity: switch.front_door_snapshots
                                tap_action:
                                  action: toggle
                      - type: custom:frigate-card-conditional
                        conditions:
                          camera:
                            - camera.living_room
                        elements:
                          - type: custom:frigate-card-menu-submenu
                            priority: 100
                            icon: mdi:cog
                            items:
                              - title: Detect
                                entity: switch.living_room_detect
                                tap_action:
                                  action: toggle
                              - title: Recordings
                                entity: switch.living_room_recordings
                                tap_action:
                                  action: toggle
                              - title: Snapshots
                                entity: switch.living_room_snapshots
                                tap_action:
                                  action: toggle
                    media_gallery:
                      controls:
                        thumbnails:
                          show_details: false
                          size: 75
                          show_timeline_control: false
                          show_download_control: false
                          show_favorite_control: false
                        filter:
                          mode: none
                    media_viewer:
                      controls:
                        thumbnails:
                          mode: below
                        timeline:
                          mode: below
                          style: stack
                    dimensions:
                      aspect_ratio_mode: dynamic
                    view_layout:
                      position: main
                    card_mod:
                      style: |
                        ha-card {
                          background: none !important;
                        }
          - type: conditional
            conditions:
              - condition: state
                entity: input_select.lcars_ui_page_selector
                state: LIGHTS
            card:
              type: custom:layout-card
              layout_type: custom:grid-layout
              cards:
                - type: horizontal-stack
                  cards:
                    - square: false
                      type: grid
                      columns: 1
                      cards:
                        - type: custom:layout-card
                          layout_type: custom:grid-layout
                          cards:
                            - type: custom:gap-card
                            - type: custom:button-card
                              template: cb-lcars-slider
                              variables:
                                entity: light.desk
                                card_height: 155px
                                card_width: 60px
                                button_width: 60px
                                button_height: 10px
                                button_gap: 5px
                            - type: custom:my-slider-v2
                              entity: light.corner_lamp
                              mode: brightness
                              flipped: false
                              vertical: true
                              step: 1
                              allowTapping: false
                              allowSliding: true
                              styles:
                                card:
                                  - height: 155px
                                  - width: 1fr
                                  - background: none
                                progress:
                                  background: var(--lcars-blue)
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                            - type: custom:my-slider-v2
                              entity: light.kitchen
                              mode: brightness
                              flipped: false
                              vertical: true
                              step: 1
                              allowTapping: false
                              allowSliding: true
                              styles:
                                card:
                                  - height: 155px
                                  - width: 1fr
                                  - background: none
                                progress:
                                  background: var(--lcars-blue)
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                            - type: custom:my-slider-v2
                              entity: light.dining
                              mode: brightness
                              flipped: false
                              vertical: true
                              step: 1
                              allowTapping: false
                              allowSliding: true
                              styles:
                                card:
                                  - height: 155px
                                  - width: 1fr
                                  - background: none
                                progress:
                                  background: var(--lcars-blue)
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                            - type: custom:my-slider-v2
                              entity: light.hallway
                              mode: brightness
                              flipped: false
                              vertical: true
                              step: 1
                              allowTapping: false
                              allowSliding: true
                              styles:
                                card:
                                  - height: 155px
                                  - width: 1fr
                                  - background: none
                                progress:
                                  background: var(--lcars-blue)
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                          layout:
                            grid-template-columns: 30px repeat(5, 1fr) 30px
                            grid-template-rows: 1fr
                            grid-auto-rows: 1fr
                            margin: '-4px -4px 0px -4px'
                            card_margin: 0
                            padding: 0
                  view_layout:
                    grid-area: child-main-top
                    margin: 0px
                    padding: 0px
                    card_margin: 0px
                - type: horizontal-stack
                  cards:
                    - type: custom:layout-card
                      layout_type: custom:grid-layout
                      layout:
                        grid-template-columns: 30px repeat(5, 2fr) 30px
                        grid-template-rows: auto
                        grid-auto-rows: auto
                        margin: '-4px -4px 0px -4px'
                        card_margin: 0
                        padding: 0
                      margin: '-4px -4px 0px -4px'
                      card_margin: 0
                      padding: 0
                      cards:
                        - type: custom:gap-card
                        - type: custom:button-card
                          template:
                            - cb-lcars-button-picard-filled
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.living_room_ambient'];
                                let cssColor = 'var(--lcars-ui-secondary)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.living_room_ambient
                          label: Living Room
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-button-square
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.corner_lamp'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.corner_lamp
                          label: corner lamp
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-lozenge
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.kitchen'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.kitchen
                          label: kitchen
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-bullet-right
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.dining'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.dining
                          label: dining
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-bullet
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.hallway'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.hallway
                          label: hallway
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:gap-card
                        - type: custom:gap-card
                        - type: custom:button-card
                          template:
                            - cb-lcars-bullet-right
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.media_lights'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.media_lights
                          label: media lights
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-bullet
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.fan'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.fan
                          label: LR Fan
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:gap-card
                        - type: custom:gap-card
                        - type: custom:gap-card
                        - type: custom:gap-card
                        - type: custom:gap-card
                        - type: custom:button-card
                          template:
                            - cb-lcars-lozenge
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.mirror'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.mirror
                          label: mirror
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-lozenge
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.canvas'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.canvas
                          label: canvas
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:gap-card
                        - type: custom:button-card
                          template:
                            - cb-lcars-bullet-right
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                          entity: light.front_door
                          label: front door
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-bullet
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.patio_twinkles'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.patio_twinkles
                          label: twinkles
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:gap-card
                        - type: custom:gap-card
                        - type: custom:button-card
                          template:
                            - cb-lcars-lozenge
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.bathroom'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.bathroom
                          label: bathroom
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-lozenge
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.office'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.office
                          label: Office
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-lozenge
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.bedroom'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.bedroom
                          label: Bedroom
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-bullet-right
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.entryway'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.entryway
                          label: entryway
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                        - type: custom:button-card
                          template:
                            - cb-lcars-bullet
                            - cb-lcars-animate-press
                          variables:
                            card_inactive_background_color: var(--card-background-color)
                            card_active_background_color: |
                              [[[
                                const lightEntity = states['light.patio'];
                                let cssColor = 'var(--card-background-color)'; // default color
                                if (lightEntity && lightEntity.attributes.rgb_color) {
                                  const lightColor = lightEntity.attributes.rgb_color;
                                  cssColor = `rgb(${lightColor.join(', ')})`;
                                }
                                return cssColor;
                              ]]]
                          entity: light.patio
                          label: patio
                          tap_action:
                            action: toggle
                          hold_action:
                            action: more-info
                          double_tap_action:
                            action: toggle
                  view_layout:
                    grid-area: child-main-middle
                    margin: 0px
                    padding: 0px
                    card_margin: 0px
                - type: horizontal-stack
                  cards:
                    - square: false
                      type: grid
                      columns: 1
                      cards:
                        - type: custom:layout-card
                          layout_type: custom:grid-layout
                          cards:
                            - type: custom:gap-card
                            - type: custom:my-slider-v2
                              entity: light.bathroom
                              mode: brightness
                              flipped: true
                              vertical: true
                              step: 1
                              allowTapping: false
                              allowSliding: true
                              styles:
                                card:
                                  - width: 1fr
                                  - height: 155px
                                  - background: none
                                progress:
                                  background: var(--lcars-blue)
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                            - type: custom:my-slider-v2
                              entity: light.office
                              mode: brightness
                              flipped: true
                              vertical: true
                              step: 1
                              allowTapping: false
                              allowSliding: true
                              styles:
                                card:
                                  - width: 1fr
                                  - height: 155px
                                  - background: none
                                progress:
                                  background: var(--lcars-blue)
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                            - type: custom:my-slider-v2
                              entity: light.bedroom
                              mode: brightness
                              flipped: true
                              vertical: true
                              step: 1
                              allowTapping: false
                              allowSliding: true
                              styles:
                                card:
                                  - width: 1fr
                                  - height: 155px
                                  - background: none
                                progress:
                                  background: var(--lcars-blue)
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                            - type: custom:my-slider-v2
                              entity: light.entryway
                              mode: brightness
                              flipped: true
                              vertical: true
                              step: 1
                              allowTapping: false
                              allowSliding: true
                              styles:
                                card:
                                  - width: 1fr
                                  - height: 155px
                                  - background: none
                                progress:
                                  background: var(--lcars-blue)
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                            - type: custom:my-slider-v2
                              entity: light.patio
                              mode: brightness
                              flipped: true
                              vertical: true
                              step: 1
                              allowTapping: false
                              allowSliding: true
                              styles:
                                card:
                                  - width: 1fr
                                  - height: 155px
                                  - background: none
                                progress:
                                  background: var(--lcars-blue)
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                          layout:
                            grid-template-columns: 30px repeat(5, 1fr) 30px
                            grid-template-rows: 1fr
                            grid-auto-rows: 1fr
                            margin: '-4px -4px 0px -4px'
                            card_margin: 0
                            padding: 0
                  view_layout:
                    grid-area: child-main-bottom
                    margin: 0px
                    padding: 0px
                    card_margin: 0px
              layout:
                grid-template-columns: 1fr
                grid-template-rows: 170px 1fr 170px
                grid-template-areas: |
                  "child-main-top"
                  "child-main-middle"
                  "child-main-bottom"
                margin: '-4px -4px 0px -4px'
                card_margin: 0
                padding: 0
            view_layout:
              grid-area: content-panel
              margin: 0px
              padding: 0px
              card_margin: 0px
          - type: conditional
            conditions:
              - condition: state
                entity: input_select.lcars_ui_page_selector
                state: ENGINEERING
            card:
              type: custom:button-card
              styles:
                card:
                  - background-color: |
                      [[[
                        if (states['input_boolean.lcars_ui_debug'].state === 'on') {
                          return 'rgba(0,0,175,0.3)';
                        } else {
                          return 'transparent';
                        }
                      ]]]
                  - height: 702px
                  - width: 1155px
                  - border-radius: 0 !important
                custom_fields:
                  cast_button:
                    - position: absolute
                    - top: 10px
                    - left: 10px
              custom_fields:
                cast_button:
                  card:
                    type: button
                    entity: input_button.lcars_cast_panel
          - type: conditional
            conditions:
              - condition: state
                entity: input_select.lcars_ui_page_selector
                state: ENVIRONMENTAL
            card:
              type: custom:layout-card
              layout_type: custom:grid-layout
              cards:
                - type: vertical-stack
                  cards:
                    - type: custom:button-card
                      template:
                        - custom-button-lcars-header
                      variables:
                        border_top: 10px
                        border_left: 35px
                        card_height: 40px
                        card_min_height: 40px
                        lcars_color: var(--lcars-blue)
                        font_weight: bold
                        font_size: 20px
                        text_padding_top: 10px
                      label: ENVIRONMENTAL CONTROL
                    - type: thermostat
                      entity: climate.living_room
                      name: HVAC
                      show_current_as_primary: false
                      features:
                        - type: climate-hvac-modes
                          hvac_modes:
                            - heat
                            - cool
                            - heat_cool
                            - 'off'
                      card_mod:
                        class: middle
                        style: |
                          ha-card.middle {
                            background: none !important;
                          }
                    - type: custom:config-template-card
                      entities:
                        - sensor.living_room_sensor_temperature
                        - sensor.living_room_sensor_humidity
                        - climate.living_room
                      variables:
                        - states['climate.living_room'].state
                      card:
                        type: custom:mini-graph-card
                        entities:
                          - entity: sensor.living_room_sensor_temperature
                            name: Temperature
                            color: ${vars[0]==='heat' ? 'orange':'blue'}
                          - entity: sensor.living_room_sensor_humidity
                            name: Humidity
                            color: var(--green-color)
                            y_axis: secondary
                        hours_to_show: 24
                        line_width: 3
                        font_size: 50
                        animate: true
                        show:
                          name: false
                          icon: false
                          state: false
                          legend: false
                          fill: fade
                        card_mod:
                          class: middle
                          style: |
                            ha-card.middle {
                              background: none !important;
                            }
                    - type: custom:button-card
                      template:
                        - custom-button-lcars-footer
                      variables:
                        border_bottom: 10px
                        border_left: 35px
                        card_height: 70px
                        font_weight: bold
                  view_layout:
                    grid-area: child-main-left
                    margin: 0px
                    padding: 0px
                    card_margin: 0px
                - type: vertical-stack
                  cards:
                    - type: custom:button-card
                      template:
                        - custom-button-lcars-header-open
                      variables:
                        border_top: 10px
                        card_height: 40px
                        card_min_height: 40px
                        lcars_color: var(--lcars-blue)
                        font_weight: bold
                        font_size: 20px
                        text_padding_top: 10px
                      label: SENSORS
                    - square: false
                      type: grid
                      columns: 1
                      cards:
                        - type: custom:layout-card
                          layout_type: custom:grid-layout
                          cards:
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color: var(--lcars-blue)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              label: |
                                patio
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-orange)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.patio_sensor_temperature
                              label: |
                                [[[
                                  const state = states['sensor.patio_sensor_temperature'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-green)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.patio_sensor_humidity
                              label: |
                                [[[
                                  const state = states['sensor.patio_sensor_humidity'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:gap-card
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color: var(--lcars-blue)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              label: |
                                living room
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-orange)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.living_room_sensor_temperature
                              label: |
                                [[[
                                  const state = states['sensor.living_room_sensor_temperature'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-green)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.living_room_sensor_humidity
                              label: |
                                [[[
                                  const state = states['sensor.living_room_sensor_humidity'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:gap-card
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color: var(--lcars-blue)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              label: |
                                office
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-orange)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.office_sensor_temperature
                              label: |
                                [[[
                                  const state = states['sensor.office_sensor_temperature'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-green)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.office_sensor_humidity
                              label: |
                                [[[
                                  const state = states['sensor.office_sensor_humidity'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:gap-card
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color: var(--lcars-blue)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              label: |
                                bedroom
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-orange)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.bedroom_sensor_temperature
                              label: |
                                [[[
                                  const state = states['sensor.bedroom_sensor_temperature'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-green)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.bedroom_sensor_humidity
                              label: |
                                [[[
                                  const state = states['sensor.bedroom_sensor_humidity'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:gap-card
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color: var(--lcars-blue)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              label: |
                                bathroom
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-orange)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.bathroom_sensor_temperature
                              label: |
                                [[[
                                  const state = states['sensor.bathroom_sensor_temperature'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: var(--lcars-green)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 28px
                              entity: sensor.bathroom_sensor_humidity
                              label: |
                                [[[
                                  const state = states['sensor.bathroom_sensor_humidity'].state;
                                  const roundedState = Math.round(state * 10) / 10;
                                  let formattedValue = roundedState.toFixed(1);
                                  if (roundedState < 10) {
                                      formattedValue = formattedValue.padStart(4, '0');
                                  }
                                  return formattedValue;
                                ]]]
                            - type: custom:gap-card
                            - type: custom:gap-card
                          layout:
                            grid-template-columns: 2fr 1fr 1fr 35px
                            grid-template-rows: 45px
                            grid-auto-rows: 45px
                            grid-template-areas: |
                              "count button"
                            margin: '-4px -4px 0px -4px'
                            card_margin: 0
                            padding: 0
                            grid-area: left
                      view_layout:
                        grid-area: left
                        card_margin: 0px 0px 0px 0px
                        margin: 0px 0px 0px 0px
                    - square: false
                      type: grid
                      columns: 1
                      cards:
                        - type: custom:layout-card
                          layout_type: custom:grid-layout
                          cards:
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-bullet-right
                                - custom-button-animate-press
                              variables:
                                card_active_background_color: var(--lcars-ui-secondary)
                              entity: fan.400s
                              label: Air scrub
                              tap_action:
                                action: more-info
                              hold_action:
                                action: toggle
                              double_tap_action:
                                action: toggle
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_zero: var(--lcars-blue)
                                text_color_non_zero: white
                                card_active_background_color: var(--lcars-blue)
                                font_size: 40px
                              entity: sensor.400s_pm2_5
                              label: |
                                [[[
                                    const state = states['sensor.400s_pm2_5'].state;
                                    const roundedValue = Math.round(parseFloat(state));
                                    const formattedValue = roundedValue.toString().padStart(2, '0');
                                    return formattedValue;
                                ]]]
                            - type: custom:my-slider-v2
                              entity: fan.400s
                              flipped: false
                              step: 25
                              styles:
                                card:
                                  height: 60px
                                  background: none
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                progress:
                                  background: var(--lcars-blue)
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                              card_mod:
                                class: middle-right
                                style: |
                                  ha-card.middle-right {
                                    background: none !important;
                                  }
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-bullet-right
                                - custom-button-animate-press
                              variables:
                                card_active_background_color: var(--lcars-ui-secondary)
                              entity: input_boolean.bathroom_humidity_sensor_bypass
                              label: exhaust [auto]
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color_non_zero: var(--success-color)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 40px
                              entity: sensor.bathroom_sensor_humidity
                              label: |
                                [[[
                                    const state = states['sensor.bathroom_sensor_humidity'].state;
                                    const roundedValue = Math.round(parseFloat(state));
                                    const formattedValue = roundedValue.toString().padStart(2, '0');
                                    return formattedValue;
                                ]]]
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-button-square
                                - custom-button-animate-press
                              variables:
                                card_active_background_color: var(--lcars-ui-secondary)
                              entity: switch.bathroom_fan
                              label: bath exhaust
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-bullet-right
                                - custom-button-animate-press
                              variables:
                                card_active_background_color: var(--lcars-ui-secondary)
                              entity: >-
                                automation.fan_auto_fan_temperature_control_living_room
                              label: LR fan [auto]
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color: var(--lcars-blue)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 40px
                              entity: input_number.target_temp_living_room
                              label: |
                                [[[
                                    const state = states['input_number.target_temp_living_room'].state;
                                    const roundedValue = Math.round(parseFloat(state));
                                    const formattedValue = roundedValue.toString().padStart(2, '0');
                                    return formattedValue;
                                ]]]
                            - type: custom:my-slider-v2
                              entity: fan.living_room_fan
                              flipped: false
                              step: 33
                              styles:
                                card:
                                  height: 60px
                                  background: none
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                progress:
                                  background: var(--lcars-blue)
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                              card_mod:
                                class: middle-right
                                style: |
                                  ha-card.middle-right {
                                    background: none !important;
                                  }
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-bullet-right
                                - custom-button-animate-press
                              variables:
                                card_active_background_color: var(--lcars-ui-secondary)
                              entity: automation.fan_auto_bedroom
                              label: bed fan [auto]
                            - type: custom:button-card
                              template:
                                - custom-button-lcars-label
                              variables:
                                card_inactive_background_color: transparent
                                text_color: var(--lcars-blue)
                                card_active_background_color: var(--lcars-blue)
                                font_size: 40px
                              entity: input_number.target_temp_bedroom
                              label: |
                                [[[
                                    const state = states['input_number.target_temp_bedroom'].state;
                                    const roundedValue = Math.round(parseFloat(state));
                                    const formattedValue = roundedValue.toString().padStart(2, '0');
                                    return formattedValue;
                                ]]]
                            - type: custom:my-slider-v2
                              entity: fan.bedroom_fan
                              flipped: false
                              step: 33
                              styles:
                                card:
                                  height: 60px
                                  background: none
                                container:
                                  border-radius: 0
                                track:
                                  background: none
                                progress:
                                  background: var(--lcars-blue)
                                thumb:
                                  background: var(--lcars-card-bottom-color)
                              card_mod:
                                class: middle-right
                                style: |
                                  ha-card.middle-right {
                                    background: none !important;
                                  }
                          layout:
                            grid-template-columns: 1fr 65px 1fr
                            grid-template-rows: 70px 70px 70px 30px
                            grid-auto-rows: 20px
                            grid-template-areas: |
                              "count button"
                            margin: '-4px -4px 0px -4px'
                            card_margin: 0
                            padding: 0
                            grid-area: left
                      view_layout:
                        grid-area: left
                        card_margin: 0px 0px 0px 0px
                        margin: 0px 0px 0px 0px
                    - type: custom:button-card
                      template:
                        - custom-button-lcars-footer-open
                      variables:
                        border_bottom: 10px
                        card_height: 50px
                        min_card_height: 50px
                  view_layout:
                    grid-area: child-main-right
                    margin: 0px
                    padding: 0px
                    card_margin: 0px
              layout:
                grid-template-columns: 1fr 1fr
                grid-template-rows: 1fr
                grid-template-areas: |
                  "child-main-left child-main-right"
                margin: '-4px -4px 0px -4px'
                card_margin: 0
                padding: 0
              view_layout:
                grid-area: content-panel
                margin: 0px
                padding: 0px
                card_margin: 0px
        view_layout:
          grid-area: content-panel
      - type: custom:button-card
        view_layout:
          grid-area: header
        template:
          - cb-lcars-card-base
        styles:
          card:
            - height: 65px
            - width: 923px
            - border-radius: 0 !important
          custom_fields:
            trim_top:
              - position: absolute
              - left: 0px
              - top: 0px
            trim_bottom:
              - position: absolute
              - left: 0px
              - bottom: 0px
            button_grid:
              - position: absolute
              - left: 10px
              - top: 10px
        custom_fields:
          trim_top:
            card:
              type: custom:button-card
              template:
                - cb-lcars-button-picard-filled
              variables:
                card:
                  width: 923px
                  height: 5px
                  min_height: 5px
                  color:
                    background:
                      inactive: var(--lcars-ui-secondary)
          trim_bottom:
            card:
              type: custom:button-card
              template:
                - cb-lcars-button-picard-filled
              variables:
                card:
                  width: 923px
                  height: 5px
                  min_height: 5px
                  color:
                    background:
                      inactive: var(--lcars-ui-secondary)
          button_grid:
            card:
              type: custom:button-card
              template: cb-lcars-button-grid
              variables:
                grid:
                  buttons:
                    - entity: binary_sensor.patio_gate_home_security_intrusion
                      label: patio gate
                      variables:
                        card:
                          color:
                            background:
                              inactive: var(--picard-medium-light-blue)
                              active: var(--error-color)
                        icon:
                          color:
                            background:
                              inactive: var(--picard-medium-light-blue)
                              active: var(--error-collor)
                      show_icon: true
                      icon: none
                    - entity: binary_sensor.front_door_home_security_intrusion
                      label: front door
                    - entity: binary_sensor.front_window_home_security_intrusion
                      label: front window
                    - entity: binary_sensor.office_window_home_security_intrusion
                      label: office window
                    - entity: binary_sensor.bedroom_window_home_security_intrusion
                      label: bedroom window
                  X: 6
                  'Y': 1
                  gap: 25px
                button:
                  variables:
                    card:
                      width: 160px
                      height: 45px
                      color:
                        active: var(--error-color)
                        background:
                          active: var(--warning-color)
                    icon:
                      color:
                        active: null
                        inactive: null
                      background:
                        active: null
                        inactive: null
                  template:
                    - cb-lcars-button-lozenge
                    - cb-lcars-actions-more-info
      - type: custom:horizon-card
        moon: true
        elevation: 77
        fields:
          azimuth: false
          elevation: false
          moonrise: false
          moonset: false
          moon_phase: false
        card_mod:
          style: |
            ha-card {
              background: none
            }
        view_layout:
          grid-area: footer-right
      - type: custom:button-card
        template: cb-lcars-label
        entity: sensor.time
        view_layout:
          grid-area: header-right
        show_state: true
        variables:
          text:
            state:
              font_size: 60px
              font_weight: lighter
              color:
                non_zero: var(--picard-pale-orange)
              align: center
              padding:
                left: 40px
                bottom: 10px
          card:
            height: 70px
            width: 300px
            border:
              left:
                size: 80px
              right:
                size: 40px
              color: var(--lcars-card-bottom-color)
