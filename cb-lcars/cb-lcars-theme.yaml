cb-lcars-theme:
  template:
      - cb-lcars-functions
      - cb-lcars-defs
  triggers_update:
    - '[[[ return variables.___helpers.alert_condition ]]]'


  custom_fields:
    colors: |
      [[[
        const themes = variables.__defs.themes;
        let alertCondition = 'green'; // Default to 'green'
        if (variables.___helpers && variables.___helpers.alert_condition) {
          const entityState = states[variables.___helpers.alert_condition];
          if (entityState) {
            alertCondition = entityState.state.toLowerCase();
          } else {
            variables.__cblcarsLog('error', `Entity ${variables.___helpers.alert_condition} does not exist - defaulting to condition ${alertCondition}!`);
          }
        }
        const selectedTheme = themes[`${alertCondition}_alert`];
        //console.debug(variables.__defs.debug_title,'Setting alert condition ${alertCondition}'); 
        variables.__cblcarsLog('info',`Setting alert condition ${alertCondition}`);
        const colors = selectedTheme.colors;

        for (const [colorGroup, colorValues] of Object.entries(colors)) {
          for (const [colorName, colorValue] of Object.entries(colorValues)) {
            const cssVarName = `--${colorName}`;
            //if (getComputedStyle(document.documentElement).getPropertyValue(cssVarName).trim()) {
              //console.debug(variables.__defs.debug_title,`Setting ${cssVarName}=${colorValue}`);
              variables.__cblcarsLog('debug',`Setting ${cssVarName}=${colorValue}`);
              document.documentElement.style.setProperty(cssVarName, colorValue);
            //}
          }
        }
      ]]]
  styles:
    custom_fields:
      colors:
        - height: 0
        - width: 0
        - visibility: hidden
